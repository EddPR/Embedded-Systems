
ButtonFlash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000057d  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000149  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a3  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000484  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	8d d1       	rcall	.+794    	; 0x420 <main>
 106:	8d c1       	rjmp	.+794    	; 0x422 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <flash>:
}

//GOES TO OFF WITH SW1 OR ROTATE WITH SW2
void flash()
{
	DDRF = 0X0F;
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	80 bb       	out	0x10, r24	; 16
	PORTF = 0XF0;
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	81 bb       	out	0x11, r24	; 17
	int i;
	int mask = 0x0F;
	
	while(1)
	{
		PORTF = PORTF ^ mask;
 112:	1f e0       	ldi	r17, 0x0F	; 15
 114:	0f 2e       	mov	r0, r31
 116:	f4 e1       	ldi	r31, 0x14	; 20
 118:	ff 2e       	mov	r15, r31
 11a:	f0 2d       	mov	r31, r0
 11c:	00 e0       	ldi	r16, 0x00	; 0
 11e:	81 b3       	in	r24, 0x11	; 17
 120:	81 27       	eor	r24, r17
 122:	81 bb       	out	0x11, r24	; 17
 124:	cf 2d       	mov	r28, r15
 126:	d0 2f       	mov	r29, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	81 ee       	ldi	r24, 0xE1	; 225
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <flash+0x22>
 130:	00 c0       	rjmp	.+0      	; 0x132 <flash+0x28>
 132:	00 00       	nop
		for (i = 0; i < 20; i++)
		{
			_delay_ms(5);
			if((PINF >> 6)  == 0X00 || (PINF >> 6)  == 0X02)
 134:	8f b1       	in	r24, 0x0f	; 15
 136:	82 95       	swap	r24
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	83 70       	andi	r24, 0x03	; 3
 13e:	39 f0       	breq	.+14     	; 0x14e <flash+0x44>
 140:	8f b1       	in	r24, 0x0f	; 15
 142:	82 95       	swap	r24
 144:	86 95       	lsr	r24
 146:	86 95       	lsr	r24
 148:	83 70       	andi	r24, 0x03	; 3
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	19 f5       	brne	.+70     	; 0x194 <flash+0x8a>
 14e:	9f e6       	ldi	r25, 0x6F	; 111
 150:	21 e1       	ldi	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	91 50       	subi	r25, 0x01	; 1
 156:	20 40       	sbci	r18, 0x00	; 0
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <flash+0x4a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <flash+0x54>
 15e:	00 00       	nop
			{
				_delay_ms(350);
				if((PINF >> 6)  == 0X01 || (PINF >> 6)  == 0X03)
 160:	8f b1       	in	r24, 0x0f	; 15
 162:	82 95       	swap	r24
 164:	86 95       	lsr	r24
 166:	86 95       	lsr	r24
 168:	83 70       	andi	r24, 0x03	; 3
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	39 f0       	breq	.+14     	; 0x17c <flash+0x72>
 16e:	8f b1       	in	r24, 0x0f	; 15
 170:	82 95       	swap	r24
 172:	86 95       	lsr	r24
 174:	86 95       	lsr	r24
 176:	83 70       	andi	r24, 0x03	; 3
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	91 f4       	brne	.+36     	; 0x1a0 <flash+0x96>
				{
					sw0State = sw0State ^ 1;
 17c:	80 91 02 02 	lds	r24, 0x0202
 180:	90 91 03 02 	lds	r25, 0x0203
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	82 27       	eor	r24, r18
 188:	90 93 03 02 	sts	0x0203, r25
 18c:	80 93 02 02 	sts	0x0202, r24
					rotate();
 190:	d7 d0       	rcall	.+430    	; 0x340 <rotate>
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <flash+0x96>
 194:	81 ee       	ldi	r24, 0xE1	; 225
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <flash+0x8e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <flash+0x94>
 19e:	00 00       	nop
				}
			}
			else
			_delay_ms(5);
			if ((PINF >> 7) == 0X00)
 1a0:	7f 99       	sbic	0x0f, 7	; 15
 1a2:	16 c0       	rjmp	.+44     	; 0x1d0 <flash+0xc6>
 1a4:	9f e6       	ldi	r25, 0x6F	; 111
 1a6:	21 e1       	ldi	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <flash+0xa0>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <flash+0xaa>
 1b4:	00 00       	nop
			{
				_delay_ms(350);
				if((PINF >> 7) == 0X01)
 1b6:	7f 9b       	sbis	0x0f, 7	; 15
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <flash+0xc6>
				{
					sw1State = sw1State ^ 1;
 1ba:	80 91 00 02 	lds	r24, 0x0200
 1be:	90 91 01 02 	lds	r25, 0x0201
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	82 27       	eor	r24, r18
 1c6:	90 93 01 02 	sts	0x0201, r25
 1ca:	80 93 00 02 	sts	0x0200, r24
					off();
 1ce:	60 d0       	rcall	.+192    	; 0x290 <off>
 1d0:	21 97       	sbiw	r28, 0x01	; 1
	int mask = 0x0F;
	
	while(1)
	{
		PORTF = PORTF ^ mask;
		for (i = 0; i < 20; i++)
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <flash+0xcc>
 1d4:	a9 cf       	rjmp	.-174    	; 0x128 <flash+0x1e>
					sw1State = sw1State ^ 1;
					off();
				}
			}
		}
		PORTF = PORTF ^ mask;
 1d6:	81 b3       	in	r24, 0x11	; 17
 1d8:	81 27       	eor	r24, r17
 1da:	81 bb       	out	0x11, r24	; 17
 1dc:	ce e3       	ldi	r28, 0x3E	; 62
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	81 ee       	ldi	r24, 0xE1	; 225
 1e2:	94 e0       	ldi	r25, 0x04	; 4
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <flash+0xda>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <flash+0xe0>
 1ea:	00 00       	nop
		for (i = 0; i < 62; i++)
		{
			_delay_ms(5);
			if((PINF >> 6)  == 0X00 || (PINF >> 6)  == 0X02)
 1ec:	8f b1       	in	r24, 0x0f	; 15
 1ee:	82 95       	swap	r24
 1f0:	86 95       	lsr	r24
 1f2:	86 95       	lsr	r24
 1f4:	83 70       	andi	r24, 0x03	; 3
 1f6:	39 f0       	breq	.+14     	; 0x206 <flash+0xfc>
 1f8:	8f b1       	in	r24, 0x0f	; 15
 1fa:	82 95       	swap	r24
 1fc:	86 95       	lsr	r24
 1fe:	86 95       	lsr	r24
 200:	83 70       	andi	r24, 0x03	; 3
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	19 f5       	brne	.+70     	; 0x24c <flash+0x142>
 206:	9f e6       	ldi	r25, 0x6F	; 111
 208:	21 e1       	ldi	r18, 0x11	; 17
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <flash+0x102>
 214:	00 c0       	rjmp	.+0      	; 0x216 <flash+0x10c>
 216:	00 00       	nop
			{
				_delay_ms(350);
				if((PINF >> 6)  == 0X01 || (PINF >> 6)  == 0X03)
 218:	8f b1       	in	r24, 0x0f	; 15
 21a:	82 95       	swap	r24
 21c:	86 95       	lsr	r24
 21e:	86 95       	lsr	r24
 220:	83 70       	andi	r24, 0x03	; 3
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	39 f0       	breq	.+14     	; 0x234 <flash+0x12a>
 226:	8f b1       	in	r24, 0x0f	; 15
 228:	82 95       	swap	r24
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
 22e:	83 70       	andi	r24, 0x03	; 3
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	91 f4       	brne	.+36     	; 0x258 <flash+0x14e>
				{
					sw0State = sw0State ^ 1;
 234:	80 91 02 02 	lds	r24, 0x0202
 238:	90 91 03 02 	lds	r25, 0x0203
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	82 27       	eor	r24, r18
 240:	90 93 03 02 	sts	0x0203, r25
 244:	80 93 02 02 	sts	0x0202, r24
					rotate();
 248:	7b d0       	rcall	.+246    	; 0x340 <rotate>
 24a:	06 c0       	rjmp	.+12     	; 0x258 <flash+0x14e>
 24c:	81 ee       	ldi	r24, 0xE1	; 225
 24e:	94 e0       	ldi	r25, 0x04	; 4
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <flash+0x146>
 254:	00 c0       	rjmp	.+0      	; 0x256 <flash+0x14c>
 256:	00 00       	nop
				}
			}
			else
			_delay_ms(5);
			if ((PINF >> 7) == 0X00)
 258:	7f 99       	sbic	0x0f, 7	; 15
 25a:	16 c0       	rjmp	.+44     	; 0x288 <flash+0x17e>
 25c:	9f e6       	ldi	r25, 0x6F	; 111
 25e:	21 e1       	ldi	r18, 0x11	; 17
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	91 50       	subi	r25, 0x01	; 1
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <flash+0x158>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <flash+0x162>
 26c:	00 00       	nop
			{
				_delay_ms(350);
				if((PINF >> 7) == 0X01)
 26e:	7f 9b       	sbis	0x0f, 7	; 15
 270:	0b c0       	rjmp	.+22     	; 0x288 <flash+0x17e>
				{
					sw1State = sw1State ^ 1;
 272:	80 91 00 02 	lds	r24, 0x0200
 276:	90 91 01 02 	lds	r25, 0x0201
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	82 27       	eor	r24, r18
 27e:	90 93 01 02 	sts	0x0201, r25
 282:	80 93 00 02 	sts	0x0200, r24
					off();
 286:	04 d0       	rcall	.+8      	; 0x290 <off>
 288:	21 97       	sbiw	r28, 0x01	; 1
					off();
				}
			}
		}
		PORTF = PORTF ^ mask;
		for (i = 0; i < 62; i++)
 28a:	09 f0       	breq	.+2      	; 0x28e <flash+0x184>
 28c:	a9 cf       	rjmp	.-174    	; 0x1e0 <flash+0xd6>
 28e:	47 cf       	rjmp	.-370    	; 0x11e <flash+0x14>

00000290 <off>:


// START STATE. GOES TO FLASH ON SW1 OR ROTATE ON SW0
void off()
{
	DDRF = 0x0F;
 290:	8f e0       	ldi	r24, 0x0F	; 15
 292:	80 bb       	out	0x10, r24	; 16
	PORTF = 0XF0;
 294:	80 ef       	ldi	r24, 0xF0	; 240
 296:	81 bb       	out	0x11, r24	; 17
 298:	81 ee       	ldi	r24, 0xE1	; 225
 29a:	94 e0       	ldi	r25, 0x04	; 4
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <off+0xc>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <off+0x12>
 2a2:	00 00       	nop
	
	while(1)
	{
		_delay_ms(5);
		if((PINF >> 6)  == 0X00 || (PINF >> 6)  == 0X02)
 2a4:	8f b1       	in	r24, 0x0f	; 15
 2a6:	82 95       	swap	r24
 2a8:	86 95       	lsr	r24
 2aa:	86 95       	lsr	r24
 2ac:	83 70       	andi	r24, 0x03	; 3
 2ae:	39 f0       	breq	.+14     	; 0x2be <off+0x2e>
 2b0:	8f b1       	in	r24, 0x0f	; 15
 2b2:	82 95       	swap	r24
 2b4:	86 95       	lsr	r24
 2b6:	86 95       	lsr	r24
 2b8:	83 70       	andi	r24, 0x03	; 3
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	19 f5       	brne	.+70     	; 0x304 <off+0x74>
 2be:	9f e6       	ldi	r25, 0x6F	; 111
 2c0:	21 e1       	ldi	r18, 0x11	; 17
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	91 50       	subi	r25, 0x01	; 1
 2c6:	20 40       	sbci	r18, 0x00	; 0
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <off+0x34>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <off+0x3e>
 2ce:	00 00       	nop
		{
			_delay_ms(350);
			if((PINF >> 6)  == 0X01 || (PINF >> 6)  == 0X03)
 2d0:	8f b1       	in	r24, 0x0f	; 15
 2d2:	82 95       	swap	r24
 2d4:	86 95       	lsr	r24
 2d6:	86 95       	lsr	r24
 2d8:	83 70       	andi	r24, 0x03	; 3
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	39 f0       	breq	.+14     	; 0x2ec <off+0x5c>
 2de:	8f b1       	in	r24, 0x0f	; 15
 2e0:	82 95       	swap	r24
 2e2:	86 95       	lsr	r24
 2e4:	86 95       	lsr	r24
 2e6:	83 70       	andi	r24, 0x03	; 3
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	91 f4       	brne	.+36     	; 0x310 <off+0x80>
			{
				sw0State = sw0State ^ 1;
 2ec:	80 91 02 02 	lds	r24, 0x0202
 2f0:	90 91 03 02 	lds	r25, 0x0203
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	82 27       	eor	r24, r18
 2f8:	90 93 03 02 	sts	0x0203, r25
 2fc:	80 93 02 02 	sts	0x0202, r24
				rotate();
 300:	1f d0       	rcall	.+62     	; 0x340 <rotate>
 302:	06 c0       	rjmp	.+12     	; 0x310 <off+0x80>
 304:	81 ee       	ldi	r24, 0xE1	; 225
 306:	94 e0       	ldi	r25, 0x04	; 4
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <off+0x78>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <off+0x7e>
 30e:	00 00       	nop
			}
		}
		else
		_delay_ms(5);
		if ((PINF >> 7) == 0X00)
 310:	7f 99       	sbic	0x0f, 7	; 15
 312:	c2 cf       	rjmp	.-124    	; 0x298 <off+0x8>
 314:	9f e6       	ldi	r25, 0x6F	; 111
 316:	21 e1       	ldi	r18, 0x11	; 17
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	91 50       	subi	r25, 0x01	; 1
 31c:	20 40       	sbci	r18, 0x00	; 0
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <off+0x8a>
 322:	00 c0       	rjmp	.+0      	; 0x324 <off+0x94>
 324:	00 00       	nop
		{
			_delay_ms(350);
			if((PINF >> 7) == 0X01)
 326:	7f 9b       	sbis	0x0f, 7	; 15
 328:	b7 cf       	rjmp	.-146    	; 0x298 <off+0x8>
			{
				sw1State = sw1State ^ 1;
 32a:	80 91 00 02 	lds	r24, 0x0200
 32e:	90 91 01 02 	lds	r25, 0x0201
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	82 27       	eor	r24, r18
 336:	90 93 01 02 	sts	0x0201, r25
 33a:	80 93 00 02 	sts	0x0200, r24
				flash();
 33e:	e5 de       	rcall	.-566    	; 0x10a <flash>

00000340 <rotate>:
void rotate()
{
	int i;
	int j;
	int a = 0x01;
	DDRF = 0x0F;
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	80 bb       	out	0x10, r24	; 16
	PORTF = 0XF0;
 344:	80 ef       	ldi	r24, 0xF0	; 240
 346:	81 bb       	out	0x11, r24	; 17
	}
}

//GOES TO OFF WITH SW0 OR FLASH WITH SW1
void rotate()
{
 348:	a4 e0       	ldi	r26, 0x04	; 4
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	6a 2f       	mov	r22, r26
 352:	7f 2f       	mov	r23, r31
 354:	4e 2f       	mov	r20, r30
 356:	59 2f       	mov	r21, r25
	
	while(1)
	{
		for (j = 0; j < 4; j++)
		{
			PORTF = ((PORTF & 0XF0) | a);
 358:	81 b3       	in	r24, 0x11	; 17
 35a:	80 7f       	andi	r24, 0xF0	; 240
 35c:	84 2b       	or	r24, r20
 35e:	81 bb       	out	0x11, r24	; 17
 360:	2e e3       	ldi	r18, 0x3E	; 62
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	c1 ee       	ldi	r28, 0xE1	; 225
 366:	d4 e0       	ldi	r29, 0x04	; 4
 368:	21 97       	sbiw	r28, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <rotate+0x28>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <rotate+0x2e>
 36e:	00 00       	nop
			for (i = 0; i < 62; i++)
			{
				_delay_ms(5);
				if((PINF >> 6)  == 0X00 || (PINF >> 6)  == 0X02)
 370:	8f b1       	in	r24, 0x0f	; 15
 372:	82 95       	swap	r24
 374:	86 95       	lsr	r24
 376:	86 95       	lsr	r24
 378:	83 70       	andi	r24, 0x03	; 3
 37a:	39 f0       	breq	.+14     	; 0x38a <rotate+0x4a>
 37c:	8f b1       	in	r24, 0x0f	; 15
 37e:	82 95       	swap	r24
 380:	86 95       	lsr	r24
 382:	86 95       	lsr	r24
 384:	83 70       	andi	r24, 0x03	; 3
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	11 f5       	brne	.+68     	; 0x3ce <rotate+0x8e>
 38a:	df e6       	ldi	r29, 0x6F	; 111
 38c:	81 e1       	ldi	r24, 0x11	; 17
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	d1 50       	subi	r29, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	b0 40       	sbci	r27, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <rotate+0x50>
 398:	00 c0       	rjmp	.+0      	; 0x39a <rotate+0x5a>
 39a:	00 00       	nop
				{
					_delay_ms(350);
					if((PINF >> 6)  == 0X01 || (PINF >> 6)  == 0X03)
 39c:	8f b1       	in	r24, 0x0f	; 15
 39e:	82 95       	swap	r24
 3a0:	86 95       	lsr	r24
 3a2:	86 95       	lsr	r24
 3a4:	83 70       	andi	r24, 0x03	; 3
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <rotate+0x78>
 3aa:	8f b1       	in	r24, 0x0f	; 15
 3ac:	82 95       	swap	r24
 3ae:	86 95       	lsr	r24
 3b0:	86 95       	lsr	r24
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	89 f4       	brne	.+34     	; 0x3da <rotate+0x9a>
					{
						sw0State = sw0State ^ 1;
 3b8:	80 91 02 02 	lds	r24, 0x0202
 3bc:	90 91 03 02 	lds	r25, 0x0203
 3c0:	c1 e0       	ldi	r28, 0x01	; 1
 3c2:	8c 27       	eor	r24, r28
 3c4:	90 93 03 02 	sts	0x0203, r25
 3c8:	80 93 02 02 	sts	0x0202, r24
						off();
 3cc:	61 df       	rcall	.-318    	; 0x290 <off>
 3ce:	c1 ee       	ldi	r28, 0xE1	; 225
 3d0:	d4 e0       	ldi	r29, 0x04	; 4
 3d2:	21 97       	sbiw	r28, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <rotate+0x92>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <rotate+0x98>
 3d8:	00 00       	nop
					}
				}
				else
				_delay_ms(5);
				if ((PINF >> 7) == 0X00)
 3da:	7f 99       	sbic	0x0f, 7	; 15
 3dc:	16 c0       	rjmp	.+44     	; 0x40a <rotate+0xca>
 3de:	df e6       	ldi	r29, 0x6F	; 111
 3e0:	81 e1       	ldi	r24, 0x11	; 17
 3e2:	b1 e0       	ldi	r27, 0x01	; 1
 3e4:	d1 50       	subi	r29, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	b0 40       	sbci	r27, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <rotate+0xa4>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <rotate+0xae>
 3ee:	00 00       	nop
				{
					_delay_ms(350);
					if((PINF >> 7) == 0X01)
 3f0:	7f 9b       	sbis	0x0f, 7	; 15
 3f2:	0b c0       	rjmp	.+22     	; 0x40a <rotate+0xca>
					{
						sw1State = sw1State ^ 1;
 3f4:	80 91 00 02 	lds	r24, 0x0200
 3f8:	90 91 01 02 	lds	r25, 0x0201
 3fc:	c1 e0       	ldi	r28, 0x01	; 1
 3fe:	8c 27       	eor	r24, r28
 400:	90 93 01 02 	sts	0x0201, r25
 404:	80 93 00 02 	sts	0x0200, r24
						flash();
 408:	80 de       	rcall	.-768    	; 0x10a <flash>
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	31 09       	sbc	r19, r1
	while(1)
	{
		for (j = 0; j < 4; j++)
		{
			PORTF = ((PORTF & 0XF0) | a);
			for (i = 0; i < 62; i++)
 40e:	09 f0       	breq	.+2      	; 0x412 <rotate+0xd2>
 410:	a9 cf       	rjmp	.-174    	; 0x364 <rotate+0x24>
						sw1State = sw1State ^ 1;
						flash();
					}
				}
			}
			a = a << 1;
 412:	44 0f       	add	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	61 50       	subi	r22, 0x01	; 1
 418:	71 09       	sbc	r23, r1
	DDRF = 0x0F;
	PORTF = 0XF0;
	
	while(1)
	{
		for (j = 0; j < 4; j++)
 41a:	09 f0       	breq	.+2      	; 0x41e <rotate+0xde>
 41c:	9d cf       	rjmp	.-198    	; 0x358 <rotate+0x18>
 41e:	98 cf       	rjmp	.-208    	; 0x350 <rotate+0x10>

00000420 <main>:



int main()
{
	off();
 420:	37 df       	rcall	.-402    	; 0x290 <off>

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
