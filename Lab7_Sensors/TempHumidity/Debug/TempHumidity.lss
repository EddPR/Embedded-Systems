
TempHumidity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800200  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800398  00800398  000009b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015dc  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006dd  00000000  00000000  00002e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00003530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f5  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ab  00000000  00000000  00003da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 39       	cpi	r26, 0x98	; 152
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a8 e9       	ldi	r26, 0x98	; 152
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 3a       	cpi	r26, 0xA6	; 166
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	81 d2       	rcall	.+1282   	; 0x622 <main>
 120:	2f c3       	rjmp	.+1630   	; 0x780 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <resetState>:
/***********************************************************************
* Functions prepares for next data transmission
***********************************************************************/
void resetState()
{
	sei(); // Re-enable interrupts
 124:	78 94       	sei
	
	for (int i = 0; i < 5; i++) // Clear bytes
	{
		bytes[i] = 0;
 126:	ec e9       	ldi	r30, 0x9C	; 156
 128:	f3 e0       	ldi	r31, 0x03	; 3
 12a:	11 82       	std	Z+1, r1	; 0x01
 12c:	10 82       	st	Z, r1
 12e:	13 82       	std	Z+3, r1	; 0x03
 130:	12 82       	std	Z+2, r1	; 0x02
 132:	15 82       	std	Z+5, r1	; 0x05
 134:	14 82       	std	Z+4, r1	; 0x04
 136:	17 82       	std	Z+7, r1	; 0x07
 138:	16 82       	std	Z+6, r1	; 0x06
 13a:	11 86       	std	Z+9, r1	; 0x09
 13c:	10 86       	std	Z+8, r1	; 0x08
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	8b e7       	ldi	r24, 0x7B	; 123
 142:	92 e9       	ldi	r25, 0x92	; 146
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <resetState+0x20>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <resetState+0x2a>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <pinMode>:
* mode: INPUT, OUTPUT, or INPUT_PULLUP
***********************************************************************/
void pinMode(int pin, char mode)
{
	// Not a port or not a pin
	if ((pin > 53 || pin < 0) || (mode < 0 || mode > 2))
 152:	86 33       	cpi	r24, 0x36	; 54
 154:	91 05       	cpc	r25, r1
 156:	08 f0       	brcs	.+2      	; 0x15a <pinMode+0x8>
 158:	6a c0       	rjmp	.+212    	; 0x22e <pinMode+0xdc>
 15a:	63 30       	cpi	r22, 0x03	; 3
 15c:	08 f0       	brcs	.+2      	; 0x160 <pinMode+0xe>
 15e:	67 c0       	rjmp	.+206    	; 0x22e <pinMode+0xdc>
	{
		return -1;
	}

	if (mode == INPUT)
 160:	61 11       	cpse	r22, r1
 162:	27 c0       	rjmp	.+78     	; 0x1b2 <pinMode+0x60>
	{
		*(map[pin].ddr) &= ~(1 << map[pin].bitShift);
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	fc 01       	movw	r30, r24
 16e:	e8 5f       	subi	r30, 0xF8	; 248
 170:	fd 4f       	sbci	r31, 0xFD	; 253
 172:	a0 81       	ld	r26, Z
 174:	b1 81       	ldd	r27, Z+1	; 0x01
 176:	3c 91       	ld	r19, X
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	03 80       	ldd	r0, Z+3	; 0x03
 180:	02 c0       	rjmp	.+4      	; 0x186 <pinMode+0x34>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <pinMode+0x30>
 18a:	24 2f       	mov	r18, r20
 18c:	20 95       	com	r18
 18e:	23 23       	and	r18, r19
 190:	2c 93       	st	X, r18
		*(map[pin].ddr + 1) &= ~(1 << map[pin].bitShift);
 192:	a0 81       	ld	r26, Z
 194:	b1 81       	ldd	r27, Z+1	; 0x01
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	2c 91       	ld	r18, X
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	03 80       	ldd	r0, Z+3	; 0x03
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <pinMode+0x52>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <pinMode+0x4e>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	11 96       	adiw	r26, 0x01	; 1
 1ae:	8c 93       	st	X, r24
 1b0:	08 95       	ret
	}
	else if (mode == OUTPUT)
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	a9 f4       	brne	.+42     	; 0x1e0 <pinMode+0x8e>
	{
		*(map[pin].ddr) |= (1 << map[pin].bitShift);
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	fc 01       	movw	r30, r24
 1c0:	e8 5f       	subi	r30, 0xF8	; 248
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	a0 81       	ld	r26, Z
 1c6:	b1 81       	ldd	r27, Z+1	; 0x01
 1c8:	2c 91       	ld	r18, X
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	03 80       	ldd	r0, Z+3	; 0x03
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <pinMode+0x84>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <pinMode+0x80>
 1da:	82 2b       	or	r24, r18
 1dc:	8c 93       	st	X, r24
 1de:	08 95       	ret
	}
	else if(mode == INPUT_PULLUP)
 1e0:	62 30       	cpi	r22, 0x02	; 2
 1e2:	29 f5       	brne	.+74     	; 0x22e <pinMode+0xdc>
	{
		*(map[pin].ddr) &= ~(1 << map[pin].bitShift);
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	fc 01       	movw	r30, r24
 1ee:	e8 5f       	subi	r30, 0xF8	; 248
 1f0:	fd 4f       	sbci	r31, 0xFD	; 253
 1f2:	a0 81       	ld	r26, Z
 1f4:	b1 81       	ldd	r27, Z+1	; 0x01
 1f6:	3c 91       	ld	r19, X
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	ac 01       	movw	r20, r24
 1fe:	03 80       	ldd	r0, Z+3	; 0x03
 200:	02 c0       	rjmp	.+4      	; 0x206 <pinMode+0xb4>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <pinMode+0xb0>
 20a:	24 2f       	mov	r18, r20
 20c:	20 95       	com	r18
 20e:	23 23       	and	r18, r19
 210:	2c 93       	st	X, r18
		*(map[pin].ddr + 1) |= (1 << map[pin].bitShift);
 212:	a0 81       	ld	r26, Z
 214:	b1 81       	ldd	r27, Z+1	; 0x01
 216:	11 96       	adiw	r26, 0x01	; 1
 218:	2c 91       	ld	r18, X
 21a:	11 97       	sbiw	r26, 0x01	; 1
 21c:	03 80       	ldd	r0, Z+3	; 0x03
 21e:	02 c0       	rjmp	.+4      	; 0x224 <pinMode+0xd2>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <pinMode+0xce>
 228:	82 2b       	or	r24, r18
 22a:	11 96       	adiw	r26, 0x01	; 1
 22c:	8c 93       	st	X, r24
 22e:	08 95       	ret

00000230 <digitalRead>:
* pin: the number of the pin whose mode you wish to set
***********************************************************************/
int digitalRead(int pin)
{
	// Not a pin
	if (pin > 53 || pin < 0)
 230:	86 33       	cpi	r24, 0x36	; 54
 232:	91 05       	cpc	r25, r1
 234:	a8 f4       	brcc	.+42     	; 0x260 <digitalRead+0x30>
	{
		return -1;
	}
	
	return (*(map[pin].ddr - 1) & (1 << map[pin].bitShift)) ? 1 : 0;
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	fc 01       	movw	r30, r24
 240:	e8 5f       	subi	r30, 0xF8	; 248
 242:	fd 4f       	sbci	r31, 0xFD	; 253
 244:	a0 81       	ld	r26, Z
 246:	b1 81       	ldd	r27, Z+1	; 0x01
 248:	11 97       	sbiw	r26, 0x01	; 1
 24a:	8c 91       	ld	r24, X
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	03 80       	ldd	r0, Z+3	; 0x03
 250:	02 c0       	rjmp	.+4      	; 0x256 <digitalRead+0x26>
 252:	95 95       	asr	r25
 254:	87 95       	ror	r24
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <digitalRead+0x22>
 25a:	81 70       	andi	r24, 0x01	; 1
 25c:	99 27       	eor	r25, r25
 25e:	08 95       	ret
int digitalRead(int pin)
{
	// Not a pin
	if (pin > 53 || pin < 0)
	{
		return -1;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	return (*(map[pin].ddr - 1) & (1 << map[pin].bitShift)) ? 1 : 0;

}
 264:	08 95       	ret

00000266 <storeDataBytes>:
* bytes[ 0-1 ] will contain humidity
* bytes[ 2-4 ] will contain temperature
* bytes[  5  ] will contain check sum
***********************************************************************/
void storeDataBytes()
{
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	0c e9       	ldi	r16, 0x9C	; 156
 278:	13 e0       	ldi	r17, 0x03	; 3
 27a:	0f 2e       	mov	r0, r31
 27c:	f6 ea       	ldi	r31, 0xA6	; 166
 27e:	ef 2e       	mov	r14, r31
 280:	f3 e0       	ldi	r31, 0x03	; 3
 282:	ff 2e       	mov	r15, r31
 284:	f0 2d       	mov	r31, r0
	for (int i = 0; i < 5; i++) // 2B RH data, 2B T data, 1B checksum
	{
		getByte = 0; // reset data
 286:	68 94       	set
 288:	cc 24       	eor	r12, r12
 28a:	c3 f8       	bld	r12, 3
 28c:	d1 2c       	mov	r13, r1
 28e:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <__data_end+0x1>
 292:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <__data_end>
 296:	cc 2d       	mov	r28, r12
 298:	dd 2d       	mov	r29, r13
		for (int j = 0; j < 8; j++) // 8 bits for each byte
		{
			getByte <<= 1; // mask
 29a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__data_end>
 29e:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__data_end+0x1>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <__data_end+0x1>
 2aa:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <__data_end>
			while (digitalRead(DATA_PIN)); // Wait for sensor to drive LOW
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	be df       	rcall	.-132    	; 0x230 <digitalRead>
 2b4:	89 2b       	or	r24, r25
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <storeDataBytes+0x48>
			while (!digitalRead(DATA_PIN)); // Wait for sensor to drive HIGH
 2b8:	87 e0       	ldi	r24, 0x07	; 7
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	b9 df       	rcall	.-142    	; 0x230 <digitalRead>
 2be:	89 2b       	or	r24, r25
 2c0:	d9 f3       	breq	.-10     	; 0x2b8 <storeDataBytes+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	f0 ea       	ldi	r31, 0xA0	; 160
 2c4:	fa 95       	dec	r31
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <storeDataBytes+0x5e>
			
			_delay_us(30); // while in high, 26-30 ms indicates a logical 0
			
			// so more than that, indicates a logical 1
			if (digitalRead(DATA_PIN)) getByte |= 1; 
 2c8:	87 e0       	ldi	r24, 0x07	; 7
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	b1 df       	rcall	.-158    	; 0x230 <digitalRead>
 2ce:	89 2b       	or	r24, r25
 2d0:	49 f0       	breq	.+18     	; 0x2e4 <storeDataBytes+0x7e>
 2d2:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__data_end>
 2d6:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__data_end+0x1>
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <__data_end+0x1>
 2e0:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <__data_end>
 2e4:	21 97       	sbiw	r28, 0x01	; 1
void storeDataBytes()
{
	for (int i = 0; i < 5; i++) // 2B RH data, 2B T data, 1B checksum
	{
		getByte = 0; // reset data
		for (int j = 0; j < 8; j++) // 8 bits for each byte
 2e6:	c9 f6       	brne	.-78     	; 0x29a <storeDataBytes+0x34>
			_delay_us(30); // while in high, 26-30 ms indicates a logical 0
			
			// so more than that, indicates a logical 1
			if (digitalRead(DATA_PIN)) getByte |= 1; 
		}
		bytes[i] = getByte; // store byte
 2e8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__data_end>
 2ec:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__data_end+0x1>
 2f0:	f8 01       	movw	r30, r16
 2f2:	81 93       	st	Z+, r24
 2f4:	91 93       	st	Z+, r25
 2f6:	8f 01       	movw	r16, r30
* bytes[ 2-4 ] will contain temperature
* bytes[  5  ] will contain check sum
***********************************************************************/
void storeDataBytes()
{
	for (int i = 0; i < 5; i++) // 2B RH data, 2B T data, 1B checksum
 2f8:	ee 15       	cp	r30, r14
 2fa:	ff 05       	cpc	r31, r15
 2fc:	41 f6       	brne	.-112    	; 0x28e <storeDataBytes+0x28>
			// so more than that, indicates a logical 1
			if (digitalRead(DATA_PIN)) getByte |= 1; 
		}
		bytes[i] = getByte; // store byte
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	08 95       	ret

00000310 <digitalWrite>:
* value: HIGH or LOW
***********************************************************************/
void digitalWrite(int pin, int value)
{
	// Not a pin or not a possible value
	if ((value < 0 || value > 1) || (pin > 53 || pin < 0))
 310:	62 30       	cpi	r22, 0x02	; 2
 312:	71 05       	cpc	r23, r1
 314:	b0 f5       	brcc	.+108    	; 0x382 <digitalWrite+0x72>
 316:	86 33       	cpi	r24, 0x36	; 54
 318:	91 05       	cpc	r25, r1
 31a:	98 f5       	brcc	.+102    	; 0x382 <digitalWrite+0x72>
	{
		return -1;
	}
	if (value == HIGH)
 31c:	61 30       	cpi	r22, 0x01	; 1
 31e:	71 05       	cpc	r23, r1
 320:	c1 f4       	brne	.+48     	; 0x352 <digitalWrite+0x42>
	{
		*(map[pin].ddr + 1) |= (1 << map[pin].bitShift);
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	fc 01       	movw	r30, r24
 32c:	e8 5f       	subi	r30, 0xF8	; 248
 32e:	fd 4f       	sbci	r31, 0xFD	; 253
 330:	a0 81       	ld	r26, Z
 332:	b1 81       	ldd	r27, Z+1	; 0x01
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	2c 91       	ld	r18, X
 338:	11 97       	sbiw	r26, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	03 80       	ldd	r0, Z+3	; 0x03
 340:	02 c0       	rjmp	.+4      	; 0x346 <digitalWrite+0x36>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <digitalWrite+0x32>
 34a:	82 2b       	or	r24, r18
 34c:	11 96       	adiw	r26, 0x01	; 1
 34e:	8c 93       	st	X, r24
 350:	08 95       	ret
	}
	else
	{
		*(map[pin].ddr + 1) &= ~(1 << map[pin].bitShift);
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	fc 01       	movw	r30, r24
 35c:	e8 5f       	subi	r30, 0xF8	; 248
 35e:	fd 4f       	sbci	r31, 0xFD	; 253
 360:	a0 81       	ld	r26, Z
 362:	b1 81       	ldd	r27, Z+1	; 0x01
 364:	11 96       	adiw	r26, 0x01	; 1
 366:	2c 91       	ld	r18, X
 368:	11 97       	sbiw	r26, 0x01	; 1
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	03 80       	ldd	r0, Z+3	; 0x03
 370:	02 c0       	rjmp	.+4      	; 0x376 <digitalWrite+0x66>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <digitalWrite+0x62>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	11 96       	adiw	r26, 0x01	; 1
 380:	8c 93       	st	X, r24
 382:	08 95       	ret

00000384 <serial_open>:
* port: port number (0, 1, 2, 3)
* speed: baud rate calculated depending on F_CPU
* config: framing parameters (Data bits / Parity / Stop bits)
***********************************************************************/
void serial_open(unsigned char port, long speed, int config)
{
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	6a 01       	movw	r12, r20
 392:	7b 01       	movw	r14, r22
		enableR = (1 << RXEN0);
		enableT = (1 << TXEN0);
		break;
	}
	
	serial_port[port]->ucsrb = enableR | enableT;
 394:	c8 2f       	mov	r28, r24
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	cc 0f       	add	r28, r28
 39a:	dd 1f       	adc	r29, r29
 39c:	c0 50       	subi	r28, 0x00	; 0
 39e:	de 4f       	sbci	r29, 0xFE	; 254
 3a0:	e8 81       	ld	r30, Y
 3a2:	f9 81       	ldd	r31, Y+1	; 0x01
 3a4:	88 e1       	ldi	r24, 0x18	; 24
 3a6:	81 83       	std	Z+1, r24	; 0x01
	serial_port[port]->ucsrc = config;
 3a8:	e8 81       	ld	r30, Y
 3aa:	f9 81       	ldd	r31, Y+1	; 0x01
 3ac:	22 83       	std	Z+2, r18	; 0x02
	speed = (F_CPU / 16 / speed - 1);
 3ae:	60 e4       	ldi	r22, 0x40	; 64
 3b0:	72 e4       	ldi	r23, 0x42	; 66
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	a7 01       	movw	r20, r14
 3b8:	96 01       	movw	r18, r12
 3ba:	53 d1       	rcall	.+678    	; 0x662 <__divmodsi4>
	serial_port[port]->ubrr = speed;
 3bc:	e8 81       	ld	r30, Y
 3be:	f9 81       	ldd	r31, Y+1	; 0x01
		break;
	}
	
	serial_port[port]->ucsrb = enableR | enableT;
	serial_port[port]->ucsrc = config;
	speed = (F_CPU / 16 / speed - 1);
 3c0:	da 01       	movw	r26, r20
 3c2:	c9 01       	movw	r24, r18
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	a1 09       	sbc	r26, r1
 3c8:	b1 09       	sbc	r27, r1
	serial_port[port]->ubrr = speed;
 3ca:	95 83       	std	Z+5, r25	; 0x05
 3cc:	84 83       	std	Z+4, r24	; 0x04
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	08 95       	ret

000003dc <serial_write>:
* port: port number (0, 1, 2, 3)
* data: byte character
***********************************************************************/
void serial_write(unsigned char port, char data)
{
	switch (port) {
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	81 f0       	breq	.+32     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e0:	38 f0       	brcs	.+14     	; 0x3f0 <serial_write+0x14>
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	a9 f0       	breq	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	d9 f0       	breq	.+54     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		case 3:
		while (!(UCSR3A & (1 << UDRE0)));	// Wait for TXN
		UDR3 = data;
		break;
		default:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	20 c0       	rjmp	.+64     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
***********************************************************************/
void serial_write(unsigned char port, char data)
{
	switch (port) {
		case 0:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 3f0:	e0 ec       	ldi	r30, 0xC0	; 192
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	85 ff       	sbrs	r24, 5
 3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <serial_write+0x18>
		UDR0 = data;
 3fa:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
 3fe:	08 95       	ret
		case 1:
		while (!(UCSR1A & (1 << UDRE1)));	// Wait for TXN
 400:	e8 ec       	ldi	r30, 0xC8	; 200
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	85 ff       	sbrs	r24, 5
 408:	fd cf       	rjmp	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		UDR1 = data;
 40a:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
		break;
 40e:	08 95       	ret
		case 2:
		while (!(UCSR2A & (1 << UDRE2)));	// Wait for TXN
 410:	e0 ed       	ldi	r30, 0xD0	; 208
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	85 ff       	sbrs	r24, 5
 418:	fd cf       	rjmp	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		UDR2 = data;
 41a:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		break;
 41e:	08 95       	ret
		case 3:
		while (!(UCSR3A & (1 << UDRE0)));	// Wait for TXN
 420:	e0 e3       	ldi	r30, 0x30	; 48
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	80 81       	ld	r24, Z
 426:	85 ff       	sbrs	r24, 5
 428:	fd cf       	rjmp	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		UDR3 = data;
 42a:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		break;
 42e:	08 95       	ret
		default:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 430:	80 81       	ld	r24, Z
 432:	85 ff       	sbrs	r24, 5
 434:	fd cf       	rjmp	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		UDR0 = data;
 436:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 43a:	08 95       	ret

0000043c <serial_print>:
/***********************************************************************
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
	while(*data)
 440:	fc 01       	movw	r30, r24
 442:	60 81       	ld	r22, Z
 444:	66 23       	and	r22, r22
 446:	39 f0       	breq	.+14     	; 0x456 <serial_print+0x1a>
 448:	ec 01       	movw	r28, r24
 44a:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_write(0, *data++);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	c6 df       	rcall	.-116    	; 0x3dc <serial_write>
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
	while(*data)
 450:	69 91       	ld	r22, Y+
 452:	61 11       	cpse	r22, r1
 454:	fb cf       	rjmp	.-10     	; 0x44c <serial_print+0x10>
	{
		serial_write(0, *data++);
	}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <sensorSetup>:
* Preliminary pin configurations for the DHT22 sensor set up. 
* Function also checks the connection.
***********************************************************************/
void sensorSetup()
{
	cli();	// Disable interrupts
 45c:	f8 94       	cli
	
	pinMode(DATA_PIN, OUTPUT); // Configure digital pin for output
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	76 de       	rcall	.-788    	; 0x152 <pinMode>
	digitalWrite(DATA_PIN, LOW); // Drive line low
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	50 df       	rcall	.-352    	; 0x310 <digitalWrite>
 470:	8f ec       	ldi	r24, 0xCF	; 207
 472:	97 e0       	ldi	r25, 0x07	; 7
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <sensorSetup+0x18>
 478:	00 c0       	rjmp	.+0      	; 0x47a <sensorSetup+0x1e>
 47a:	00 00       	nop
	_delay_us(500); // Wait for a request to read
	
	pinMode(DATA_PIN, INPUT_PULLUP); // Activate pull-up resistor
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	67 de       	rcall	.-818    	; 0x152 <pinMode>
 484:	8f e3       	ldi	r24, 0x3F	; 63
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <sensorSetup+0x2c>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <sensorSetup+0x32>
 48e:	00 00       	nop
	_delay_us(80); // Wait for a signal from sensor
	
	if (digitalRead(DATA_PIN)) // Check sensor connection during line LOW
 490:	87 e0       	ldi	r24, 0x07	; 7
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	cd de       	rcall	.-614    	; 0x230 <digitalRead>
 496:	89 2b       	or	r24, r25
 498:	21 f0       	breq	.+8      	; 0x4a2 <sensorSetup+0x46>
	{
		serial_print("No connection response during LOW drive. Please check pin connections. \r");
 49a:	80 ee       	ldi	r24, 0xE0	; 224
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	ce cf       	rjmp	.-100    	; 0x43c <serial_print>
		return;
 4a0:	08 95       	ret
 4a2:	8f e3       	ldi	r24, 0x3F	; 63
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <sensorSetup+0x4a>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <sensorSetup+0x50>
 4ac:	00 00       	nop
	}
	_delay_us(80); // Line is driven LOW for 80 usecs, so wait for next check
	// Connection test when line is driven HIGH for last 80 usecs
	if (!digitalRead(DATA_PIN)) // Check sensor connection during line HIGH
 4ae:	87 e0       	ldi	r24, 0x07	; 7
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	be de       	rcall	.-644    	; 0x230 <digitalRead>
 4b4:	89 2b       	or	r24, r25
 4b6:	19 f4       	brne	.+6      	; 0x4be <sensorSetup+0x62>
	{
		serial_print("No connection response during HIGH drive. Please check pin connections. \r");
 4b8:	89 e2       	ldi	r24, 0x29	; 41
 4ba:	93 e0       	ldi	r25, 0x03	; 3
 4bc:	bf cf       	rjmp	.-130    	; 0x43c <serial_print>
 4be:	08 95       	ret

000004c0 <printTempInF>:
* value to properly calculate the temperature from Celsius to Fahrenheit.
* bytes2: upper 8 bits from Temperature data
* bytes3: lower 8 bits from Temperature data
***********************************************************************/
void printTempInF(uint8_t bytes2, uint8_t bytes3)
{
 4c0:	ef 92       	push	r14
 4c2:	ff 92       	push	r15
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	28 97       	sbiw	r28, 0x08	; 8
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	
	int temp = ((bytes2) << 8) | bytes3; // store bytes into single var
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	9b 01       	movw	r18, r22
 4e0:	38 2b       	or	r19, r24
 4e2:	c9 01       	movw	r24, r18
	temp = temp / 10; // Calculate the whole number 
 4e4:	0f 2e       	mov	r0, r31
 4e6:	fa e0       	ldi	r31, 0x0A	; 10
 4e8:	ef 2e       	mov	r14, r31
 4ea:	f1 2c       	mov	r15, r1
 4ec:	f0 2d       	mov	r31, r0
 4ee:	b7 01       	movw	r22, r14
 4f0:	a5 d0       	rcall	.+330    	; 0x63c <__divmodhi4>
 4f2:	8b 01       	movw	r16, r22
	int remainder = temp % 10; // Calculate the fraction
	temp = ((temp * 9) / 5) + 32; // Converting Celsius to Fahrenheit
 4f4:	cb 01       	movw	r24, r22
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	86 0f       	add	r24, r22
 504:	97 1f       	adc	r25, r23
 506:	65 e0       	ldi	r22, 0x05	; 5
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	98 d0       	rcall	.+304    	; 0x63c <__divmodhi4>
 50c:	cb 01       	movw	r24, r22
	if (bytes2 < 0) temp = temp * -1; // If negative, print it as such
	itoa(temp, buffer, 10); // Convert data to string
 50e:	4a e0       	ldi	r20, 0x0A	; 10
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	be 01       	movw	r22, r28
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	80 96       	adiw	r24, 0x20	; 32
 51a:	f5 d0       	rcall	.+490    	; 0x706 <itoa>
	serial_print(" TMP= ");
 51c:	83 e7       	ldi	r24, 0x73	; 115
 51e:	93 e0       	ldi	r25, 0x03	; 3
 520:	8d df       	rcall	.-230    	; 0x43c <serial_print>
	serial_print(buffer);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	8a df       	rcall	.-236    	; 0x43c <serial_print>
{
	char buffer[8];
	
	int temp = ((bytes2) << 8) | bytes3; // store bytes into single var
	temp = temp / 10; // Calculate the whole number 
	int remainder = temp % 10; // Calculate the fraction
 528:	c8 01       	movw	r24, r16
 52a:	b7 01       	movw	r22, r14
 52c:	87 d0       	rcall	.+270    	; 0x63c <__divmodhi4>
	temp = ((temp * 9) / 5) + 32; // Converting Celsius to Fahrenheit
	if (bytes2 < 0) temp = temp * -1; // If negative, print it as such
	itoa(temp, buffer, 10); // Convert data to string
	serial_print(" TMP= ");
	serial_print(buffer);
	itoa(remainder, buffer, 10); // Convert data to string
 52e:	4a e0       	ldi	r20, 0x0A	; 10
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	be 01       	movw	r22, r28
 534:	6f 5f       	subi	r22, 0xFF	; 255
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	e6 d0       	rcall	.+460    	; 0x706 <itoa>
	serial_print(".");
 53a:	8a e7       	ldi	r24, 0x7A	; 122
 53c:	93 e0       	ldi	r25, 0x03	; 3
 53e:	7e df       	rcall	.-260    	; 0x43c <serial_print>
	serial_print(buffer);
 540:	ce 01       	movw	r24, r28
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	7b df       	rcall	.-266    	; 0x43c <serial_print>
	serial_print(" \r");
 546:	85 e9       	ldi	r24, 0x95	; 149
 548:	93 e0       	ldi	r25, 0x03	; 3
 54a:	78 df       	rcall	.-272    	; 0x43c <serial_print>
}
 54c:	28 96       	adiw	r28, 0x08	; 8
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	08 95       	ret

00000566 <printHumidity>:
* value to properly interpret the humidity value. 
* bytes0: upper 8 bits from Humidity data
* bytes1: lower 8 bits from Humidity data
***********************************************************************/
void printHumidity(uint8_t bytes0, uint8_t bytes1)
{
 566:	ef 92       	push	r14
 568:	ff 92       	push	r15
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	28 97       	sbiw	r28, 0x08	; 8
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	
	int relHum = (bytes0 << 8) | bytes1; // store bytes into single var
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	9b 01       	movw	r18, r22
 586:	38 2b       	or	r19, r24
 588:	c9 01       	movw	r24, r18
	relHum = relHum / 10; // Calculate the whole number 
 58a:	0a e0       	ldi	r16, 0x0A	; 10
 58c:	10 e0       	ldi	r17, 0x00	; 0
 58e:	b8 01       	movw	r22, r16
 590:	55 d0       	rcall	.+170    	; 0x63c <__divmodhi4>
 592:	7b 01       	movw	r14, r22
	int remainder = relHum % 10; // Calculate the fraction
	serial_print("RHUM= "); 
 594:	8c e7       	ldi	r24, 0x7C	; 124
 596:	93 e0       	ldi	r25, 0x03	; 3
 598:	51 df       	rcall	.-350    	; 0x43c <serial_print>
	itoa(relHum, buffer, 10); // Convert data to string
 59a:	4a e0       	ldi	r20, 0x0A	; 10
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	be 01       	movw	r22, r28
 5a0:	6f 5f       	subi	r22, 0xFF	; 255
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	c7 01       	movw	r24, r14
 5a6:	af d0       	rcall	.+350    	; 0x706 <itoa>
	serial_print(buffer);
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	47 df       	rcall	.-370    	; 0x43c <serial_print>
{
	char buffer[8];
	
	int relHum = (bytes0 << 8) | bytes1; // store bytes into single var
	relHum = relHum / 10; // Calculate the whole number 
	int remainder = relHum % 10; // Calculate the fraction
 5ae:	c7 01       	movw	r24, r14
 5b0:	b8 01       	movw	r22, r16
 5b2:	44 d0       	rcall	.+136    	; 0x63c <__divmodhi4>
	serial_print("RHUM= "); 
	itoa(relHum, buffer, 10); // Convert data to string
	serial_print(buffer);
	itoa(remainder, buffer, 10); // Convert data to string
 5b4:	4a e0       	ldi	r20, 0x0A	; 10
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	be 01       	movw	r22, r28
 5ba:	6f 5f       	subi	r22, 0xFF	; 255
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	a3 d0       	rcall	.+326    	; 0x706 <itoa>
	serial_print(".");
 5c0:	8a e7       	ldi	r24, 0x7A	; 122
 5c2:	93 e0       	ldi	r25, 0x03	; 3
 5c4:	3b df       	rcall	.-394    	; 0x43c <serial_print>
	serial_print(buffer);
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	38 df       	rcall	.-400    	; 0x43c <serial_print>
	serial_print(", ");
 5cc:	83 e8       	ldi	r24, 0x83	; 131
 5ce:	93 e0       	ldi	r25, 0x03	; 3
 5d0:	35 df       	rcall	.-406    	; 0x43c <serial_print>
}
 5d2:	28 96       	adiw	r28, 0x08	; 8
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	08 95       	ret

000005ec <checkSum>:
* If so, it prints the data. Otherwise, it'll print a checksum error.
***********************************************************************/
void checkSum()
{
	unsigned char sum;
	sum = bytes[0] + bytes[1] + bytes[2] + bytes[3];
 5ec:	ec e9       	ldi	r30, 0x9C	; 156
 5ee:	f3 e0       	ldi	r31, 0x03	; 3
 5f0:	80 81       	ld	r24, Z
 5f2:	62 81       	ldd	r22, Z+2	; 0x02
 5f4:	26 2f       	mov	r18, r22
 5f6:	28 0f       	add	r18, r24
 5f8:	94 81       	ldd	r25, Z+4	; 0x04
 5fa:	29 0f       	add	r18, r25
 5fc:	96 81       	ldd	r25, Z+6	; 0x06
 5fe:	29 0f       	add	r18, r25
	if(bytes[4] == sum)
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	40 85       	ldd	r20, Z+8	; 0x08
 604:	51 85       	ldd	r21, Z+9	; 0x09
 606:	42 17       	cp	r20, r18
 608:	53 07       	cpc	r21, r19
 60a:	39 f4       	brne	.+14     	; 0x61a <checkSum+0x2e>
	{
		printHumidity(bytes[0], bytes[1]);
 60c:	ac df       	rcall	.-168    	; 0x566 <printHumidity>
		printTempInF(bytes[2], bytes[3]);
 60e:	ec e9       	ldi	r30, 0x9C	; 156
 610:	f3 e0       	ldi	r31, 0x03	; 3
 612:	66 81       	ldd	r22, Z+6	; 0x06
 614:	84 81       	ldd	r24, Z+4	; 0x04
 616:	54 cf       	rjmp	.-344    	; 0x4c0 <printTempInF>
 618:	08 95       	ret
	}
	else
	{
		serial_print("Checksum Error. \r");
 61a:	86 e8       	ldi	r24, 0x86	; 134
 61c:	93 e0       	ldi	r25, 0x03	; 3
 61e:	0e cf       	rjmp	.-484    	; 0x43c <serial_print>
 620:	08 95       	ret

00000622 <main>:
	(SERIAL_REGS *)(0x130)	// serial port 3
};

int main(void)
{
	serial_open(0, 19200, SERIAL_8N1);
 622:	26 e0       	ldi	r18, 0x06	; 6
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	5b e4       	ldi	r21, 0x4B	; 75
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	a9 de       	rcall	.-686    	; 0x384 <serial_open>
	
	while (1)
	{
		sensorSetup();
 632:	14 df       	rcall	.-472    	; 0x45c <sensorSetup>
		storeDataBytes();
 634:	18 de       	rcall	.-976    	; 0x266 <storeDataBytes>
		checkSum();		
 636:	da df       	rcall	.-76     	; 0x5ec <checkSum>
		resetState();
 638:	75 dd       	rcall	.-1302   	; 0x124 <resetState>
	}
 63a:	fb cf       	rjmp	.-10     	; 0x632 <main+0x10>

0000063c <__divmodhi4>:
 63c:	97 fb       	bst	r25, 7
 63e:	07 2e       	mov	r0, r23
 640:	16 f4       	brtc	.+4      	; 0x646 <__divmodhi4+0xa>
 642:	00 94       	com	r0
 644:	06 d0       	rcall	.+12     	; 0x652 <__divmodhi4_neg1>
 646:	77 fd       	sbrc	r23, 7
 648:	08 d0       	rcall	.+16     	; 0x65a <__divmodhi4_neg2>
 64a:	27 d0       	rcall	.+78     	; 0x69a <__udivmodhi4>
 64c:	07 fc       	sbrc	r0, 7
 64e:	05 d0       	rcall	.+10     	; 0x65a <__divmodhi4_neg2>
 650:	3e f4       	brtc	.+14     	; 0x660 <__divmodhi4_exit>

00000652 <__divmodhi4_neg1>:
 652:	90 95       	com	r25
 654:	81 95       	neg	r24
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__divmodhi4_neg2>:
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255

00000660 <__divmodhi4_exit>:
 660:	08 95       	ret

00000662 <__divmodsi4>:
 662:	05 2e       	mov	r0, r21
 664:	97 fb       	bst	r25, 7
 666:	16 f4       	brtc	.+4      	; 0x66c <__divmodsi4+0xa>
 668:	00 94       	com	r0
 66a:	0f d0       	rcall	.+30     	; 0x68a <__negsi2>
 66c:	57 fd       	sbrc	r21, 7
 66e:	05 d0       	rcall	.+10     	; 0x67a <__divmodsi4_neg2>
 670:	28 d0       	rcall	.+80     	; 0x6c2 <__udivmodsi4>
 672:	07 fc       	sbrc	r0, 7
 674:	02 d0       	rcall	.+4      	; 0x67a <__divmodsi4_neg2>
 676:	46 f4       	brtc	.+16     	; 0x688 <__divmodsi4_exit>
 678:	08 c0       	rjmp	.+16     	; 0x68a <__negsi2>

0000067a <__divmodsi4_neg2>:
 67a:	50 95       	com	r21
 67c:	40 95       	com	r20
 67e:	30 95       	com	r19
 680:	21 95       	neg	r18
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	4f 4f       	sbci	r20, 0xFF	; 255
 686:	5f 4f       	sbci	r21, 0xFF	; 255

00000688 <__divmodsi4_exit>:
 688:	08 95       	ret

0000068a <__negsi2>:
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <__udivmodhi4>:
 69a:	aa 1b       	sub	r26, r26
 69c:	bb 1b       	sub	r27, r27
 69e:	51 e1       	ldi	r21, 0x11	; 17
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <__udivmodhi4_ep>

000006a2 <__udivmodhi4_loop>:
 6a2:	aa 1f       	adc	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	a6 17       	cp	r26, r22
 6a8:	b7 07       	cpc	r27, r23
 6aa:	10 f0       	brcs	.+4      	; 0x6b0 <__udivmodhi4_ep>
 6ac:	a6 1b       	sub	r26, r22
 6ae:	b7 0b       	sbc	r27, r23

000006b0 <__udivmodhi4_ep>:
 6b0:	88 1f       	adc	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	5a 95       	dec	r21
 6b6:	a9 f7       	brne	.-22     	; 0x6a2 <__udivmodhi4_loop>
 6b8:	80 95       	com	r24
 6ba:	90 95       	com	r25
 6bc:	bc 01       	movw	r22, r24
 6be:	cd 01       	movw	r24, r26
 6c0:	08 95       	ret

000006c2 <__udivmodsi4>:
 6c2:	a1 e2       	ldi	r26, 0x21	; 33
 6c4:	1a 2e       	mov	r1, r26
 6c6:	aa 1b       	sub	r26, r26
 6c8:	bb 1b       	sub	r27, r27
 6ca:	fd 01       	movw	r30, r26
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <__udivmodsi4_ep>

000006ce <__udivmodsi4_loop>:
 6ce:	aa 1f       	adc	r26, r26
 6d0:	bb 1f       	adc	r27, r27
 6d2:	ee 1f       	adc	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	a2 17       	cp	r26, r18
 6d8:	b3 07       	cpc	r27, r19
 6da:	e4 07       	cpc	r30, r20
 6dc:	f5 07       	cpc	r31, r21
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__udivmodsi4_ep>
 6e0:	a2 1b       	sub	r26, r18
 6e2:	b3 0b       	sbc	r27, r19
 6e4:	e4 0b       	sbc	r30, r20
 6e6:	f5 0b       	sbc	r31, r21

000006e8 <__udivmodsi4_ep>:
 6e8:	66 1f       	adc	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	1a 94       	dec	r1
 6f2:	69 f7       	brne	.-38     	; 0x6ce <__udivmodsi4_loop>
 6f4:	60 95       	com	r22
 6f6:	70 95       	com	r23
 6f8:	80 95       	com	r24
 6fa:	90 95       	com	r25
 6fc:	9b 01       	movw	r18, r22
 6fe:	ac 01       	movw	r20, r24
 700:	bd 01       	movw	r22, r26
 702:	cf 01       	movw	r24, r30
 704:	08 95       	ret

00000706 <itoa>:
 706:	45 32       	cpi	r20, 0x25	; 37
 708:	51 05       	cpc	r21, r1
 70a:	18 f4       	brcc	.+6      	; 0x712 <itoa+0xc>
 70c:	42 30       	cpi	r20, 0x02	; 2
 70e:	08 f0       	brcs	.+2      	; 0x712 <itoa+0xc>
 710:	04 c0       	rjmp	.+8      	; 0x71a <__itoa_ncheck>
 712:	fb 01       	movw	r30, r22
 714:	10 82       	st	Z, r1
 716:	cb 01       	movw	r24, r22
 718:	08 95       	ret

0000071a <__itoa_ncheck>:
 71a:	bb 27       	eor	r27, r27
 71c:	4a 30       	cpi	r20, 0x0A	; 10
 71e:	31 f4       	brne	.+12     	; 0x72c <__itoa_ncheck+0x12>
 720:	99 23       	and	r25, r25
 722:	22 f4       	brpl	.+8      	; 0x72c <__itoa_ncheck+0x12>
 724:	bd e2       	ldi	r27, 0x2D	; 45
 726:	90 95       	com	r25
 728:	81 95       	neg	r24
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	01 c0       	rjmp	.+2      	; 0x730 <__utoa_common>

0000072e <__utoa_ncheck>:
 72e:	bb 27       	eor	r27, r27

00000730 <__utoa_common>:
 730:	fb 01       	movw	r30, r22
 732:	55 27       	eor	r21, r21
 734:	aa 27       	eor	r26, r26
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	aa 1f       	adc	r26, r26
 73c:	a4 17       	cp	r26, r20
 73e:	10 f0       	brcs	.+4      	; 0x744 <__utoa_common+0x14>
 740:	a4 1b       	sub	r26, r20
 742:	83 95       	inc	r24
 744:	50 51       	subi	r21, 0x10	; 16
 746:	b9 f7       	brne	.-18     	; 0x736 <__utoa_common+0x6>
 748:	a0 5d       	subi	r26, 0xD0	; 208
 74a:	aa 33       	cpi	r26, 0x3A	; 58
 74c:	08 f0       	brcs	.+2      	; 0x750 <__utoa_common+0x20>
 74e:	a9 5d       	subi	r26, 0xD9	; 217
 750:	a1 93       	st	Z+, r26
 752:	00 97       	sbiw	r24, 0x00	; 0
 754:	79 f7       	brne	.-34     	; 0x734 <__utoa_common+0x4>
 756:	b1 11       	cpse	r27, r1
 758:	b1 93       	st	Z+, r27
 75a:	11 92       	st	Z+, r1
 75c:	cb 01       	movw	r24, r22
 75e:	00 c0       	rjmp	.+0      	; 0x760 <strrev>

00000760 <strrev>:
 760:	dc 01       	movw	r26, r24
 762:	fc 01       	movw	r30, r24
 764:	67 2f       	mov	r22, r23
 766:	71 91       	ld	r23, Z+
 768:	77 23       	and	r23, r23
 76a:	e1 f7       	brne	.-8      	; 0x764 <strrev+0x4>
 76c:	32 97       	sbiw	r30, 0x02	; 2
 76e:	04 c0       	rjmp	.+8      	; 0x778 <strrev+0x18>
 770:	7c 91       	ld	r23, X
 772:	6d 93       	st	X+, r22
 774:	70 83       	st	Z, r23
 776:	62 91       	ld	r22, -Z
 778:	ae 17       	cp	r26, r30
 77a:	bf 07       	cpc	r27, r31
 77c:	c8 f3       	brcs	.-14     	; 0x770 <strrev+0x10>
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
