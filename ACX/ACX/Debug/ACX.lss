
ACX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800200  00800200  0000053c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d6  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dda  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000943  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000377  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003b7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	d1 c1       	rjmp	.+930    	; 0x3f8 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 33       	cpi	r26, 0x39	; 57
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	68 d1       	rcall	.+720    	; 0x3d6 <main>
 106:	de c1       	rjmp	.+956    	; 0x4c4 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <x_yield>:
x_yield:
;------------------------------------------------------------------------
; Save thread context	; x -> r27:26   y -> r29:28   z -> r31:r30
;-------------------------------------------------------------------------
; perserve all callee-saved registers
		push	r2
 10a:	2f 92       	push	r2
		push	r3
 10c:	3f 92       	push	r3
		push	r4
 10e:	4f 92       	push	r4
		push	r5
 110:	5f 92       	push	r5
		push	r6
 112:	6f 92       	push	r6
		push	r7
 114:	7f 92       	push	r7
		push	r8
 116:	8f 92       	push	r8
		push	r9
 118:	9f 92       	push	r9
		push	r10
 11a:	af 92       	push	r10
		push	r11
 11c:	bf 92       	push	r11
		push	r12
 11e:	cf 92       	push	r12
		push	r13
 120:	df 92       	push	r13
		push	r14
 122:	ef 92       	push	r14
		push	r15
 124:	ff 92       	push	r15
		push	r16
 126:	0f 93       	push	r16
		push	r17
 128:	1f 93       	push	r17
		push	r28
 12a:	cf 93       	push	r28
		push	r29
 12c:	df 93       	push	r29

0000012e <getThread>:

getThread:
		lds		r18, x_thread_id	; save thread ID
 12e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <x_thread_id>
		lds		r19, x_thread_mask	; save thread mask
 132:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <x_thread_mask>

00000136 <loadStack>:
loadStack:
		ldi		r30, lo8(stack)		; load lower byte address of stack array (Z)
 136:	e6 e0       	ldi	r30, 0x06	; 6
		ldi 	r31, hi8(stack)		; load higher byte address of stack array (Z+1)
 138:	f2 e0       	ldi	r31, 0x02	; 2

0000013a <storeSP>:
storeSP:
		cli							; disable global interrupts
 13a:	f8 94       	cli
		ldi		r26, SPL			; save SPL in temporary register (X)
 13c:	ad e3       	ldi	r26, 0x3D	; 61
		ldi		r27, SPH			; save SPH in temporary register (X+1) (5E?)
 13e:	be e3       	ldi	r27, 0x3E	; 62
		sei							; enable global interrupts
 140:	78 94       	sei

00000142 <x_schedule>:
;                         because we can reach this without saving regs
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
		lds		r18, disable_status	; load disable status
 142:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <disable_status>
		lds		r19, suspend_status	; load suspend status
 146:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <suspend_status>
		lds		r20, delay_status	; load delay status
 14a:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <delay_status>
		or		r18, r19			; compute available thread based on status
 14e:	23 2b       	or	r18, r19
		or		r18, r20			; compute available thread based on status
 150:	24 2b       	or	r18, r20
		com		r18					; invert status mask
 152:	20 95       	com	r18

00000154 <calcThreadMask>:
calcThreadMask:
		lds		r24, x_thread_id	; load parameter for bit2mask8
 154:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <x_thread_id>
		call	bit2mask8			; relative call subroutine
 158:	2f d0       	rcall	.+94     	; 0x1b8 <bit2mask8>

0000015a <loadThread>:
loadThread:
		lds		r21, x_thread_id	; save thread ID
 15a:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <x_thread_id>
		mov		r22, r24			; save thread mask calculated in bit2mask8
 15e:	68 2f       	mov	r22, r24

00000160 <checkThread>:
checkThread:
		inc		r21					; increment x_thread_id
 160:	53 95       	inc	r21
		cpi		r21, 8				; check if x_thread_id is 8
 162:	58 30       	cpi	r21, 0x08	; 8
		brne	nextAvailable		; if x_thread_id != 8, continue on, otherwise clear
 164:	19 f4       	brne	.+6      	; 0x16c <nextAvailable>

00000166 <clear>:
clear:
		clr		r21					; if x_thread_id == 8, set to 0 and
 166:	55 27       	eor	r21, r21
		ldi		r22, 1 				; set x_thread_mask to 1
 168:	61 e0       	ldi	r22, 0x01	; 1
		jmp		specialCase			; you shouldn't shift the pre-set mask in this case
 16a:	01 c0       	rjmp	.+2      	; 0x16e <specialCase>

0000016c <nextAvailable>:
nextAvailable:
		lsl		r22					; left shift x_thread_mask (next thread)
 16c:	66 0f       	add	r22, r22

0000016e <specialCase>:
specialCase:
		cp		r22, r18			; check if next thread is equal to thread status
 16e:	62 17       	cp	r22, r18
		brne	checkThread			; if not, check the next thread, otherwise
 170:	b9 f7       	brne	.-18     	; 0x160 <checkThread>

00000172 <saveThread>:
saveThread:
		cli							; disable global interrupts
 172:	f8 94       	cli
		sts		x_thread_id, r21	; store new x_thread_id
 174:	50 93 04 02 	sts	0x0204, r21	; 0x800204 <x_thread_id>
		sts		x_thread_mask, r22	; store new x_thread_mask
 178:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <x_thread_mask>
		ldi		r26, lo8(stack)		; load lower byte address of stack array (X)
 17c:	a6 e0       	ldi	r26, 0x06	; 6
		ldi 	r27, hi8(stack)		; load higher byte address of stack array (X+1)
 17e:	b2 e0       	ldi	r27, 0x02	; 2

00000180 <charOffset>:
charOffset:
		lsl		r21					; working towards multiplying x_thread_id by 4...
 180:	55 0f       	add	r21, r21
		lsl		r21					; to create a 4 bit offset (x_thread_id * 4)
 182:	55 0f       	add	r21, r21
		add		r26, r21			; increment stack by ofset
 184:	a5 0f       	add	r26, r21
		adc		r27, r1				; add 0 to propagate the carry
 186:	b1 1d       	adc	r27, r1

00000188 <updateSP>:
updateSP:
		sts		SPL, r27			; update SPL to new thread context
 188:	b0 93 3d 00 	sts	0x003D, r27	; 0x80003d <__TEXT_REGION_LENGTH__+0x70003d>
		sts		SPH, r26			; update SPH to new thread context
 18c:	a0 93 3e 00 	sts	0x003E, r26	; 0x80003e <__TEXT_REGION_LENGTH__+0x70003e>
		sei							; enable global interrupts
 190:	78 94       	sei

00000192 <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		pop		r29
 192:	df 91       	pop	r29
		pop		r28
 194:	cf 91       	pop	r28
		pop		r17
 196:	1f 91       	pop	r17
		pop		r16
 198:	0f 91       	pop	r16
		pop		r15
 19a:	ff 90       	pop	r15
		pop		r14
 19c:	ef 90       	pop	r14
		pop		r13
 19e:	df 90       	pop	r13
		pop		r12
 1a0:	cf 90       	pop	r12
		pop		r11
 1a2:	bf 90       	pop	r11
		pop		r10
 1a4:	af 90       	pop	r10
		pop		r9
 1a6:	9f 90       	pop	r9
		pop		r8
 1a8:	8f 90       	pop	r8
		pop		r7
 1aa:	7f 90       	pop	r7
		pop		r6
 1ac:	6f 90       	pop	r6
		pop		r5
 1ae:	5f 90       	pop	r5
		pop		r4
 1b0:	4f 90       	pop	r4
		pop		r3
 1b2:	3f 90       	pop	r3
		pop		r2
 1b4:	2f 90       	pop	r2

	// Return to next thread
		ret
 1b6:	08 95       	ret

000001b8 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		mov		r23, r24				; copy paraqmeter, now is count	
 1b8:	78 2f       	mov	r23, r24
		ldi		r24, 1					; mask beggins with a 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
		cpi		r23, 0					; if param is 0, return
 1bc:	70 30       	cpi	r23, 0x00	; 0
		breq	finish
 1be:	21 f0       	breq	.+8      	; 0x1c8 <finish>

000001c0 <loop>:
loop:	
		lsl		r24						; shift mask left
 1c0:	88 0f       	add	r24, r24
		dec		r23						; decrement count
 1c2:	7a 95       	dec	r23
		breq	finish					; if count is zero, return
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <finish>
		brne	loop					; if count > 0, loop
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <loop>

000001c8 <finish>:
finish:
 1c8:	08 95       	ret

000001ca <x_init>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	f8 94       	cli
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	84 bd       	out	0x24, r24	; 36
 1d4:	9a ef       	ldi	r25, 0xFA	; 250
 1d6:	97 bd       	out	0x27, r25	; 39
 1d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	85 bd       	out	0x25, r24	; 37
 1e0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 1e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 1e8:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <_edata+0x2>
 1ec:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_edata+0x3>
 1f0:	8e ef       	ldi	r24, 0xFE	; 254
 1f2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <disable_status>
 1f6:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <suspend_status>
 1fa:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <delay_status>
 1fe:	e6 e2       	ldi	r30, 0x26	; 38
 200:	f2 e0       	ldi	r31, 0x02	; 2
 202:	11 82       	std	Z+1, r1	; 0x01
 204:	10 82       	st	Z, r1
 206:	13 82       	std	Z+3, r1	; 0x03
 208:	12 82       	std	Z+2, r1	; 0x02
 20a:	15 82       	std	Z+5, r1	; 0x05
 20c:	14 82       	std	Z+4, r1	; 0x04
 20e:	17 82       	std	Z+7, r1	; 0x07
 210:	16 82       	std	Z+6, r1	; 0x06
 212:	11 86       	std	Z+9, r1	; 0x09
 214:	10 86       	std	Z+8, r1	; 0x08
 216:	13 86       	std	Z+11, r1	; 0x0b
 218:	12 86       	std	Z+10, r1	; 0x0a
 21a:	15 86       	std	Z+13, r1	; 0x0d
 21c:	14 86       	std	Z+12, r1	; 0x0c
 21e:	17 86       	std	Z+15, r1	; 0x0f
 220:	16 86       	std	Z+14, r1	; 0x0e
 222:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <x_thread_id>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <x_thread_mask>
 22c:	e6 e0       	ldi	r30, 0x06	; 6
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	8f e7       	ldi	r24, 0x7F	; 127
 232:	91 e2       	ldi	r25, 0x21	; 33
 234:	91 83       	std	Z+1, r25	; 0x01
 236:	80 83       	st	Z, r24
 238:	93 83       	std	Z+3, r25	; 0x03
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	90 e2       	ldi	r25, 0x20	; 32
 240:	95 83       	std	Z+5, r25	; 0x05
 242:	84 83       	std	Z+4, r24	; 0x04
 244:	97 83       	std	Z+7, r25	; 0x07
 246:	86 83       	std	Z+6, r24	; 0x06
 248:	8f e7       	ldi	r24, 0x7F	; 127
 24a:	90 e2       	ldi	r25, 0x20	; 32
 24c:	91 87       	std	Z+9, r25	; 0x09
 24e:	80 87       	std	Z+8, r24	; 0x08
 250:	93 87       	std	Z+11, r25	; 0x0b
 252:	82 87       	std	Z+10, r24	; 0x0a
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	9f e1       	ldi	r25, 0x1F	; 31
 258:	95 87       	std	Z+13, r25	; 0x0d
 25a:	84 87       	std	Z+12, r24	; 0x0c
 25c:	97 87       	std	Z+15, r25	; 0x0f
 25e:	86 87       	std	Z+14, r24	; 0x0e
 260:	8f e7       	ldi	r24, 0x7F	; 127
 262:	9f e1       	ldi	r25, 0x1F	; 31
 264:	91 8b       	std	Z+17, r25	; 0x11
 266:	80 8b       	std	Z+16, r24	; 0x10
 268:	93 8b       	std	Z+19, r25	; 0x13
 26a:	82 8b       	std	Z+18, r24	; 0x12
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	9e e1       	ldi	r25, 0x1E	; 30
 270:	95 8b       	std	Z+21, r25	; 0x15
 272:	84 8b       	std	Z+20, r24	; 0x14
 274:	97 8b       	std	Z+23, r25	; 0x17
 276:	86 8b       	std	Z+22, r24	; 0x16
 278:	8f e7       	ldi	r24, 0x7F	; 127
 27a:	9e e1       	ldi	r25, 0x1E	; 30
 27c:	91 8f       	std	Z+25, r25	; 0x19
 27e:	80 8f       	std	Z+24, r24	; 0x18
 280:	93 8f       	std	Z+27, r25	; 0x1b
 282:	82 8f       	std	Z+26, r24	; 0x1a
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	9d e1       	ldi	r25, 0x1D	; 29
 288:	95 8f       	std	Z+29, r25	; 0x1d
 28a:	84 8f       	std	Z+28, r24	; 0x1c
 28c:	97 8f       	std	Z+31, r25	; 0x1f
 28e:	86 8f       	std	Z+30, r24	; 0x1e
 290:	8a ea       	ldi	r24, 0xAA	; 170
 292:	80 93 00 21 	sts	0x2100, r24	; 0x802100 <__bss_end+0x1ec7>
 296:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <__bss_end+0x1e47>
 29a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__bss_end+0x1dc7>
 29e:	80 93 80 1f 	sts	0x1F80, r24	; 0x801f80 <__bss_end+0x1d47>
 2a2:	80 93 00 1f 	sts	0x1F00, r24	; 0x801f00 <__bss_end+0x1cc7>
 2a6:	80 93 80 1e 	sts	0x1E80, r24	; 0x801e80 <__bss_end+0x1c47>
 2aa:	80 93 00 1e 	sts	0x1E00, r24	; 0x801e00 <__bss_end+0x1bc7>
 2ae:	80 93 80 1d 	sts	0x1D80, r24	; 0x801d80 <__bss_end+0x1b47>
 2b2:	8d b7       	in	r24, 0x3d	; 61
 2b4:	9e b7       	in	r25, 0x3e	; 62
 2b6:	81 15       	cp	r24, r1
 2b8:	92 42       	sbci	r25, 0x22	; 34
 2ba:	b0 f4       	brcc	.+44     	; 0x2e8 <x_init+0x11e>
 2bc:	a0 e8       	ldi	r26, 0x80	; 128
 2be:	b1 e2       	ldi	r27, 0x21	; 33
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	92 e2       	ldi	r25, 0x22	; 34
 2c4:	c1 e0       	ldi	r28, 0x01	; 1
 2c6:	d2 e2       	ldi	r29, 0x22	; 34
 2c8:	fc 01       	movw	r30, r24
 2ca:	22 91       	ld	r18, -Z
 2cc:	2e 93       	st	-X, r18
 2ce:	be 01       	movw	r22, r28
 2d0:	68 1b       	sub	r22, r24
 2d2:	79 0b       	sbc	r23, r25
 2d4:	9c 01       	movw	r18, r24
 2d6:	22 50       	subi	r18, 0x02	; 2
 2d8:	31 09       	sbc	r19, r1
 2da:	4d b7       	in	r20, 0x3d	; 61
 2dc:	5e b7       	in	r21, 0x3e	; 62
 2de:	cf 01       	movw	r24, r30
 2e0:	24 17       	cp	r18, r20
 2e2:	35 07       	cpc	r19, r21
 2e4:	88 f7       	brcc	.-30     	; 0x2c8 <x_init+0xfe>
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <x_init+0x122>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	91 e2       	ldi	r25, 0x21	; 33
 2f0:	86 1b       	sub	r24, r22
 2f2:	97 0b       	sbc	r25, r23
 2f4:	9e bf       	out	0x3e, r25	; 62
 2f6:	8d bf       	out	0x3d, r24	; 61
 2f8:	78 94       	sei
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <x_delay>:
 300:	9c 01       	movw	r18, r24
 302:	9f b7       	in	r25, 0x3f	; 63
 304:	f8 94       	cli
 306:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <x_thread_id>
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	ea 5d       	subi	r30, 0xDA	; 218
 312:	fd 4f       	sbci	r31, 0xFD	; 253
 314:	31 83       	std	Z+1, r19	; 0x01
 316:	20 83       	st	Z, r18
 318:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <disable_status>
 31c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <x_thread_mask>
 320:	82 2b       	or	r24, r18
 322:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <disable_status>
 326:	9f bf       	out	0x3f, r25	; 63
 328:	f0 ce       	rjmp	.-544    	; 0x10a <x_yield>
 32a:	08 95       	ret

0000032c <thread0>:
 32c:	38 9a       	sbi	0x07, 0	; 7
 32e:	c1 e0       	ldi	r28, 0x01	; 1
 330:	88 b1       	in	r24, 0x08	; 8
 332:	8c 27       	eor	r24, r28
 334:	88 b9       	out	0x08, r24	; 8
 336:	8a ef       	ldi	r24, 0xFA	; 250
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	e2 df       	rcall	.-60     	; 0x300 <x_delay>
 33c:	f9 cf       	rjmp	.-14     	; 0x330 <thread0+0x4>

0000033e <thread1>:
 33e:	39 9a       	sbi	0x07, 1	; 7
 340:	c2 e0       	ldi	r28, 0x02	; 2
 342:	88 b1       	in	r24, 0x08	; 8
 344:	8c 27       	eor	r24, r28
 346:	88 b9       	out	0x08, r24	; 8
 348:	84 e8       	ldi	r24, 0x84	; 132
 34a:	93 e0       	ldi	r25, 0x03	; 3
 34c:	d9 df       	rcall	.-78     	; 0x300 <x_delay>
 34e:	f9 cf       	rjmp	.-14     	; 0x342 <thread1+0x4>

00000350 <thread2>:
 350:	3a 9a       	sbi	0x07, 2	; 7
 352:	c4 e0       	ldi	r28, 0x04	; 4
 354:	88 b1       	in	r24, 0x08	; 8
 356:	8c 27       	eor	r24, r28
 358:	88 b9       	out	0x08, r24	; 8
 35a:	81 e4       	ldi	r24, 0x41	; 65
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	d0 df       	rcall	.-96     	; 0x300 <x_delay>
 360:	f9 cf       	rjmp	.-14     	; 0x354 <thread2+0x4>

00000362 <x_new>:
 362:	e8 2f       	mov	r30, r24
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	ea 5f       	subi	r30, 0xFA	; 250
 370:	fd 4f       	sbci	r31, 0xFD	; 253
 372:	a0 81       	ld	r26, Z
 374:	b1 81       	ldd	r27, Z+1	; 0x01
 376:	6c 93       	st	X, r22
 378:	a0 81       	ld	r26, Z
 37a:	b1 81       	ldd	r27, Z+1	; 0x01
 37c:	11 97       	sbiw	r26, 0x01	; 1
 37e:	7c 93       	st	X, r23
 380:	a0 81       	ld	r26, Z
 382:	b1 81       	ldd	r27, Z+1	; 0x01
 384:	12 97       	sbiw	r26, 0x02	; 2
 386:	1c 92       	st	X, r1
 388:	20 81       	ld	r18, Z
 38a:	31 81       	ldd	r19, Z+1	; 0x01
 38c:	24 51       	subi	r18, 0x14	; 20
 38e:	31 09       	sbc	r19, r1
 390:	31 83       	std	Z+1, r19	; 0x01
 392:	20 83       	st	Z, r18
 394:	44 23       	and	r20, r20
 396:	81 f0       	breq	.+32     	; 0x3b8 <x_new+0x56>
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	a9 01       	movw	r20, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <x_new+0x42>
 3a0:	44 0f       	add	r20, r20
 3a2:	55 1f       	adc	r21, r21
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <x_new+0x3e>
 3a8:	ca 01       	movw	r24, r20
 3aa:	80 95       	com	r24
 3ac:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <disable_status>
 3b0:	89 23       	and	r24, r25
 3b2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <disable_status>
 3b6:	08 95       	ret
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <x_new+0x62>
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <x_new+0x5e>
 3c8:	ca 01       	movw	r24, r20
 3ca:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <disable_status>
 3ce:	89 2b       	or	r24, r25
 3d0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <disable_status>
 3d4:	08 95       	ret

000003d6 <main>:
 3d6:	f9 de       	rcall	.-526    	; 0x1ca <x_init>
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	68 ea       	ldi	r22, 0xA8	; 168
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	c0 df       	rcall	.-128    	; 0x362 <x_new>
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	6f e9       	ldi	r22, 0x9F	; 159
 3e6:	71 e0       	ldi	r23, 0x01	; 1
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	bb df       	rcall	.-138    	; 0x362 <x_new>
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	66 e9       	ldi	r22, 0x96	; 150
 3f0:	71 e0       	ldi	r23, 0x01	; 1
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	b6 df       	rcall	.-148    	; 0x362 <x_new>
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <main+0x20>

000003f8 <__vector_21>:
/************************************************************************
* TIMER0 ISR for compare match, that decrements delays for all threads
* and enables threads whose delay value reaches 0.
************************************************************************/
ISR (TIMER0_COMPA_vect)
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	0b b6       	in	r0, 0x3b	; 59
 404:	0f 92       	push	r0
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	cli();	// Disable interrupts
 41c:	f8 94       	cli
	timer++;	// Increment global timer
 41e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 422:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 426:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <_edata+0x2>
 42a:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <_edata+0x3>
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	a1 1d       	adc	r26, r1
 432:	b1 1d       	adc	r27, r1
 434:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 438:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 43c:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <_edata+0x2>
 440:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <_edata+0x3>
 444:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <disable_status>
	for (int i = 0; i < NUM_THREADS; i++)
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
		{
			x_thread_delay[i]--;	// Decrement count
			
			if (x_thread_delay[i] == 0)	// If current x_thread_id isn't disabled
			{
				disable_status &= ~(1 << i);	// Enable thread
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	50 e0       	ldi	r21, 0x00	; 0
{
	cli();	// Disable interrupts
	timer++;	// Increment global timer
	for (int i = 0; i < NUM_THREADS; i++)
	{
		if (x_thread_delay[i] > 0)	// If count is non-zero
 450:	fc 01       	movw	r30, r24
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	ea 5d       	subi	r30, 0xDA	; 218
 458:	fd 4f       	sbci	r31, 0xFD	; 253
 45a:	20 81       	ld	r18, Z
 45c:	31 81       	ldd	r19, Z+1	; 0x01
 45e:	23 2b       	or	r18, r19
 460:	c1 f0       	breq	.+48     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		{
			x_thread_delay[i]--;	// Decrement count
 462:	fc 01       	movw	r30, r24
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	ea 5d       	subi	r30, 0xDA	; 218
 46a:	fd 4f       	sbci	r31, 0xFD	; 253
 46c:	20 81       	ld	r18, Z
 46e:	31 81       	ldd	r19, Z+1	; 0x01
 470:	21 50       	subi	r18, 0x01	; 1
 472:	31 09       	sbc	r19, r1
 474:	31 83       	std	Z+1, r19	; 0x01
 476:	20 83       	st	Z, r18
			
			if (x_thread_delay[i] == 0)	// If current x_thread_id isn't disabled
 478:	20 81       	ld	r18, Z
 47a:	31 81       	ldd	r19, Z+1	; 0x01
 47c:	23 2b       	or	r18, r19
 47e:	49 f4       	brne	.+18     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			{
				disable_status &= ~(1 << i);	// Enable thread
 480:	9a 01       	movw	r18, r20
 482:	08 2e       	mov	r0, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	22 0f       	add	r18, r18
 488:	33 1f       	adc	r19, r19
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	20 95       	com	r18
 490:	62 23       	and	r22, r18
************************************************************************/
ISR (TIMER0_COMPA_vect)
{
	cli();	// Disable interrupts
	timer++;	// Increment global timer
	for (int i = 0; i < NUM_THREADS; i++)
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	88 30       	cpi	r24, 0x08	; 8
 496:	91 05       	cpc	r25, r1
 498:	d9 f6       	brne	.-74     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 49a:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <disable_status>
				disable_status &= ~(1 << i);	// Enable thread
			}
		}
		
	}
	sei();	// Enable interrupts
 49e:	78 94       	sei
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0b be       	out	0x3b, r0	; 59
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
