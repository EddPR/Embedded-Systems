
ACX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800200  00800200  0000038a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000400  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f69  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c81  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c8  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000637  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  00002e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002ede  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	54 c1       	rjmp	.+680    	; 0x2fe <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a7 33       	cpi	r26, 0x37	; 55
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	f9 d0       	rcall	.+498    	; 0x2f8 <main>
 106:	05 c1       	rjmp	.+522    	; 0x312 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <x_yield>:
x_yield:
;------------------------------------------------------------------------
; Save thread context	; x -> r27:26   y -> r29:28   z -> r31:r30
;-------------------------------------------------------------------------
; perserve all callee-saved registers
		push	r2
 10a:	2f 92       	push	r2
		push	r3
 10c:	3f 92       	push	r3
		push	r4
 10e:	4f 92       	push	r4
		push	r5
 110:	5f 92       	push	r5
		push	r6
 112:	6f 92       	push	r6
		push	r7
 114:	7f 92       	push	r7
		push	r8
 116:	8f 92       	push	r8
		push	r9
 118:	9f 92       	push	r9
		push	r10
 11a:	af 92       	push	r10
		push	r11
 11c:	bf 92       	push	r11
		push	r12
 11e:	cf 92       	push	r12
		push	r13
 120:	df 92       	push	r13
		push	r14
 122:	ef 92       	push	r14
		push	r15
 124:	ff 92       	push	r15
		push	r16
 126:	0f 93       	push	r16
		push	r17
 128:	1f 93       	push	r17
		push	r28
 12a:	cf 93       	push	r28
		push	r29
 12c:	df 93       	push	r29

0000012e <getThread>:

getThread:
		lds		r18, x_thread_id	; save thread ID
 12e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <x_thread_id>
		lds		r19, x_thread_mask	; save thread mask
 132:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <x_thread_mask>

00000136 <loadStack>:
loadStack:
		ldi		r26, lo8(stack)		; load lower byte address of stack array (X)
 136:	a4 e1       	ldi	r26, 0x14	; 20
		ldi 	r27, hi8(stack)		; load higher byte address of stack array (X+1)
 138:	b2 e0       	ldi	r27, 0x02	; 2

0000013a <storeSP>:
storeSP:
		cli							; disable global interrupts
 13a:	f8 94       	cli
		ldi		r30, SPL			; save SPL in temporary register (Z) (5D?)
 13c:	ed e3       	ldi	r30, 0x3D	; 61
		ldi		r31, SPH			; save SPH in temporary register (Z+1) (5E?)
 13e:	fe e3       	ldi	r31, 0x3E	; 62
		sei							; enable global interrupts
 140:	78 94       	sei

00000142 <x_schedule>:
;                         because we can reach this without saving regs
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
		lds		r18, disable_status	; load disable status
 142:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <disable_status>
		lds		r19, suspend_status	; load suspend status
 146:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <suspend_status>
		lds		r20, delay_status	; load delay status
 14a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <delay_status>
		or		r18, r19			; compute available thread based on status
 14e:	23 2b       	or	r18, r19
		or		r18, r20			; compute available thread based on status
 150:	24 2b       	or	r18, r20
		com		r18					; invert status mask
 152:	20 95       	com	r18

00000154 <calcThreadMask>:
calcThreadMask:
		; Test for bit2mask8 is working
		; Possibly rework code in isThreadReady, if x_thread_mask isn't already calculated
		lds		r24, x_thread_id	; load parameter for bit2mask8
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <x_thread_id>
		call	bit2mask8			; relative call subroutine
 158:	2f d0       	rcall	.+94     	; 0x1b8 <bit2mask8>

0000015a <loadThread>:
		;sts		x_thread_mask, r24	; x_thread_mask is set to bit2mask8 returned mask
loadThread:
		lds		r21, x_thread_id	; save thread ID
 15a:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <x_thread_id>
		;lds		r22, x_thread_mask	; save thread mask
		mov		r22, r24			; save thread mask calculated in bit2mask8
 15e:	68 2f       	mov	r22, r24

00000160 <checkThread>:
checkThread:
		inc		r21					; increment x_thread_id
 160:	53 95       	inc	r21
		cpi		r21, 8				; check if x_thread_id is 8
 162:	58 30       	cpi	r21, 0x08	; 8
		brne	nextAvailable		; if x_thread_id != 8, continue on, otherwise clear
 164:	19 f4       	brne	.+6      	; 0x16c <nextAvailable>

00000166 <clear>:
clear:
		clr		r21					; if x_thread_id == 8, set to 0 and
 166:	55 27       	eor	r21, r21
		ldi		r22, 1 				; set x_thread_mask to 1
 168:	61 e0       	ldi	r22, 0x01	; 1
		jmp		specialCase			; you shouldn't shift the pre-set mask in this case
 16a:	01 c0       	rjmp	.+2      	; 0x16e <specialCase>

0000016c <nextAvailable>:
nextAvailable:
		lsl		r22					; left shift x_thread_mask (next thread)
 16c:	66 0f       	add	r22, r22

0000016e <specialCase>:
specialCase:
		cp		r22, r18			; check if next thread is equal to thread status
 16e:	62 17       	cp	r22, r18
		brne	checkThread			; if not, check the next thread, otherwise
 170:	b9 f7       	brne	.-18     	; 0x160 <checkThread>

00000172 <saveThread>:
saveThread:
		cli							; disable global interrupts
 172:	f8 94       	cli
		sts		x_thread_id, r21	; store new x_thread_id
 174:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <x_thread_id>
		sts		x_thread_mask, r22	; store new x_thread_mask
 178:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <x_thread_mask>
		ldi		r26, lo8(stack)		; load lower byte address of stack array (X)
 17c:	a4 e1       	ldi	r26, 0x14	; 20
		ldi 	r27, hi8(stack)		; load higher byte address of stack array (X+1)
 17e:	b2 e0       	ldi	r27, 0x02	; 2

00000180 <charOffset>:
charOffset:
		lsl		r21					; working towards multiplying x_thread_id by 4...
 180:	55 0f       	add	r21, r21
		lsl		r21					; to create a 4 bit offset (x_thread_id * 4)
 182:	55 0f       	add	r21, r21
		add		r26, r21			; increment stack by ofset
 184:	a5 0f       	add	r26, r21
		adc		r27, 0				; pull in the carry
 186:	b0 1d       	adc	r27, r0

00000188 <updateSP>:
updateSP:
		sts		SPL, r27			; update SPL to new thread context
 188:	b0 93 3d 00 	sts	0x003D, r27	; 0x80003d <__TEXT_REGION_LENGTH__+0x70003d>
		sts		SPH, r26			; update SPH to new thread context
 18c:	a0 93 3e 00 	sts	0x003E, r26	; 0x80003e <__TEXT_REGION_LENGTH__+0x70003e>
		sei							; enable global interrupts
 190:	78 94       	sei

00000192 <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		pop		r29
 192:	df 91       	pop	r29
		pop		r28
 194:	cf 91       	pop	r28
		pop		r17
 196:	1f 91       	pop	r17
		pop		r16
 198:	0f 91       	pop	r16
		pop		r15
 19a:	ff 90       	pop	r15
		pop		r14
 19c:	ef 90       	pop	r14
		pop		r13
 19e:	df 90       	pop	r13
		pop		r12
 1a0:	cf 90       	pop	r12
		pop		r11
 1a2:	bf 90       	pop	r11
		pop		r10
 1a4:	af 90       	pop	r10
		pop		r9
 1a6:	9f 90       	pop	r9
		pop		r8
 1a8:	8f 90       	pop	r8
		pop		r7
 1aa:	7f 90       	pop	r7
		pop		r6
 1ac:	6f 90       	pop	r6
		pop		r5
 1ae:	5f 90       	pop	r5
		pop		r4
 1b0:	4f 90       	pop	r4
		pop		r3
 1b2:	3f 90       	pop	r3
		pop		r2
 1b4:	2f 90       	pop	r2

	// Return to next thread
		ret
 1b6:	08 95       	ret

000001b8 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		mov		r23, r24				; copy paraqmeter, now is count	
 1b8:	78 2f       	mov	r23, r24
		ldi		r24, 1					; mask beggins with a 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
		cpi		r23, 0					; if param is 0, return
 1bc:	70 30       	cpi	r23, 0x00	; 0
		breq	finish
 1be:	21 f0       	breq	.+8      	; 0x1c8 <finish>

000001c0 <loop>:
loop:	
		lsl		r24						; shift mask left
 1c0:	88 0f       	add	r24, r24
		dec		r23						; decrement count
 1c2:	7a 95       	dec	r23
		breq	finish					; if count is zero, return
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <finish>
		brne	loop					; if count > 0, loop
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <loop>

000001c8 <finish>:
finish:
 1c8:	08 95       	ret

000001ca <x_init>:

/************************************************************************
*
************************************************************************/
void x_enable(uint8_t thread_id)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	f8 94       	cli
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	84 bd       	out	0x24, r24	; 36
 1d4:	9a ef       	ldi	r25, 0xFA	; 250
 1d6:	97 bd       	out	0x27, r25	; 39
 1d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	85 bd       	out	0x25, r24	; 37
 1e0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 1e4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 1e8:	8e ef       	ldi	r24, 0xFE	; 254
 1ea:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <disable_status>
 1ee:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <suspend_status>
 1f2:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <delay_status>
 1f6:	e3 e0       	ldi	r30, 0x03	; 3
 1f8:	f2 e0       	ldi	r31, 0x02	; 2
 1fa:	11 82       	std	Z+1, r1	; 0x01
 1fc:	10 82       	st	Z, r1
 1fe:	13 82       	std	Z+3, r1	; 0x03
 200:	12 82       	std	Z+2, r1	; 0x02
 202:	15 82       	std	Z+5, r1	; 0x05
 204:	14 82       	std	Z+4, r1	; 0x04
 206:	17 82       	std	Z+7, r1	; 0x07
 208:	16 82       	std	Z+6, r1	; 0x06
 20a:	11 86       	std	Z+9, r1	; 0x09
 20c:	10 86       	std	Z+8, r1	; 0x08
 20e:	13 86       	std	Z+11, r1	; 0x0b
 210:	12 86       	std	Z+10, r1	; 0x0a
 212:	15 86       	std	Z+13, r1	; 0x0d
 214:	14 86       	std	Z+12, r1	; 0x0c
 216:	17 86       	std	Z+15, r1	; 0x0f
 218:	16 86       	std	Z+14, r1	; 0x0e
 21a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <x_thread_id>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <x_thread_mask>
 224:	e4 e1       	ldi	r30, 0x14	; 20
 226:	f2 e0       	ldi	r31, 0x02	; 2
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	90 e2       	ldi	r25, 0x20	; 32
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	80 83       	st	Z, r24
 230:	93 83       	std	Z+3, r25	; 0x03
 232:	82 83       	std	Z+2, r24	; 0x02
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	9f e1       	ldi	r25, 0x1F	; 31
 238:	95 83       	std	Z+5, r25	; 0x05
 23a:	84 83       	std	Z+4, r24	; 0x04
 23c:	97 83       	std	Z+7, r25	; 0x07
 23e:	86 83       	std	Z+6, r24	; 0x06
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	9e e1       	ldi	r25, 0x1E	; 30
 244:	91 87       	std	Z+9, r25	; 0x09
 246:	80 87       	std	Z+8, r24	; 0x08
 248:	93 87       	std	Z+11, r25	; 0x0b
 24a:	82 87       	std	Z+10, r24	; 0x0a
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	9d e1       	ldi	r25, 0x1D	; 29
 250:	95 87       	std	Z+13, r25	; 0x0d
 252:	84 87       	std	Z+12, r24	; 0x0c
 254:	97 87       	std	Z+15, r25	; 0x0f
 256:	86 87       	std	Z+14, r24	; 0x0e
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	9c e1       	ldi	r25, 0x1C	; 28
 25c:	91 8b       	std	Z+17, r25	; 0x11
 25e:	80 8b       	std	Z+16, r24	; 0x10
 260:	93 8b       	std	Z+19, r25	; 0x13
 262:	82 8b       	std	Z+18, r24	; 0x12
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	9b e1       	ldi	r25, 0x1B	; 27
 268:	95 8b       	std	Z+21, r25	; 0x15
 26a:	84 8b       	std	Z+20, r24	; 0x14
 26c:	97 8b       	std	Z+23, r25	; 0x17
 26e:	86 8b       	std	Z+22, r24	; 0x16
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	9a e1       	ldi	r25, 0x1A	; 26
 274:	91 8f       	std	Z+25, r25	; 0x19
 276:	80 8f       	std	Z+24, r24	; 0x18
 278:	93 8f       	std	Z+27, r25	; 0x1b
 27a:	82 8f       	std	Z+26, r24	; 0x1a
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	99 e1       	ldi	r25, 0x19	; 25
 280:	95 8f       	std	Z+29, r25	; 0x1d
 282:	84 8f       	std	Z+28, r24	; 0x1c
 284:	97 8f       	std	Z+31, r25	; 0x1f
 286:	86 8f       	std	Z+30, r24	; 0x1e
 288:	8a ea       	ldi	r24, 0xAA	; 170
 28a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__bss_end+0x1dc9>
 28e:	80 93 00 1f 	sts	0x1F00, r24	; 0x801f00 <__bss_end+0x1cc9>
 292:	80 93 00 1e 	sts	0x1E00, r24	; 0x801e00 <__bss_end+0x1bc9>
 296:	80 93 00 1d 	sts	0x1D00, r24	; 0x801d00 <__bss_end+0x1ac9>
 29a:	80 93 00 1c 	sts	0x1C00, r24	; 0x801c00 <__bss_end+0x19c9>
 29e:	80 93 00 1b 	sts	0x1B00, r24	; 0x801b00 <__bss_end+0x18c9>
 2a2:	80 93 00 1a 	sts	0x1A00, r24	; 0x801a00 <__bss_end+0x17c9>
 2a6:	80 93 00 19 	sts	0x1900, r24	; 0x801900 <__bss_end+0x16c9>
 2aa:	8d b7       	in	r24, 0x3d	; 61
 2ac:	9e b7       	in	r25, 0x3e	; 62
 2ae:	81 15       	cp	r24, r1
 2b0:	92 42       	sbci	r25, 0x22	; 34
 2b2:	b0 f4       	brcc	.+44     	; 0x2e0 <x_init+0x116>
 2b4:	a0 e0       	ldi	r26, 0x00	; 0
 2b6:	b1 e2       	ldi	r27, 0x21	; 33
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	92 e2       	ldi	r25, 0x22	; 34
 2bc:	c1 e0       	ldi	r28, 0x01	; 1
 2be:	d2 e2       	ldi	r29, 0x22	; 34
 2c0:	fc 01       	movw	r30, r24
 2c2:	22 91       	ld	r18, -Z
 2c4:	2e 93       	st	-X, r18
 2c6:	be 01       	movw	r22, r28
 2c8:	68 1b       	sub	r22, r24
 2ca:	79 0b       	sbc	r23, r25
 2cc:	9c 01       	movw	r18, r24
 2ce:	22 50       	subi	r18, 0x02	; 2
 2d0:	31 09       	sbc	r19, r1
 2d2:	4d b7       	in	r20, 0x3d	; 61
 2d4:	5e b7       	in	r21, 0x3e	; 62
 2d6:	cf 01       	movw	r24, r30
 2d8:	24 17       	cp	r18, r20
 2da:	35 07       	cpc	r19, r21
 2dc:	88 f7       	brcc	.-30     	; 0x2c0 <x_init+0xf6>
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <x_init+0x11a>
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	91 e2       	ldi	r25, 0x21	; 33
 2e8:	86 1b       	sub	r24, r22
 2ea:	97 0b       	sbc	r25, r23
 2ec:	9e bf       	out	0x3e, r25	; 62
 2ee:	8d bf       	out	0x3d, r24	; 61
 2f0:	78 94       	sei
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <main>:
 2f8:	68 df       	rcall	.-304    	; 0x1ca <x_init>
 2fa:	07 df       	rcall	.-498    	; 0x10a <x_yield>
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <main+0x2>

000002fe <__vector_21>:

/************************************************************************
* TIMER0 ISR for compare match, that for now does nothing.
************************************************************************/
ISR (TIMER0_COMPA_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
	
}
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
