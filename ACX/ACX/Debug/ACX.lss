
ACX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000007ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000756  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800200  00800200  000007ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000840  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001093  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d18  00000000  00000000  0000198b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096d  00000000  00000000  000026a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000499  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	0e c3       	rjmp	.+1564   	; 0x672 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a7 33       	cpi	r26, 0x37	; 55
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	80 d0       	rcall	.+256    	; 0x206 <main>
 106:	25 c3       	rjmp	.+1610   	; 0x752 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <x_yield>:
x_yield:
;------------------------------------------------------------------------
; Save thread context	; x -> r27:26   y -> r29:28   z -> r31:r30
;-------------------------------------------------------------------------
; perserve all callee-saved registers
		push	r2
 10a:	2f 92       	push	r2
		push	r3
 10c:	3f 92       	push	r3
		push	r4
 10e:	4f 92       	push	r4
		push	r5
 110:	5f 92       	push	r5
		push	r6
 112:	6f 92       	push	r6
		push	r7
 114:	7f 92       	push	r7
		push	r8
 116:	8f 92       	push	r8
		push	r9
 118:	9f 92       	push	r9
		push	r10
 11a:	af 92       	push	r10
		push	r11
 11c:	bf 92       	push	r11
		push	r12
 11e:	cf 92       	push	r12
		push	r13
 120:	df 92       	push	r13
		push	r14
 122:	ef 92       	push	r14
		push	r15
 124:	ff 92       	push	r15
		push	r16
 126:	0f 93       	push	r16
		push	r17
 128:	1f 93       	push	r17
		push	r28
 12a:	cf 93       	push	r28
		push	r29
 12c:	df 93       	push	r29

0000012e <getThread>:

getThread:
		lds		r18, x_thread_id	; save thread ID
 12e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <x_thread_id>
		lds		r19, x_thread_mask	; save thread mask
 132:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <x_thread_mask>

00000136 <loadStack>:
loadStack:
		ldi		r30, lo8(stack)		; load lower byte address of stack array (Z)
 136:	e4 e0       	ldi	r30, 0x04	; 4
		ldi 	r31, hi8(stack)		; load higher byte address of stack array (Z+1)
 138:	f2 e0       	ldi	r31, 0x02	; 2

0000013a <storeSP>:
storeSP:
		cli							; disable global interrupts
 13a:	f8 94       	cli
		ldi		r26, SPL			; save SPL in temporary register (X)
 13c:	ad e3       	ldi	r26, 0x3D	; 61
		ldi		r27, SPH			; save SPH in temporary register (X+1) (5E?)
 13e:	be e3       	ldi	r27, 0x3E	; 62
		sei							; enable global interrupts
 140:	78 94       	sei

00000142 <x_schedule>:
;                         because we can reach this without saving regs
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
		lds		r18, disable_status	; load disable status
 142:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <disable_status>
		lds		r19, suspend_status	; load suspend status
 146:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <suspend_status>
		lds		r20, delay_status	; load delay status
 14a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <delay_status>
		or		r18, r19			; compute available thread based on status
 14e:	23 2b       	or	r18, r19
		or		r18, r20			; compute available thread based on status
 150:	24 2b       	or	r18, r20
		com		r18					; invert status mask
 152:	20 95       	com	r18

00000154 <calcThreadMask>:
calcThreadMask:
		lds		r24, x_thread_id	; load parameter for bit2mask8
 154:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <x_thread_id>
		call	bit2mask8			; relative call subroutine
 158:	2f d0       	rcall	.+94     	; 0x1b8 <bit2mask8>

0000015a <loadThread>:
loadThread:
		lds		r21, x_thread_id	; save thread ID
 15a:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <x_thread_id>
		mov		r22, r24			; save thread mask calculated in bit2mask8
 15e:	68 2f       	mov	r22, r24

00000160 <checkThread>:
checkThread:
		inc		r21					; increment x_thread_id
 160:	53 95       	inc	r21
		cpi		r21, 8				; check if x_thread_id is 8
 162:	58 30       	cpi	r21, 0x08	; 8
		brne	nextAvailable		; if x_thread_id != 8, continue on, otherwise clear
 164:	19 f4       	brne	.+6      	; 0x16c <nextAvailable>

00000166 <clear>:
clear:
		clr		r21					; if x_thread_id == 8, set to 0 and
 166:	55 27       	eor	r21, r21
		ldi		r22, 1 				; set x_thread_mask to 1
 168:	61 e0       	ldi	r22, 0x01	; 1
		jmp		specialCase			; you shouldn't shift the pre-set mask in this case
 16a:	01 c0       	rjmp	.+2      	; 0x16e <specialCase>

0000016c <nextAvailable>:
nextAvailable:
		lsl		r22					; left shift x_thread_mask (next thread)
 16c:	66 0f       	add	r22, r22

0000016e <specialCase>:
specialCase:
		cp		r22, r18			; check if next thread is equal to thread status
 16e:	62 17       	cp	r22, r18
		brne	checkThread			; if not, check the next thread, otherwise
 170:	b9 f7       	brne	.-18     	; 0x160 <checkThread>

00000172 <saveThread>:
saveThread:
		cli							; disable global interrupts
 172:	f8 94       	cli
		sts		x_thread_id, r21	; store new x_thread_id
 174:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <x_thread_id>
		sts		x_thread_mask, r22	; store new x_thread_mask
 178:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <x_thread_mask>
		ldi		r26, lo8(stack)		; load lower byte address of stack array (X)
 17c:	a4 e0       	ldi	r26, 0x04	; 4
		ldi 	r27, hi8(stack)		; load higher byte address of stack array (X+1)
 17e:	b2 e0       	ldi	r27, 0x02	; 2

00000180 <charOffset>:
charOffset:
		lsl		r21					; working towards multiplying x_thread_id by 4...
 180:	55 0f       	add	r21, r21
		lsl		r21					; to create a 4 bit offset (x_thread_id * 4)
 182:	55 0f       	add	r21, r21
		add		r26, r21			; increment stack by ofset
 184:	a5 0f       	add	r26, r21
		adc		r27, r1				; add 0 to propagate the carry
 186:	b1 1d       	adc	r27, r1

00000188 <updateSP>:
updateSP:
		sts		SPL, r27			; update SPL to new thread context
 188:	b0 93 3d 00 	sts	0x003D, r27	; 0x80003d <__TEXT_REGION_LENGTH__+0x70003d>
		sts		SPH, r26			; update SPH to new thread context
 18c:	a0 93 3e 00 	sts	0x003E, r26	; 0x80003e <__TEXT_REGION_LENGTH__+0x70003e>
		sei							; enable global interrupts
 190:	78 94       	sei

00000192 <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		pop		r29
 192:	df 91       	pop	r29
		pop		r28
 194:	cf 91       	pop	r28
		pop		r17
 196:	1f 91       	pop	r17
		pop		r16
 198:	0f 91       	pop	r16
		pop		r15
 19a:	ff 90       	pop	r15
		pop		r14
 19c:	ef 90       	pop	r14
		pop		r13
 19e:	df 90       	pop	r13
		pop		r12
 1a0:	cf 90       	pop	r12
		pop		r11
 1a2:	bf 90       	pop	r11
		pop		r10
 1a4:	af 90       	pop	r10
		pop		r9
 1a6:	9f 90       	pop	r9
		pop		r8
 1a8:	8f 90       	pop	r8
		pop		r7
 1aa:	7f 90       	pop	r7
		pop		r6
 1ac:	6f 90       	pop	r6
		pop		r5
 1ae:	5f 90       	pop	r5
		pop		r4
 1b0:	4f 90       	pop	r4
		pop		r3
 1b2:	3f 90       	pop	r3
		pop		r2
 1b4:	2f 90       	pop	r2

	// Return to next thread
		ret
 1b6:	08 95       	ret

000001b8 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		mov		r23, r24				; copy paraqmeter, now is count	
 1b8:	78 2f       	mov	r23, r24
		ldi		r24, 1					; mask beggins with a 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
		cpi		r23, 0					; if param is 0, return
 1bc:	70 30       	cpi	r23, 0x00	; 0
		breq	finish
 1be:	21 f0       	breq	.+8      	; 0x1c8 <finish>

000001c0 <loop>:
loop:	
		lsl		r24						; shift mask left
 1c0:	88 0f       	add	r24, r24
		dec		r23						; decrement count
 1c2:	7a 95       	dec	r23
		breq	finish					; if count is zero, return
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <finish>
		brne	loop					; if count > 0, loop
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <loop>

000001c8 <finish>:
finish:
 1c8:	08 95       	ret

000001ca <__iCliRetVal>:
*
************************************************************************/
void x_enable(uint8_t thread_id)
{
	
}
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	f8 94       	cli
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <__iRestore>:
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	1f 92       	push	r1
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	9a 83       	std	Y+2, r25	; 0x02
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	8f e5       	ldi	r24, 0x5F	; 95
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	3a 81       	ldd	r19, Y+2	; 0x02
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <main>:
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	61 d0       	rcall	.+194    	; 0x2d2 <x_init>
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	6e e4       	ldi	r22, 0x4E	; 78
 214:	71 e0       	ldi	r23, 0x01	; 1
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	b1 d1       	rcall	.+866    	; 0x57c <x_new>
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	63 e3       	ldi	r22, 0x33	; 51
 21e:	71 e0       	ldi	r23, 0x01	; 1
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	ac d1       	rcall	.+856    	; 0x57c <x_new>
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	68 e1       	ldi	r22, 0x18	; 24
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	a7 d1       	rcall	.+846    	; 0x57c <x_new>
 22e:	ff cf       	rjmp	.-2      	; 0x22e <main+0x28>

00000230 <thread0>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	87 e2       	ldi	r24, 0x27	; 39
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	27 e2       	ldi	r18, 0x27	; 39
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	21 60       	ori	r18, 0x01	; 1
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
 24a:	88 e2       	ldi	r24, 0x28	; 40
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	28 e2       	ldi	r18, 0x28	; 40
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	30 81       	ld	r19, Z
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	23 27       	eor	r18, r19
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	8a ef       	ldi	r24, 0xFA	; 250
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	59 d1       	rcall	.+690    	; 0x516 <x_delay>
 264:	f2 cf       	rjmp	.-28     	; 0x24a <thread0+0x1a>

00000266 <thread1>:
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	87 e2       	ldi	r24, 0x27	; 39
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	27 e2       	ldi	r18, 0x27	; 39
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	22 60       	ori	r18, 0x02	; 2
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	28 e2       	ldi	r18, 0x28	; 40
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	30 81       	ld	r19, Z
 28c:	22 e0       	ldi	r18, 0x02	; 2
 28e:	23 27       	eor	r18, r19
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
 294:	84 e8       	ldi	r24, 0x84	; 132
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	3e d1       	rcall	.+636    	; 0x516 <x_delay>
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <thread1+0x1a>

0000029c <thread2>:
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	87 e2       	ldi	r24, 0x27	; 39
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	27 e2       	ldi	r18, 0x27	; 39
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	24 60       	ori	r18, 0x04	; 4
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	28 e2       	ldi	r18, 0x28	; 40
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	f9 01       	movw	r30, r18
 2c0:	30 81       	ld	r19, Z
 2c2:	24 e0       	ldi	r18, 0x04	; 4
 2c4:	23 27       	eor	r18, r19
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	81 e4       	ldi	r24, 0x41	; 65
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	23 d1       	rcall	.+582    	; 0x516 <x_delay>
 2d0:	f2 cf       	rjmp	.-28     	; 0x2b6 <thread2+0x1a>

000002d2 <x_init>:
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <x_init+0x6>
 2d8:	00 d0       	rcall	.+0      	; 0x2da <x_init+0x8>
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	f8 94       	cli
 2e0:	84 e4       	ldi	r24, 0x44	; 68
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	22 e0       	ldi	r18, 0x02	; 2
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	87 e4       	ldi	r24, 0x47	; 71
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	2a ef       	ldi	r18, 0xFA	; 250
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
 2f4:	8e e6       	ldi	r24, 0x6E	; 110
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	22 e0       	ldi	r18, 0x02	; 2
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	85 e4       	ldi	r24, 0x45	; 69
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
 308:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 30c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 310:	8e ef       	ldi	r24, 0xFE	; 254
 312:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <disable_status>
 316:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <suspend_status>
 31a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <delay_status>
 31e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <x_thread_delay+0x1>
 322:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <x_thread_delay>
 326:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <x_thread_delay+0x3>
 32a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <x_thread_delay+0x2>
 32e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <x_thread_delay+0x5>
 332:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <x_thread_delay+0x4>
 336:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <x_thread_delay+0x7>
 33a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <x_thread_delay+0x6>
 33e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <x_thread_delay+0x9>
 342:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <x_thread_delay+0x8>
 346:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <x_thread_delay+0xb>
 34a:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <x_thread_delay+0xa>
 34e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <x_thread_delay+0xd>
 352:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <x_thread_delay+0xc>
 356:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <x_thread_delay+0xf>
 35a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <x_thread_delay+0xe>
 35e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <x_thread_id>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <x_thread_mask>
 368:	8f e7       	ldi	r24, 0x7F	; 127
 36a:	91 e2       	ldi	r25, 0x21	; 33
 36c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <stack+0x1>
 370:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <stack>
 374:	8f e7       	ldi	r24, 0x7F	; 127
 376:	91 e2       	ldi	r25, 0x21	; 33
 378:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <stack+0x3>
 37c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stack+0x2>
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	90 e2       	ldi	r25, 0x20	; 32
 384:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <stack+0x5>
 388:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <stack+0x4>
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	90 e2       	ldi	r25, 0x20	; 32
 390:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stack+0x7>
 394:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stack+0x6>
 398:	8f e7       	ldi	r24, 0x7F	; 127
 39a:	90 e2       	ldi	r25, 0x20	; 32
 39c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stack+0x9>
 3a0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stack+0x8>
 3a4:	8f e7       	ldi	r24, 0x7F	; 127
 3a6:	90 e2       	ldi	r25, 0x20	; 32
 3a8:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <stack+0xb>
 3ac:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <stack+0xa>
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	9f e1       	ldi	r25, 0x1F	; 31
 3b4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <stack+0xd>
 3b8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <stack+0xc>
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	9f e1       	ldi	r25, 0x1F	; 31
 3c0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <stack+0xf>
 3c4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <stack+0xe>
 3c8:	8f e7       	ldi	r24, 0x7F	; 127
 3ca:	9f e1       	ldi	r25, 0x1F	; 31
 3cc:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <stack+0x11>
 3d0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <stack+0x10>
 3d4:	8f e7       	ldi	r24, 0x7F	; 127
 3d6:	9f e1       	ldi	r25, 0x1F	; 31
 3d8:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <stack+0x13>
 3dc:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <stack+0x12>
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	9e e1       	ldi	r25, 0x1E	; 30
 3e4:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <stack+0x15>
 3e8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <stack+0x14>
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	9e e1       	ldi	r25, 0x1E	; 30
 3f0:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <stack+0x17>
 3f4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <stack+0x16>
 3f8:	8f e7       	ldi	r24, 0x7F	; 127
 3fa:	9e e1       	ldi	r25, 0x1E	; 30
 3fc:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <stack+0x19>
 400:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <stack+0x18>
 404:	8f e7       	ldi	r24, 0x7F	; 127
 406:	9e e1       	ldi	r25, 0x1E	; 30
 408:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <stack+0x1b>
 40c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <stack+0x1a>
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	9d e1       	ldi	r25, 0x1D	; 29
 414:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <stack+0x1d>
 418:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <stack+0x1c>
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	9d e1       	ldi	r25, 0x1D	; 29
 420:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <stack+0x1f>
 424:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <stack+0x1e>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	91 e2       	ldi	r25, 0x21	; 33
 42c:	2a ea       	ldi	r18, 0xAA	; 170
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	90 e2       	ldi	r25, 0x20	; 32
 436:	2a ea       	ldi	r18, 0xAA	; 170
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e2       	ldi	r25, 0x20	; 32
 440:	2a ea       	ldi	r18, 0xAA	; 170
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	9f e1       	ldi	r25, 0x1F	; 31
 44a:	2a ea       	ldi	r18, 0xAA	; 170
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	9f e1       	ldi	r25, 0x1F	; 31
 454:	2a ea       	ldi	r18, 0xAA	; 170
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	9e e1       	ldi	r25, 0x1E	; 30
 45e:	2a ea       	ldi	r18, 0xAA	; 170
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	9e e1       	ldi	r25, 0x1E	; 30
 468:	2a ea       	ldi	r18, 0xAA	; 170
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
 46e:	80 e8       	ldi	r24, 0x80	; 128
 470:	9d e1       	ldi	r25, 0x1D	; 29
 472:	2a ea       	ldi	r18, 0xAA	; 170
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
 478:	1a 82       	std	Y+2, r1	; 0x02
 47a:	19 82       	std	Y+1, r1	; 0x01
 47c:	8f e7       	ldi	r24, 0x7F	; 127
 47e:	91 e2       	ldi	r25, 0x21	; 33
 480:	9c 83       	std	Y+4, r25	; 0x04
 482:	8b 83       	std	Y+3, r24	; 0x03
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	91 e2       	ldi	r25, 0x21	; 33
 488:	9e 83       	std	Y+6, r25	; 0x06
 48a:	8d 83       	std	Y+5, r24	; 0x05
 48c:	1b c0       	rjmp	.+54     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	91 95       	neg	r25
 494:	81 95       	neg	r24
 496:	91 09       	sbc	r25, r1
 498:	2b 81       	ldd	r18, Y+3	; 0x03
 49a:	3c 81       	ldd	r19, Y+4	; 0x04
 49c:	82 0f       	add	r24, r18
 49e:	93 1f       	adc	r25, r19
 4a0:	29 81       	ldd	r18, Y+1	; 0x01
 4a2:	3a 81       	ldd	r19, Y+2	; 0x02
 4a4:	31 95       	neg	r19
 4a6:	21 95       	neg	r18
 4a8:	31 09       	sbc	r19, r1
 4aa:	4d 81       	ldd	r20, Y+5	; 0x05
 4ac:	5e 81       	ldd	r21, Y+6	; 0x06
 4ae:	24 0f       	add	r18, r20
 4b0:	35 1f       	adc	r19, r21
 4b2:	f9 01       	movw	r30, r18
 4b4:	20 81       	ld	r18, Z
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	9a 81       	ldd	r25, Y+2	; 0x02
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	9a 83       	std	Y+2, r25	; 0x02
 4c2:	89 83       	std	Y+1, r24	; 0x01
 4c4:	2f ef       	ldi	r18, 0xFF	; 255
 4c6:	31 e2       	ldi	r19, 0x21	; 33
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	a9 01       	movw	r20, r18
 4ce:	48 1b       	sub	r20, r24
 4d0:	59 0b       	sbc	r21, r25
 4d2:	ca 01       	movw	r24, r20
 4d4:	9c 01       	movw	r18, r24
 4d6:	8d e5       	ldi	r24, 0x5D	; 93
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	fc 01       	movw	r30, r24
 4dc:	80 81       	ld	r24, Z
 4de:	91 81       	ldd	r25, Z+1	; 0x01
 4e0:	28 17       	cp	r18, r24
 4e2:	39 07       	cpc	r19, r25
 4e4:	a0 f6       	brcc	.-88     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 4e6:	8d e5       	ldi	r24, 0x5D	; 93
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	40 e8       	ldi	r20, 0x80	; 128
 4ec:	51 e2       	ldi	r21, 0x21	; 33
 4ee:	29 81       	ldd	r18, Y+1	; 0x01
 4f0:	3a 81       	ldd	r19, Y+2	; 0x02
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 1b       	sub	r22, r18
 4f6:	73 0b       	sbc	r23, r19
 4f8:	9b 01       	movw	r18, r22
 4fa:	fc 01       	movw	r30, r24
 4fc:	31 83       	std	Z+1, r19	; 0x01
 4fe:	20 83       	st	Z, r18
 500:	78 94       	sei
 502:	00 00       	nop
 504:	26 96       	adiw	r28, 0x06	; 6
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <x_delay>:
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	00 d0       	rcall	.+0      	; 0x51c <x_delay+0x6>
 51c:	1f 92       	push	r1
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	9c 83       	std	Y+4, r25	; 0x04
 524:	8b 83       	std	Y+3, r24	; 0x03
 526:	8f e5       	ldi	r24, 0x5F	; 95
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	fc 01       	movw	r30, r24
 52c:	80 81       	ld	r24, Z
 52e:	8a 83       	std	Y+2, r24	; 0x02
 530:	4c de       	rcall	.-872    	; 0x1ca <__iCliRetVal>
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	15 c0       	rjmp	.+42     	; 0x560 <x_delay+0x4a>
 536:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <x_thread_id>
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	8c 5d       	subi	r24, 0xDC	; 220
 544:	9d 4f       	sbci	r25, 0xFD	; 253
 546:	2b 81       	ldd	r18, Y+3	; 0x03
 548:	3c 81       	ldd	r19, Y+4	; 0x04
 54a:	fc 01       	movw	r30, r24
 54c:	31 83       	std	Z+1, r19	; 0x01
 54e:	20 83       	st	Z, r18
 550:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disable_status>
 554:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <x_thread_mask>
 558:	89 2b       	or	r24, r25
 55a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <disable_status>
 55e:	19 82       	std	Y+1, r1	; 0x01
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	88 23       	and	r24, r24
 564:	41 f7       	brne	.-48     	; 0x536 <x_delay+0x20>
 566:	ce 01       	movw	r24, r28
 568:	02 96       	adiw	r24, 0x02	; 2
 56a:	38 de       	rcall	.-912    	; 0x1dc <__iRestore>
 56c:	ce dd       	rcall	.-1124   	; 0x10a <x_yield>
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <x_new>:
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	27 97       	sbiw	r28, 0x07	; 7
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	8c 83       	std	Y+4, r24	; 0x04
 592:	7e 83       	std	Y+6, r23	; 0x06
 594:	6d 83       	std	Y+5, r22	; 0x05
 596:	4f 83       	std	Y+7, r20	; 0x07
 598:	8d 81       	ldd	r24, Y+5	; 0x05
 59a:	9e 81       	ldd	r25, Y+6	; 0x06
 59c:	9a 83       	std	Y+2, r25	; 0x02
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	8c 81       	ldd	r24, Y+4	; 0x04
 5a2:	88 2f       	mov	r24, r24
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	8c 5f       	subi	r24, 0xFC	; 252
 5b0:	9d 4f       	sbci	r25, 0xFD	; 253
 5b2:	fc 01       	movw	r30, r24
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	29 81       	ldd	r18, Y+1	; 0x01
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
 5be:	8c 81       	ldd	r24, Y+4	; 0x04
 5c0:	88 2f       	mov	r24, r24
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	8c 5f       	subi	r24, 0xFC	; 252
 5ce:	9d 4f       	sbci	r25, 0xFD	; 253
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	91 81       	ldd	r25, Z+1	; 0x01
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	2a 81       	ldd	r18, Y+2	; 0x02
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	8c 5f       	subi	r24, 0xFC	; 252
 5ee:	9d 4f       	sbci	r25, 0xFD	; 253
 5f0:	fc 01       	movw	r30, r24
 5f2:	80 81       	ld	r24, Z
 5f4:	91 81       	ldd	r25, Z+1	; 0x01
 5f6:	02 97       	sbiw	r24, 0x02	; 2
 5f8:	2b 81       	ldd	r18, Y+3	; 0x03
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	2c 81       	ldd	r18, Y+4	; 0x04
 606:	22 2f       	mov	r18, r18
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	22 0f       	add	r18, r18
 60c:	33 1f       	adc	r19, r19
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	2c 5f       	subi	r18, 0xFC	; 252
 614:	3d 4f       	sbci	r19, 0xFD	; 253
 616:	f9 01       	movw	r30, r18
 618:	20 81       	ld	r18, Z
 61a:	31 81       	ldd	r19, Z+1	; 0x01
 61c:	24 51       	subi	r18, 0x14	; 20
 61e:	31 09       	sbc	r19, r1
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	8c 5f       	subi	r24, 0xFC	; 252
 62a:	9d 4f       	sbci	r25, 0xFD	; 253
 62c:	fc 01       	movw	r30, r24
 62e:	31 83       	std	Z+1, r19	; 0x01
 630:	20 83       	st	Z, r18
 632:	8c 81       	ldd	r24, Y+4	; 0x04
 634:	c1 dd       	rcall	.-1150   	; 0x1b8 <bit2mask8>
 636:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <x_thread_mask>
 63a:	8f 81       	ldd	r24, Y+7	; 0x07
 63c:	88 23       	and	r24, r24
 63e:	49 f0       	breq	.+18     	; 0x652 <x_new+0xd6>
 640:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <x_thread_mask>
 644:	80 95       	com	r24
 646:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disable_status>
 64a:	89 23       	and	r24, r25
 64c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <disable_status>
 650:	07 c0       	rjmp	.+14     	; 0x660 <x_new+0xe4>
 652:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disable_status>
 656:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <x_thread_mask>
 65a:	89 2b       	or	r24, r25
 65c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <disable_status>
 660:	27 96       	adiw	r28, 0x07	; 7
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <__vector_21>:

/************************************************************************
* TIMER0 ISR for compare match, that for now does nothing.
************************************************************************/
ISR (TIMER0_COMPA_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
 67e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 682:	0f 92       	push	r0
 684:	2f 93       	push	r18
 686:	3f 93       	push	r19
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	1f 92       	push	r1
 696:	1f 92       	push	r1
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
	cli();	// Disable interrupts
 69c:	f8 94       	cli
	for (int i = 0; i < NUM_THREADS; i++)
 69e:	1a 82       	std	Y+2, r1	; 0x02
 6a0:	19 82       	std	Y+1, r1	; 0x01
 6a2:	3e c0       	rjmp	.+124    	; 0x720 <__vector_21+0xae>
	{
		if (x_thread_delay[i] > 0)	// If count is non-zero
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	8c 5d       	subi	r24, 0xDC	; 220
 6ae:	9d 4f       	sbci	r25, 0xFD	; 253
 6b0:	fc 01       	movw	r30, r24
 6b2:	80 81       	ld	r24, Z
 6b4:	91 81       	ldd	r25, Z+1	; 0x01
 6b6:	89 2b       	or	r24, r25
 6b8:	71 f1       	breq	.+92     	; 0x716 <__vector_21+0xa4>
		{
			x_thread_delay[i]--;	// Decrement count
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	9a 81       	ldd	r25, Y+2	; 0x02
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	8c 5d       	subi	r24, 0xDC	; 220
 6c4:	9d 4f       	sbci	r25, 0xFD	; 253
 6c6:	fc 01       	movw	r30, r24
 6c8:	80 81       	ld	r24, Z
 6ca:	91 81       	ldd	r25, Z+1	; 0x01
 6cc:	9c 01       	movw	r18, r24
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	31 09       	sbc	r19, r1
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	9a 81       	ldd	r25, Y+2	; 0x02
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	8c 5d       	subi	r24, 0xDC	; 220
 6dc:	9d 4f       	sbci	r25, 0xFD	; 253
 6de:	fc 01       	movw	r30, r24
 6e0:	31 83       	std	Z+1, r19	; 0x01
 6e2:	20 83       	st	Z, r18
			
			if (x_thread_delay[i] == 0)	// If current x_thread_id isn't disabled
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	9a 81       	ldd	r25, Y+2	; 0x02
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	8c 5d       	subi	r24, 0xDC	; 220
 6ee:	9d 4f       	sbci	r25, 0xFD	; 253
 6f0:	fc 01       	movw	r30, r24
 6f2:	80 81       	ld	r24, Z
 6f4:	91 81       	ldd	r25, Z+1	; 0x01
 6f6:	89 2b       	or	r24, r25
 6f8:	71 f4       	brne	.+28     	; 0x716 <__vector_21+0xa4>
			{
				disable_status &= ~(1 << i);	// Enable thread
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	09 80       	ldd	r0, Y+1	; 0x01
 700:	02 c0       	rjmp	.+4      	; 0x706 <__vector_21+0x94>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	0a 94       	dec	r0
 708:	e2 f7       	brpl	.-8      	; 0x702 <__vector_21+0x90>
 70a:	80 95       	com	r24
 70c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <disable_status>
 710:	89 23       	and	r24, r25
 712:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <disable_status>
* TIMER0 ISR for compare match, that for now does nothing.
************************************************************************/
ISR (TIMER0_COMPA_vect)
{
	cli();	// Disable interrupts
	for (int i = 0; i < NUM_THREADS; i++)
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	9a 81       	ldd	r25, Y+2	; 0x02
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	9a 83       	std	Y+2, r25	; 0x02
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	9a 81       	ldd	r25, Y+2	; 0x02
 724:	08 97       	sbiw	r24, 0x08	; 8
 726:	0c f4       	brge	.+2      	; 0x72a <__vector_21+0xb8>
 728:	bd cf       	rjmp	.-134    	; 0x6a4 <__vector_21+0x32>
				disable_status &= ~(1 << i);	// Enable thread
			}
		}
		
	}
	sei();	// Enable interrupts
 72a:	78 94       	sei
}
 72c:	0f 90       	pop	r0
 72e:	0f 90       	pop	r0
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	ff 91       	pop	r31
 736:	ef 91       	pop	r30
 738:	9f 91       	pop	r25
 73a:	8f 91       	pop	r24
 73c:	3f 91       	pop	r19
 73e:	2f 91       	pop	r18
 740:	0f 90       	pop	r0
 742:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 746:	0f 90       	pop	r0
 748:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
