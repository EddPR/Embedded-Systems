
ChangeStack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800200  000004ee  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800294  00800294  00000616  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001346  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5c  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054f  00000000  00000000  00002772  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ee       	ldi	r30, 0xEE	; 238
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 39       	cpi	r26, 0x94	; 148
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 e9       	ldi	r26, 0x94	; 148
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 39       	cpi	r26, 0x96	; 150
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	57 d1       	rcall	.+686    	; 0x3ce <main>
 120:	e4 c1       	rjmp	.+968    	; 0x4ea <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <changeStack>:
* pNewStack, copy the return address onto the new stack and return to 
* the caller with the new stack address as the return value.
***********************************************************************/
uint8_t * changeStack(uint8_t *pNewStack)
{	
	char *stackTop = (char *) SP;	// The stack pointer is the top of the stack
 124:	ed b7       	in	r30, 0x3d	; 61
 126:	fe b7       	in	r31, 0x3e	; 62
	stackFrameSize = STACK_BOTTOM - (int) stackTop + 1; // Range between the top and bottom of stack
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	32 e2       	ldi	r19, 0x22	; 34
 12c:	2e 1b       	sub	r18, r30
 12e:	3f 0b       	sbc	r19, r31
 130:	30 93 95 03 	sts	0x0395, r19	; 0x800395 <stackFrameSize+0x1>
 134:	20 93 94 03 	sts	0x0394, r18	; 0x800394 <stackFrameSize>
	uint8_t *newStackTop = pNewStack - stackFrameSize;	// The new stack top is based on the offset of old stack size.
 138:	bc 01       	movw	r22, r24
 13a:	62 1b       	sub	r22, r18
 13c:	73 0b       	sbc	r23, r19
	SP = (int) newStackTop;	// Set stack pointer to new stack
 13e:	7e bf       	out	0x3e, r23	; 62
 140:	6d bf       	out	0x3d, r22	; 61
	
	for (int i = 0; i < stackFrameSize; i++)	// Copy everything over to new stack
 142:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <stackFrameSize>
 146:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <stackFrameSize+0x1>
 14a:	18 16       	cp	r1, r24
 14c:	19 06       	cpc	r1, r25
 14e:	74 f4       	brge	.+28     	; 0x16c <changeStack+0x48>
 150:	db 01       	movw	r26, r22
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
	{
		newStackTop[i] = stackTop[i];
 156:	91 91       	ld	r25, Z+
 158:	9d 93       	st	X+, r25
	char *stackTop = (char *) SP;	// The stack pointer is the top of the stack
	stackFrameSize = STACK_BOTTOM - (int) stackTop + 1; // Range between the top and bottom of stack
	uint8_t *newStackTop = pNewStack - stackFrameSize;	// The new stack top is based on the offset of old stack size.
	SP = (int) newStackTop;	// Set stack pointer to new stack
	
	for (int i = 0; i < stackFrameSize; i++)	// Copy everything over to new stack
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	40 91 94 03 	lds	r20, 0x0394	; 0x800394 <stackFrameSize>
 162:	50 91 95 03 	lds	r21, 0x0395	; 0x800395 <stackFrameSize+0x1>
 166:	24 17       	cp	r18, r20
 168:	35 07       	cpc	r19, r21
 16a:	ac f3       	brlt	.-22     	; 0x156 <changeStack+0x32>
	{
		newStackTop[i] = stackTop[i];
	}
	
	return newStackTop;	// Return a pointer to the new stack
}
 16c:	cb 01       	movw	r24, r22
 16e:	08 95       	ret

00000170 <serial_open>:
* port: port number (0, 1, 2, 3)
* speed: baud rate calculated depending on F_CPU
* config: framing parameters (Data bits / Parity / Stop bits)
***********************************************************************/
void serial_open(unsigned char port, long speed, int config)
{
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	6a 01       	movw	r12, r20
 17e:	7b 01       	movw	r14, r22
		enableR = (1 << RXEN0);
		enableT = (1 << TXEN0);
		break;
	}
	
	serial_port[port]->ucsrb = enableR | enableT;
 180:	c8 2f       	mov	r28, r24
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	cc 0f       	add	r28, r28
 186:	dd 1f       	adc	r29, r29
 188:	c0 50       	subi	r28, 0x00	; 0
 18a:	de 4f       	sbci	r29, 0xFE	; 254
 18c:	e8 81       	ld	r30, Y
 18e:	f9 81       	ldd	r31, Y+1	; 0x01
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	81 83       	std	Z+1, r24	; 0x01
	serial_port[port]->ucsrc = config;
 194:	e8 81       	ld	r30, Y
 196:	f9 81       	ldd	r31, Y+1	; 0x01
 198:	22 83       	std	Z+2, r18	; 0x02
	speed = (F_CPU / 16 / speed - 1);
 19a:	60 e4       	ldi	r22, 0x40	; 64
 19c:	72 e4       	ldi	r23, 0x42	; 66
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a7 01       	movw	r20, r14
 1a4:	96 01       	movw	r18, r12
 1a6:	26 d1       	rcall	.+588    	; 0x3f4 <__divmodsi4>
	serial_port[port]->ubrr = speed;
 1a8:	e8 81       	ld	r30, Y
 1aa:	f9 81       	ldd	r31, Y+1	; 0x01
		break;
	}
	
	serial_port[port]->ucsrb = enableR | enableT;
	serial_port[port]->ucsrc = config;
	speed = (F_CPU / 16 / speed - 1);
 1ac:	da 01       	movw	r26, r20
 1ae:	c9 01       	movw	r24, r18
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	a1 09       	sbc	r26, r1
 1b4:	b1 09       	sbc	r27, r1
	serial_port[port]->ubrr = speed;
 1b6:	95 83       	std	Z+5, r25	; 0x05
 1b8:	84 83       	std	Z+4, r24	; 0x04
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	df 90       	pop	r13
 1c4:	cf 90       	pop	r12
 1c6:	08 95       	ret

000001c8 <serial_write>:
* port: port number (0, 1, 2, 3)
* data: byte character
***********************************************************************/
void serial_write(unsigned char port, char data)
{
	switch (port) {
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	81 f0       	breq	.+32     	; 0x1ec <serial_write+0x24>
 1cc:	38 f0       	brcs	.+14     	; 0x1dc <serial_write+0x14>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	a9 f0       	breq	.+42     	; 0x1fc <serial_write+0x34>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	d9 f0       	breq	.+54     	; 0x20c <serial_write+0x44>
		case 3:
		while (!(UCSR3A & (1 << UDRE0)));	// Wait for TXN
		UDR3 = data;
		break;
		default:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 1d6:	e0 ec       	ldi	r30, 0xC0	; 192
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	20 c0       	rjmp	.+64     	; 0x21c <serial_write+0x54>
***********************************************************************/
void serial_write(unsigned char port, char data)
{
	switch (port) {
		case 0:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 1dc:	e0 ec       	ldi	r30, 0xC0	; 192
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	85 ff       	sbrs	r24, 5
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <serial_write+0x18>
		UDR0 = data;
 1e6:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
 1ea:	08 95       	ret
		case 1:
		while (!(UCSR1A & (1 << UDRE1)));	// Wait for TXN
 1ec:	e8 ec       	ldi	r30, 0xC8	; 200
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	85 ff       	sbrs	r24, 5
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <serial_write+0x28>
		UDR1 = data;
 1f6:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
		break;
 1fa:	08 95       	ret
		case 2:
		while (!(UCSR2A & (1 << UDRE2)));	// Wait for TXN
 1fc:	e0 ed       	ldi	r30, 0xD0	; 208
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	85 ff       	sbrs	r24, 5
 204:	fd cf       	rjmp	.-6      	; 0x200 <serial_write+0x38>
		UDR2 = data;
 206:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		break;
 20a:	08 95       	ret
		case 3:
		while (!(UCSR3A & (1 << UDRE0)));	// Wait for TXN
 20c:	e0 e3       	ldi	r30, 0x30	; 48
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	80 81       	ld	r24, Z
 212:	85 ff       	sbrs	r24, 5
 214:	fd cf       	rjmp	.-6      	; 0x210 <serial_write+0x48>
		UDR3 = data;
 216:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		break;
 21a:	08 95       	ret
		default:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 21c:	80 81       	ld	r24, Z
 21e:	85 ff       	sbrs	r24, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <serial_write+0x54>
		UDR0 = data;
 222:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 226:	08 95       	ret

00000228 <serial_print>:
/***********************************************************************
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
	while(*data)
 22c:	fc 01       	movw	r30, r24
 22e:	60 81       	ld	r22, Z
 230:	66 23       	and	r22, r22
 232:	39 f0       	breq	.+14     	; 0x242 <serial_print+0x1a>
 234:	ec 01       	movw	r28, r24
 236:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_write(0, *data++);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	c6 df       	rcall	.-116    	; 0x1c8 <serial_write>
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
	while(*data)
 23c:	69 91       	ld	r22, Y+
 23e:	61 11       	cpse	r22, r1
 240:	fb cf       	rjmp	.-10     	; 0x238 <serial_print+0x10>
	{
		serial_write(0, *data++);
	}
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <testStack>:
/***********************************************************************
* Function is supposed to call changeStack to relocate the SP to the
* address of the passed buffer and print the old SP and the new SP. 
***********************************************************************/
void testStack()
{
 248:	af 92       	push	r10
 24a:	bf 92       	push	r11
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	68 97       	sbiw	r28, 0x18	; 24
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
		serial_print(buf2);
		serial_print("\r");
		_delay_ms(100);
	}
	serial_print("\r");
}
 26c:	ad b6       	in	r10, 0x3d	; 61
 26e:	be b6       	in	r11, 0x3e	; 62
	char stackPointerBuffer2[8];
	int temp, temp2;
	char *newAddress;
	
	char buf[8];
	char buf2[stackFrameSize];
 270:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <stackFrameSize>
 274:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <stackFrameSize+0x1>
 278:	2d b7       	in	r18, 0x3d	; 61
 27a:	3e b7       	in	r19, 0x3e	; 62
 27c:	28 1b       	sub	r18, r24
 27e:	39 0b       	sbc	r19, r25
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	3e bf       	out	0x3e, r19	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	2d bf       	out	0x3d, r18	; 61
 28a:	8d b7       	in	r24, 0x3d	; 61
 28c:	9e b7       	in	r25, 0x3e	; 62
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	6c 01       	movw	r12, r24
	char *stackPointer = (char *) SP;
 292:	0d b7       	in	r16, 0x3d	; 61
 294:	1e b7       	in	r17, 0x3e	; 62
	temp = (int) stackPointer;
	
	newAddress = (char *) changeStack((uint8_t *) (buffer + (BUFFER_SIZE - 1)));
 296:	82 e9       	ldi	r24, 0x92	; 146
 298:	93 e0       	ldi	r25, 0x03	; 3
 29a:	44 df       	rcall	.-376    	; 0x124 <changeStack>
 29c:	7c 01       	movw	r14, r24
	temp2 = (int) newAddress;
	
	serial_print("We are in the loop testing stackFrameSize: ");
 29e:	88 e0       	ldi	r24, 0x08	; 8
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	c2 df       	rcall	.-124    	; 0x228 <serial_print>
	itoa(stackFrameSize, buf, DECIMAL);
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	be 01       	movw	r22, r28
 2aa:	6f 5e       	subi	r22, 0xEF	; 239
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <stackFrameSize>
 2b2:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <stackFrameSize+0x1>
 2b6:	dc d0       	rcall	.+440    	; 0x470 <itoa>
	serial_print(buf);
 2b8:	ce 01       	movw	r24, r28
 2ba:	41 96       	adiw	r24, 0x11	; 17
 2bc:	b5 df       	rcall	.-150    	; 0x228 <serial_print>
	serial_print("\r");
 2be:	84 e5       	ldi	r24, 0x54	; 84
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	b2 df       	rcall	.-156    	; 0x228 <serial_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
 2c6:	e1 ee       	ldi	r30, 0xE1	; 225
 2c8:	f4 e0       	ldi	r31, 0x04	; 4
 2ca:	91 50       	subi	r25, 0x01	; 1
 2cc:	e0 40       	sbci	r30, 0x00	; 0
 2ce:	f0 40       	sbci	r31, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <testStack+0x82>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <testStack+0x8c>
 2d4:	00 00       	nop
	_delay_ms(100);
	
	serial_print("The value of the old SP is: 0x");
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	a6 df       	rcall	.-180    	; 0x228 <serial_print>
	itoa(temp, stackPointerBuffer, HEX);
 2dc:	40 e1       	ldi	r20, 0x10	; 16
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	be 01       	movw	r22, r28
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	c8 01       	movw	r24, r16
 2e8:	c3 d0       	rcall	.+390    	; 0x470 <itoa>
	serial_print(stackPointerBuffer);
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	9c df       	rcall	.-200    	; 0x228 <serial_print>
	serial_print(".\r");
 2f0:	83 e5       	ldi	r24, 0x53	; 83
 2f2:	92 e0       	ldi	r25, 0x02	; 2
 2f4:	99 df       	rcall	.-206    	; 0x228 <serial_print>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	31 ee       	ldi	r19, 0xE1	; 225
 2fa:	84 e0       	ldi	r24, 0x04	; 4
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	30 40       	sbci	r19, 0x00	; 0
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <testStack+0xb4>
 304:	00 c0       	rjmp	.+0      	; 0x306 <testStack+0xbe>
 306:	00 00       	nop
	_delay_ms(100);
	
	serial_print("The value of the new SP is: 0x");
 308:	86 e5       	ldi	r24, 0x56	; 86
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	8d df       	rcall	.-230    	; 0x228 <serial_print>
	itoa(temp2, stackPointerBuffer2, HEX);
 30e:	40 e1       	ldi	r20, 0x10	; 16
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	be 01       	movw	r22, r28
 314:	67 5f       	subi	r22, 0xF7	; 247
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	c7 01       	movw	r24, r14
 31a:	aa d0       	rcall	.+340    	; 0x470 <itoa>
	serial_print(stackPointerBuffer2);
 31c:	ce 01       	movw	r24, r28
 31e:	09 96       	adiw	r24, 0x09	; 9
 320:	83 df       	rcall	.-250    	; 0x228 <serial_print>
	serial_print(".\r");
 322:	83 e5       	ldi	r24, 0x53	; 83
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	80 df       	rcall	.-256    	; 0x228 <serial_print>
 328:	9f ef       	ldi	r25, 0xFF	; 255
 32a:	e1 ee       	ldi	r30, 0xE1	; 225
 32c:	f4 e0       	ldi	r31, 0x04	; 4
 32e:	91 50       	subi	r25, 0x01	; 1
 330:	e0 40       	sbci	r30, 0x00	; 0
 332:	f0 40       	sbci	r31, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <testStack+0xe6>
 336:	00 c0       	rjmp	.+0      	; 0x338 <testStack+0xf0>
 338:	00 00       	nop
	_delay_ms(100);
	serial_print("\r");
 33a:	84 e5       	ldi	r24, 0x54	; 84
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	74 df       	rcall	.-280    	; 0x228 <serial_print>
	
	serial_print("The values on the stack are:\r");
 340:	85 e7       	ldi	r24, 0x75	; 117
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	71 df       	rcall	.-286    	; 0x228 <serial_print>
	for (int i = 0; i < stackFrameSize; i++)
 346:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <stackFrameSize>
 34a:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <stackFrameSize+0x1>
 34e:	18 16       	cp	r1, r24
 350:	19 06       	cpc	r1, r25
 352:	24 f5       	brge	.+72     	; 0x39c <testStack+0x154>
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	e2 1a       	sub	r14, r18
 358:	f2 0a       	sbc	r15, r18
 35a:	00 e0       	ldi	r16, 0x00	; 0
 35c:	10 e0       	ldi	r17, 0x00	; 0
	{
		itoa(newAddress[-i], buf2, HEX);
 35e:	f7 01       	movw	r30, r14
 360:	82 91       	ld	r24, -Z
 362:	7f 01       	movw	r14, r30
 364:	40 e1       	ldi	r20, 0x10	; 16
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	b6 01       	movw	r22, r12
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	81 d0       	rcall	.+258    	; 0x470 <itoa>
		serial_print(buf2);
 36e:	c6 01       	movw	r24, r12
 370:	5b df       	rcall	.-330    	; 0x228 <serial_print>
		serial_print("\r");
 372:	84 e5       	ldi	r24, 0x54	; 84
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	58 df       	rcall	.-336    	; 0x228 <serial_print>
 378:	ff ef       	ldi	r31, 0xFF	; 255
 37a:	21 ee       	ldi	r18, 0xE1	; 225
 37c:	34 e0       	ldi	r19, 0x04	; 4
 37e:	f1 50       	subi	r31, 0x01	; 1
 380:	20 40       	sbci	r18, 0x00	; 0
 382:	30 40       	sbci	r19, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <testStack+0x136>
 386:	00 c0       	rjmp	.+0      	; 0x388 <testStack+0x140>
 388:	00 00       	nop
	serial_print(".\r");
	_delay_ms(100);
	serial_print("\r");
	
	serial_print("The values on the stack are:\r");
	for (int i = 0; i < stackFrameSize; i++)
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
 38e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <stackFrameSize>
 392:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <stackFrameSize+0x1>
 396:	08 17       	cp	r16, r24
 398:	19 07       	cpc	r17, r25
 39a:	0c f3       	brlt	.-62     	; 0x35e <testStack+0x116>
		itoa(newAddress[-i], buf2, HEX);
		serial_print(buf2);
		serial_print("\r");
		_delay_ms(100);
	}
	serial_print("\r");
 39c:	84 e5       	ldi	r24, 0x54	; 84
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	43 df       	rcall	.-378    	; 0x228 <serial_print>
}
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	be be       	out	0x3e, r11	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	ad be       	out	0x3d, r10	; 61
 3ac:	68 96       	adiw	r28, 0x18	; 24
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	df 90       	pop	r13
 3c6:	cf 90       	pop	r12
 3c8:	bf 90       	pop	r11
 3ca:	af 90       	pop	r10
 3cc:	08 95       	ret

000003ce <main>:

int main(void)
{
	
	
	serial_open(PORT, BAUD_RATE, SERIAL_8N1);
 3ce:	26 e0       	ldi	r18, 0x06	; 6
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	5b e4       	ldi	r21, 0x4B	; 75
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	c9 de       	rcall	.-622    	; 0x170 <serial_open>
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	89 e6       	ldi	r24, 0x69	; 105
 3e2:	98 e1       	ldi	r25, 0x18	; 24
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x16>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x20>
 3ee:	00 00       	nop
	_delay_ms(500);
	
	while (1)
	{
		testStack();
 3f0:	2b df       	rcall	.-426    	; 0x248 <testStack>
	}
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <main+0x22>

000003f4 <__divmodsi4>:
 3f4:	05 2e       	mov	r0, r21
 3f6:	97 fb       	bst	r25, 7
 3f8:	16 f4       	brtc	.+4      	; 0x3fe <__divmodsi4+0xa>
 3fa:	00 94       	com	r0
 3fc:	0f d0       	rcall	.+30     	; 0x41c <__negsi2>
 3fe:	57 fd       	sbrc	r21, 7
 400:	05 d0       	rcall	.+10     	; 0x40c <__divmodsi4_neg2>
 402:	14 d0       	rcall	.+40     	; 0x42c <__udivmodsi4>
 404:	07 fc       	sbrc	r0, 7
 406:	02 d0       	rcall	.+4      	; 0x40c <__divmodsi4_neg2>
 408:	46 f4       	brtc	.+16     	; 0x41a <__divmodsi4_exit>
 40a:	08 c0       	rjmp	.+16     	; 0x41c <__negsi2>

0000040c <__divmodsi4_neg2>:
 40c:	50 95       	com	r21
 40e:	40 95       	com	r20
 410:	30 95       	com	r19
 412:	21 95       	neg	r18
 414:	3f 4f       	sbci	r19, 0xFF	; 255
 416:	4f 4f       	sbci	r20, 0xFF	; 255
 418:	5f 4f       	sbci	r21, 0xFF	; 255

0000041a <__divmodsi4_exit>:
 41a:	08 95       	ret

0000041c <__negsi2>:
 41c:	90 95       	com	r25
 41e:	80 95       	com	r24
 420:	70 95       	com	r23
 422:	61 95       	neg	r22
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__udivmodsi4>:
 42c:	a1 e2       	ldi	r26, 0x21	; 33
 42e:	1a 2e       	mov	r1, r26
 430:	aa 1b       	sub	r26, r26
 432:	bb 1b       	sub	r27, r27
 434:	fd 01       	movw	r30, r26
 436:	0d c0       	rjmp	.+26     	; 0x452 <__udivmodsi4_ep>

00000438 <__udivmodsi4_loop>:
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	ee 1f       	adc	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	a2 17       	cp	r26, r18
 442:	b3 07       	cpc	r27, r19
 444:	e4 07       	cpc	r30, r20
 446:	f5 07       	cpc	r31, r21
 448:	20 f0       	brcs	.+8      	; 0x452 <__udivmodsi4_ep>
 44a:	a2 1b       	sub	r26, r18
 44c:	b3 0b       	sbc	r27, r19
 44e:	e4 0b       	sbc	r30, r20
 450:	f5 0b       	sbc	r31, r21

00000452 <__udivmodsi4_ep>:
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	1a 94       	dec	r1
 45c:	69 f7       	brne	.-38     	; 0x438 <__udivmodsi4_loop>
 45e:	60 95       	com	r22
 460:	70 95       	com	r23
 462:	80 95       	com	r24
 464:	90 95       	com	r25
 466:	9b 01       	movw	r18, r22
 468:	ac 01       	movw	r20, r24
 46a:	bd 01       	movw	r22, r26
 46c:	cf 01       	movw	r24, r30
 46e:	08 95       	ret

00000470 <itoa>:
 470:	45 32       	cpi	r20, 0x25	; 37
 472:	51 05       	cpc	r21, r1
 474:	18 f4       	brcc	.+6      	; 0x47c <itoa+0xc>
 476:	42 30       	cpi	r20, 0x02	; 2
 478:	08 f0       	brcs	.+2      	; 0x47c <itoa+0xc>
 47a:	04 c0       	rjmp	.+8      	; 0x484 <__itoa_ncheck>
 47c:	fb 01       	movw	r30, r22
 47e:	10 82       	st	Z, r1
 480:	cb 01       	movw	r24, r22
 482:	08 95       	ret

00000484 <__itoa_ncheck>:
 484:	bb 27       	eor	r27, r27
 486:	4a 30       	cpi	r20, 0x0A	; 10
 488:	31 f4       	brne	.+12     	; 0x496 <__itoa_ncheck+0x12>
 48a:	99 23       	and	r25, r25
 48c:	22 f4       	brpl	.+8      	; 0x496 <__itoa_ncheck+0x12>
 48e:	bd e2       	ldi	r27, 0x2D	; 45
 490:	90 95       	com	r25
 492:	81 95       	neg	r24
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	01 c0       	rjmp	.+2      	; 0x49a <__utoa_common>

00000498 <__utoa_ncheck>:
 498:	bb 27       	eor	r27, r27

0000049a <__utoa_common>:
 49a:	fb 01       	movw	r30, r22
 49c:	55 27       	eor	r21, r21
 49e:	aa 27       	eor	r26, r26
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	aa 1f       	adc	r26, r26
 4a6:	a4 17       	cp	r26, r20
 4a8:	10 f0       	brcs	.+4      	; 0x4ae <__utoa_common+0x14>
 4aa:	a4 1b       	sub	r26, r20
 4ac:	83 95       	inc	r24
 4ae:	50 51       	subi	r21, 0x10	; 16
 4b0:	b9 f7       	brne	.-18     	; 0x4a0 <__utoa_common+0x6>
 4b2:	a0 5d       	subi	r26, 0xD0	; 208
 4b4:	aa 33       	cpi	r26, 0x3A	; 58
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__utoa_common+0x20>
 4b8:	a9 5d       	subi	r26, 0xD9	; 217
 4ba:	a1 93       	st	Z+, r26
 4bc:	00 97       	sbiw	r24, 0x00	; 0
 4be:	79 f7       	brne	.-34     	; 0x49e <__utoa_common+0x4>
 4c0:	b1 11       	cpse	r27, r1
 4c2:	b1 93       	st	Z+, r27
 4c4:	11 92       	st	Z+, r1
 4c6:	cb 01       	movw	r24, r22
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <strrev>

000004ca <strrev>:
 4ca:	dc 01       	movw	r26, r24
 4cc:	fc 01       	movw	r30, r24
 4ce:	67 2f       	mov	r22, r23
 4d0:	71 91       	ld	r23, Z+
 4d2:	77 23       	and	r23, r23
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <strrev+0x4>
 4d6:	32 97       	sbiw	r30, 0x02	; 2
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <strrev+0x18>
 4da:	7c 91       	ld	r23, X
 4dc:	6d 93       	st	X+, r22
 4de:	70 83       	st	Z, r23
 4e0:	62 91       	ld	r22, -Z
 4e2:	ae 17       	cp	r26, r30
 4e4:	bf 07       	cpc	r27, r31
 4e6:	c8 f3       	brcs	.-14     	; 0x4da <strrev+0x10>
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
