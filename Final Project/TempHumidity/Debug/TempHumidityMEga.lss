
TempHumidityMEga.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000044a  00800200  00000e4e  00000ee2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000847  0080064a  0080064a  0000132c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000013d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000284f  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ae  00000000  00000000  00003d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c6  00000000  00000000  00004f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000060cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096f  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000122c  00000000  00000000  00006d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	90 c5       	rjmp	.+2848   	; 0xb76 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	16 e0       	ldi	r17, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e4       	ldi	r30, 0x4E	; 78
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 34       	cpi	r26, 0x4A	; 74
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2e e0       	ldi	r18, 0x0E	; 14
 110:	aa e4       	ldi	r26, 0x4A	; 74
 112:	b6 e0       	ldi	r27, 0x06	; 6
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 39       	cpi	r26, 0x91	; 145
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0b d1       	rcall	.+534    	; 0x336 <main>
 120:	94 c6       	rjmp	.+3368   	; 0xe4a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 5c 06 	lds	r18, 0x065C	; 0x80065c <x_thread_id>
 14c:	30 91 90 0e 	lds	r19, 0x0E90	; 0x800e90 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	ee e5       	ldi	r30, 0x5E	; 94
 15a:	f6 e0       	ldi	r31, 0x06	; 6
 15c:	22 0f       	add	r18, r18
 15e:	cf e0       	ldi	r28, 0x0F	; 15
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	4a c5       	rjmp	.+2708   	; 0xc0e <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 8f 0e 	lds	r18, 0x0E8F	; 0x800e8f <x_disable_status>
 188:	30 91 5d 06 	lds	r19, 0x065D	; 0x80065d <x_delay_status>
 18c:	40 91 7e 06 	lds	r20, 0x067E	; 0x80067e <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 5c 06 	lds	r19, 0x065C	; 0x80065c <x_thread_id>
 198:	40 91 90 0e 	lds	r20, 0x0E90	; 0x800e90 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 5c 06 	sts	0x065C, r19	; 0x80065c <x_thread_id>
 1b8:	70 93 90 0e 	sts	0x0E90, r23	; 0x800e90 <x_thread_mask>
 1bc:	ee e5       	ldi	r30, 0x5E	; 94
 1be:	f6 e0       	ldi	r31, 0x06	; 6
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <ledThread>:
	}
	_delay_us(80); // Line is driven LOW for 80 usecs, so wait for next check
	// Connection test when line is driven HIGH for last 80 usecs
	if (!digitalRead(DATA_PIN)) // Check sensor connection during line HIGH
	{
		serial_print("No connection response during HIGH drive. Please check pin connections. \r");
 216:	38 9a       	sbi	0x07, 0	; 7
 218:	c1 e0       	ldi	r28, 0x01	; 1
 21a:	20 91 50 06 	lds	r18, 0x0650	; 0x800650 <temperature>
 21e:	30 91 51 06 	lds	r19, 0x0651	; 0x800651 <temperature+0x1>
 222:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <tLow>
 226:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <tLow+0x1>
 22a:	28 17       	cp	r18, r24
 22c:	39 07       	cpc	r19, r25
 22e:	2c f4       	brge	.+10     	; 0x23a <ledThread+0x24>
 230:	c8 b9       	out	0x08, r28	; 8
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	7d d4       	rcall	.+2298   	; 0xb32 <x_delay>
 238:	f0 cf       	rjmp	.-32     	; 0x21a <ledThread+0x4>
 23a:	20 91 50 06 	lds	r18, 0x0650	; 0x800650 <temperature>
 23e:	30 91 51 06 	lds	r19, 0x0651	; 0x800651 <temperature+0x1>
 242:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tHigh>
 246:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <tHigh+0x1>
 24a:	28 17       	cp	r18, r24
 24c:	39 07       	cpc	r19, r25
 24e:	2c f0       	brlt	.+10     	; 0x25a <ledThread+0x44>
 250:	18 b8       	out	0x08, r1	; 8
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	6d d4       	rcall	.+2266   	; 0xb32 <x_delay>
 258:	e0 cf       	rjmp	.-64     	; 0x21a <ledThread+0x4>
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	69 d4       	rcall	.+2258   	; 0xb32 <x_delay>
 260:	dc cf       	rjmp	.-72     	; 0x21a <ledThread+0x4>

00000262 <resetState>:
 262:	78 94       	sei
 264:	e2 e5       	ldi	r30, 0x52	; 82
 266:	f6 e0       	ldi	r31, 0x06	; 6
 268:	11 82       	std	Z+1, r1	; 0x01
 26a:	10 82       	st	Z, r1
 26c:	13 82       	std	Z+3, r1	; 0x03
 26e:	12 82       	std	Z+2, r1	; 0x02
 270:	15 82       	std	Z+5, r1	; 0x05
 272:	14 82       	std	Z+4, r1	; 0x04
 274:	17 82       	std	Z+7, r1	; 0x07
 276:	16 82       	std	Z+6, r1	; 0x06
 278:	11 86       	std	Z+9, r1	; 0x09
 27a:	10 86       	std	Z+8, r1	; 0x08
 27c:	08 95       	ret

0000027e <serial_open>:
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	6a 01       	movw	r12, r20
 28c:	7b 01       	movw	r14, r22
 28e:	c8 2f       	mov	r28, r24
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	cc 0f       	add	r28, r28
 294:	dd 1f       	adc	r29, r29
 296:	c0 50       	subi	r28, 0x00	; 0
 298:	de 4f       	sbci	r29, 0xFE	; 254
 29a:	e8 81       	ld	r30, Y
 29c:	f9 81       	ldd	r31, Y+1	; 0x01
 29e:	88 e1       	ldi	r24, 0x18	; 24
 2a0:	81 83       	std	Z+1, r24	; 0x01
 2a2:	e8 81       	ld	r30, Y
 2a4:	f9 81       	ldd	r31, Y+1	; 0x01
 2a6:	22 83       	std	Z+2, r18	; 0x02
 2a8:	60 e4       	ldi	r22, 0x40	; 64
 2aa:	72 e4       	ldi	r23, 0x42	; 66
 2ac:	8f e0       	ldi	r24, 0x0F	; 15
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	a7 01       	movw	r20, r14
 2b2:	96 01       	movw	r18, r12
 2b4:	f8 d4       	rcall	.+2544   	; 0xca6 <__divmodsi4>
 2b6:	e8 81       	ld	r30, Y
 2b8:	f9 81       	ldd	r31, Y+1	; 0x01
 2ba:	da 01       	movw	r26, r20
 2bc:	c9 01       	movw	r24, r18
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	a1 09       	sbc	r26, r1
 2c2:	b1 09       	sbc	r27, r1
 2c4:	95 83       	std	Z+5, r25	; 0x05
 2c6:	84 83       	std	Z+4, r24	; 0x04
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <serial_write>:
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	81 f0       	breq	.+32     	; 0x2fa <serial_write+0x24>
 2da:	38 f0       	brcs	.+14     	; 0x2ea <serial_write+0x14>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	a9 f0       	breq	.+42     	; 0x30a <serial_write+0x34>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	d9 f0       	breq	.+54     	; 0x31a <serial_write+0x44>
 2e4:	e0 ec       	ldi	r30, 0xC0	; 192
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	20 c0       	rjmp	.+64     	; 0x32a <serial_write+0x54>
 2ea:	e0 ec       	ldi	r30, 0xC0	; 192
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	85 ff       	sbrs	r24, 5
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <serial_write+0x18>
 2f4:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2f8:	08 95       	ret
 2fa:	e8 ec       	ldi	r30, 0xC8	; 200
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	85 ff       	sbrs	r24, 5
 302:	fd cf       	rjmp	.-6      	; 0x2fe <serial_write+0x28>
 304:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 308:	08 95       	ret
 30a:	e0 ed       	ldi	r30, 0xD0	; 208
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	85 ff       	sbrs	r24, 5
 312:	fd cf       	rjmp	.-6      	; 0x30e <serial_write+0x38>
 314:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 318:	08 95       	ret
 31a:	e0 e3       	ldi	r30, 0x30	; 48
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	80 81       	ld	r24, Z
 320:	85 ff       	sbrs	r24, 5
 322:	fd cf       	rjmp	.-6      	; 0x31e <serial_write+0x48>
 324:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 328:	08 95       	ret
 32a:	80 81       	ld	r24, Z
 32c:	85 ff       	sbrs	r24, 5
 32e:	fd cf       	rjmp	.-6      	; 0x32a <serial_write+0x54>
 330:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 334:	08 95       	ret

00000336 <main>:
 336:	26 e0       	ldi	r18, 0x06	; 6
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	5b e4       	ldi	r21, 0x4B	; 75
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	9c df       	rcall	.-200    	; 0x27e <serial_open>
 346:	26 e2       	ldi	r18, 0x26	; 38
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e6       	ldi	r20, 0x60	; 96
 34c:	59 e0       	ldi	r21, 0x09	; 9
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	94 df       	rcall	.-216    	; 0x27e <serial_open>
 356:	76 d3       	rcall	.+1772   	; 0xa44 <x_init>
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	6b e0       	ldi	r22, 0x0B	; 11
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	33 d3       	rcall	.+1638   	; 0x9c8 <x_new>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	65 e4       	ldi	r22, 0x45	; 69
 366:	73 e0       	ldi	r23, 0x03	; 3
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	2e d3       	rcall	.+1628   	; 0x9c8 <x_new>
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	6e ef       	ldi	r22, 0xFE	; 254
 370:	72 e0       	ldi	r23, 0x02	; 2
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	29 d3       	rcall	.+1618   	; 0x9c8 <x_new>
 376:	62 e4       	ldi	r22, 0x42	; 66
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	ad df       	rcall	.-166    	; 0x2d6 <serial_write>
 37c:	fc cf       	rjmp	.-8      	; 0x376 <main+0x40>

0000037e <serial_read>:
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	81 f0       	breq	.+32     	; 0x3a2 <serial_read+0x24>
 382:	38 f0       	brcs	.+14     	; 0x392 <serial_read+0x14>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	a9 f0       	breq	.+42     	; 0x3b2 <serial_read+0x34>
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	d9 f0       	breq	.+54     	; 0x3c2 <serial_read+0x44>
 38c:	e0 ec       	ldi	r30, 0xC0	; 192
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	20 c0       	rjmp	.+64     	; 0x3d2 <serial_read+0x54>
 392:	e0 ec       	ldi	r30, 0xC0	; 192
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	88 23       	and	r24, r24
 39a:	ec f7       	brge	.-6      	; 0x396 <serial_read+0x18>
 39c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3a0:	08 95       	ret
 3a2:	e8 ec       	ldi	r30, 0xC8	; 200
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	ec f7       	brge	.-6      	; 0x3a6 <serial_read+0x28>
 3ac:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 3b0:	08 95       	ret
 3b2:	e0 ed       	ldi	r30, 0xD0	; 208
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	88 23       	and	r24, r24
 3ba:	ec f7       	brge	.-6      	; 0x3b6 <serial_read+0x38>
 3bc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 3c0:	08 95       	ret
 3c2:	e0 e3       	ldi	r30, 0x30	; 48
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	80 81       	ld	r24, Z
 3c8:	88 23       	and	r24, r24
 3ca:	ec f7       	brge	.-6      	; 0x3c6 <serial_read+0x48>
 3cc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 3d0:	08 95       	ret
 3d2:	80 81       	ld	r24, Z
 3d4:	88 23       	and	r24, r24
 3d6:	ec f7       	brge	.-6      	; 0x3d2 <serial_read+0x54>
 3d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3dc:	08 95       	ret

000003de <serial_print>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	fc 01       	movw	r30, r24
 3e4:	60 81       	ld	r22, Z
 3e6:	66 23       	and	r22, r22
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <serial_print+0x1a>
 3ea:	ec 01       	movw	r28, r24
 3ec:	21 96       	adiw	r28, 0x01	; 1
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	72 df       	rcall	.-284    	; 0x2d6 <serial_write>
 3f2:	69 91       	ld	r22, Y+
 3f4:	61 11       	cpse	r22, r1
 3f6:	fb cf       	rjmp	.-10     	; 0x3ee <serial_print+0x10>
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <printTemperature>:
 3fe:	af 92       	push	r10
 400:	bf 92       	push	r11
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	2f 97       	sbiw	r28, 0x0f	; 15
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	e8 2e       	mov	r14, r24
 424:	f1 2c       	mov	r15, r1
 426:	06 2f       	mov	r16, r22
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	9e 2d       	mov	r25, r14
 42c:	88 27       	eor	r24, r24
 42e:	80 2b       	or	r24, r16
 430:	91 2b       	or	r25, r17
 432:	6a e0       	ldi	r22, 0x0A	; 10
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	24 d4       	rcall	.+2120   	; 0xc80 <__divmodhi4>
 438:	a6 2e       	mov	r10, r22
 43a:	b7 2e       	mov	r11, r23
 43c:	cb 01       	movw	r24, r22
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	86 0f       	add	r24, r22
 44c:	97 1f       	adc	r25, r23
 44e:	65 e0       	ldi	r22, 0x05	; 5
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	16 d4       	rcall	.+2092   	; 0xc80 <__divmodhi4>
 454:	6b 01       	movw	r12, r22
 456:	80 e2       	ldi	r24, 0x20	; 32
 458:	c8 0e       	add	r12, r24
 45a:	d1 1c       	adc	r13, r1
 45c:	d0 92 51 06 	sts	0x0651, r13	; 0x800651 <temperature+0x1>
 460:	c0 92 50 06 	sts	0x0650, r12	; 0x800650 <temperature>
 464:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <readings>
 468:	21 30       	cpi	r18, 0x01	; 1
 46a:	09 f0       	breq	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46c:	52 c0       	rjmp	.+164    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 46e:	77 d3       	rcall	.+1774   	; 0xb5e <x_gtime>
 470:	2a e0       	ldi	r18, 0x0A	; 10
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	ae 01       	movw	r20, r28
 476:	4f 5f       	subi	r20, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	89 d4       	rcall	.+2322   	; 0xd8e <ultoa>
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	ae df       	rcall	.-164    	; 0x3de <serial_print>
 482:	8f e1       	ldi	r24, 0x1F	; 31
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	ab df       	rcall	.-170    	; 0x3de <serial_print>
 488:	4a e0       	ldi	r20, 0x0A	; 10
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	be 01       	movw	r22, r28
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	c6 01       	movw	r24, r12
 494:	68 d4       	rcall	.+2256   	; 0xd66 <itoa>
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	a1 df       	rcall	.-190    	; 0x3de <serial_print>
 49c:	8a 2d       	mov	r24, r10
 49e:	9b 2d       	mov	r25, r11
 4a0:	6a e0       	ldi	r22, 0x0A	; 10
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	ed d3       	rcall	.+2010   	; 0xc80 <__divmodhi4>
 4a6:	4a e0       	ldi	r20, 0x0A	; 10
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	be 01       	movw	r22, r28
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	5a d4       	rcall	.+2228   	; 0xd66 <itoa>
 4b2:	82 e2       	ldi	r24, 0x22	; 34
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	93 df       	rcall	.-218    	; 0x3de <serial_print>
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	90 df       	rcall	.-224    	; 0x3de <serial_print>
 4be:	8f e1       	ldi	r24, 0x1F	; 31
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	8d df       	rcall	.-230    	; 0x3de <serial_print>
 4c4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <tLow>
 4c8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <tLow+0x1>
 4cc:	4a e0       	ldi	r20, 0x0A	; 10
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	be 01       	movw	r22, r28
 4d2:	6f 5f       	subi	r22, 0xFF	; 255
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	47 d4       	rcall	.+2190   	; 0xd66 <itoa>
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	80 df       	rcall	.-256    	; 0x3de <serial_print>
 4de:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tHigh>
 4e2:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <tHigh+0x1>
 4e6:	4a e0       	ldi	r20, 0x0A	; 10
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	be 01       	movw	r22, r28
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	3a d4       	rcall	.+2164   	; 0xd66 <itoa>
 4f2:	84 e2       	ldi	r24, 0x24	; 36
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	73 df       	rcall	.-282    	; 0x3de <serial_print>
 4f8:	ce 01       	movw	r24, r28
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	70 df       	rcall	.-288    	; 0x3de <serial_print>
 4fe:	30 9b       	sbis	0x06, 0	; 6
 500:	04 c0       	rjmp	.+8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 502:	87 e2       	ldi	r24, 0x27	; 39
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	6b df       	rcall	.-298    	; 0x3de <serial_print>
 508:	53 c0       	rjmp	.+166    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 50a:	82 e3       	ldi	r24, 0x32	; 50
 50c:	92 e0       	ldi	r25, 0x02	; 2
 50e:	67 df       	rcall	.-306    	; 0x3de <serial_print>
 510:	4f c0       	rjmp	.+158    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 512:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <readings>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	09 f0       	breq	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 51a:	4a c0       	rjmp	.+148    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 51c:	20 d3       	rcall	.+1600   	; 0xb5e <x_gtime>
 51e:	20 e1       	ldi	r18, 0x10	; 16
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	ae 01       	movw	r20, r28
 524:	4f 5f       	subi	r20, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	32 d4       	rcall	.+2148   	; 0xd8e <ultoa>
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	57 df       	rcall	.-338    	; 0x3de <serial_print>
 530:	8f e1       	ldi	r24, 0x1F	; 31
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	54 df       	rcall	.-344    	; 0x3de <serial_print>
 536:	40 e1       	ldi	r20, 0x10	; 16
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	be 01       	movw	r22, r28
 53c:	6f 5f       	subi	r22, 0xFF	; 255
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	c7 01       	movw	r24, r14
 542:	11 d4       	rcall	.+2082   	; 0xd66 <itoa>
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	4a df       	rcall	.-364    	; 0x3de <serial_print>
 54a:	40 e1       	ldi	r20, 0x10	; 16
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	be 01       	movw	r22, r28
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	c8 01       	movw	r24, r16
 556:	07 d4       	rcall	.+2062   	; 0xd66 <itoa>
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	40 df       	rcall	.-384    	; 0x3de <serial_print>
 55e:	8f e1       	ldi	r24, 0x1F	; 31
 560:	92 e0       	ldi	r25, 0x02	; 2
 562:	3d df       	rcall	.-390    	; 0x3de <serial_print>
 564:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <tLow>
 568:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <tLow+0x1>
 56c:	40 e1       	ldi	r20, 0x10	; 16
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	be 01       	movw	r22, r28
 572:	6f 5f       	subi	r22, 0xFF	; 255
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	f7 d3       	rcall	.+2030   	; 0xd66 <itoa>
 578:	ce 01       	movw	r24, r28
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	30 df       	rcall	.-416    	; 0x3de <serial_print>
 57e:	84 e2       	ldi	r24, 0x24	; 36
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	2d df       	rcall	.-422    	; 0x3de <serial_print>
 584:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tHigh>
 588:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <tHigh+0x1>
 58c:	40 e1       	ldi	r20, 0x10	; 16
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	be 01       	movw	r22, r28
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	e7 d3       	rcall	.+1998   	; 0xd66 <itoa>
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	20 df       	rcall	.-448    	; 0x3de <serial_print>
 59e:	30 9b       	sbis	0x06, 0	; 6
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5a2:	8d e3       	ldi	r24, 0x3D	; 61
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	1b df       	rcall	.-458    	; 0x3de <serial_print>
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5aa:	84 e4       	ldi	r24, 0x44	; 68
 5ac:	92 e0       	ldi	r25, 0x02	; 2
 5ae:	17 df       	rcall	.-466    	; 0x3de <serial_print>
 5b0:	2f 96       	adiw	r28, 0x0f	; 15
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	08 95       	ret

000005d2 <checkSum>:
 5d2:	e2 e5       	ldi	r30, 0x52	; 82
 5d4:	f6 e0       	ldi	r31, 0x06	; 6
 5d6:	84 81       	ldd	r24, Z+4	; 0x04
 5d8:	66 81       	ldd	r22, Z+6	; 0x06
 5da:	22 81       	ldd	r18, Z+2	; 0x02
 5dc:	90 81       	ld	r25, Z
 5de:	29 0f       	add	r18, r25
 5e0:	28 0f       	add	r18, r24
 5e2:	26 0f       	add	r18, r22
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	40 85       	ldd	r20, Z+8	; 0x08
 5e8:	51 85       	ldd	r21, Z+9	; 0x09
 5ea:	42 17       	cp	r20, r18
 5ec:	53 07       	cpc	r21, r19
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <checkSum+0x22>
 5f0:	06 cf       	rjmp	.-500    	; 0x3fe <printTemperature>
 5f2:	08 95       	ret
 5f4:	8b e4       	ldi	r24, 0x4B	; 75
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	f2 ce       	rjmp	.-540    	; 0x3de <serial_print>
 5fa:	08 95       	ret

000005fc <runSensorThread>:
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f2 e5       	ldi	r31, 0x52	; 82
 600:	ef 2e       	mov	r14, r31
 602:	f6 e0       	ldi	r31, 0x06	; 6
 604:	ff 2e       	mov	r15, r31
 606:	f0 2d       	mov	r31, r0
 608:	0c e5       	ldi	r16, 0x5C	; 92
 60a:	16 e0       	ldi	r17, 0x06	; 6
 60c:	0f 2e       	mov	r0, r31
 60e:	f8 ee       	ldi	r31, 0xE8	; 232
 610:	cf 2e       	mov	r12, r31
 612:	f0 2d       	mov	r31, r0
 614:	0f 2e       	mov	r0, r31
 616:	f3 e0       	ldi	r31, 0x03	; 3
 618:	df 2e       	mov	r13, r31
 61a:	f0 2d       	mov	r31, r0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	af de       	rcall	.-674    	; 0x37e <serial_read>
 620:	8a 3a       	cpi	r24, 0xAA	; 170
 622:	c9 f4       	brne	.+50     	; 0x656 <runSensorThread+0x5a>
 624:	e7 01       	movw	r28, r14
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	aa de       	rcall	.-684    	; 0x37e <serial_read>
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	89 93       	st	Y+, r24
 62e:	99 93       	st	Y+, r25
 630:	c0 17       	cp	r28, r16
 632:	d1 07       	cpc	r29, r17
 634:	c1 f7       	brne	.-16     	; 0x626 <runSensorThread+0x2a>
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	a2 de       	rcall	.-700    	; 0x37e <serial_read>
 63a:	89 39       	cpi	r24, 0x99	; 153
 63c:	79 f7       	brne	.-34     	; 0x61c <runSensorThread+0x20>
 63e:	c9 df       	rcall	.-110    	; 0x5d2 <checkSum>
 640:	10 de       	rcall	.-992    	; 0x262 <resetState>
 642:	cc 2d       	mov	r28, r12
 644:	dd 2d       	mov	r29, r13
 646:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <period>
 64a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <period+0x1>
 64e:	71 d2       	rcall	.+1250   	; 0xb32 <x_delay>
 650:	21 97       	sbiw	r28, 0x01	; 1
 652:	c9 f7       	brne	.-14     	; 0x646 <runSensorThread+0x4a>
 654:	e3 cf       	rjmp	.-58     	; 0x61c <runSensorThread+0x20>
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	6b d2       	rcall	.+1238   	; 0xb32 <x_delay>
 65c:	df cf       	rjmp	.-66     	; 0x61c <runSensorThread+0x20>

0000065e <helpCommands>:
	}   
}

void helpCommands()
{
	serial_print("SET					returns the values of all the parameter settings (TLOW, THIGH, RATE, HEX, PERIOD). \r");
 65e:	8f e6       	ldi	r24, 0x6F	; 111
 660:	93 e0       	ldi	r25, 0x03	; 3
 662:	bd de       	rcall	.-646    	; 0x3de <serial_print>
	serial_print("SET ON				enables controller to send readings to host. \r");
 664:	8c ec       	ldi	r24, 0xCC	; 204
 666:	93 e0       	ldi	r25, 0x03	; 3
 668:	ba de       	rcall	.-652    	; 0x3de <serial_print>
	serial_print("SET OFF				disables controller from sending readings to host. \r");
 66a:	85 e0       	ldi	r24, 0x05	; 5
 66c:	94 e0       	ldi	r25, 0x04	; 4
 66e:	b7 de       	rcall	.-658    	; 0x3de <serial_print>
	serial_print("SET HEX=<ON or OFF>	switches reading format between ASCII and HEX. \r");
 670:	85 e4       	ldi	r24, 0x45	; 69
 672:	94 e0       	ldi	r25, 0x04	; 4
 674:	b4 de       	rcall	.-664    	; 0x3de <serial_print>
	serial_print("SET TLOW=<value>		low temperature setting. If temp is below this, LED/heater should be turned on. \r");
 676:	8a e8       	ldi	r24, 0x8A	; 138
 678:	94 e0       	ldi	r25, 0x04	; 4
 67a:	b1 de       	rcall	.-670    	; 0x3de <serial_print>
	serial_print("SET THIGH=<value> 	high temperature setting. If temp is above this, LED/heater should be turned off. \r");
 67c:	8e ee       	ldi	r24, 0xEE	; 238
 67e:	94 e0       	ldi	r25, 0x04	; 4
 680:	ae de       	rcall	.-676    	; 0x3de <serial_print>
	serial_print("SET PERIOD=<value>	time in seconds between readings sent to the host. An integer value not less than 2, not greater than 65535. \r");
 682:	85 e5       	ldi	r24, 0x55	; 85
 684:	95 e0       	ldi	r25, 0x05	; 5
 686:	ab ce       	rjmp	.-682    	; 0x3de <serial_print>
 688:	08 95       	ret

0000068a <readingThread>:
}
/***********************************************************************
* Handles user input from the terminal, and changes values accordingly
***********************************************************************/
void readingThread()
{
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	66 97       	sbiw	r28, 0x16	; 22
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
	char temp;
	while(1)
	{
		int top = 0;
		int conv = 1;
		if(UCSR0A & (1 << RXC0))							//if there is anything to read in RX0
 69e:	0f 2e       	mov	r0, r31
 6a0:	f0 ec       	ldi	r31, 0xC0	; 192
 6a2:	ef 2e       	mov	r14, r31
 6a4:	f1 2c       	mov	r15, r1
 6a6:	f0 2d       	mov	r31, r0
		{
			char buff[18] = "";
 6a8:	0f 2e       	mov	r0, r31
 6aa:	fe e0       	ldi	r31, 0x0E	; 14
 6ac:	5f 2e       	mov	r5, r31
 6ae:	f0 2d       	mov	r31, r0
 6b0:	6e 01       	movw	r12, r28
 6b2:	25 e0       	ldi	r18, 0x05	; 5
 6b4:	c2 0e       	add	r12, r18
 6b6:	d1 1c       	adc	r13, r1
			temp = ' ';
			
			for(int i = 0; i < 18; i++)
 6b8:	21 2c       	mov	r2, r1
 6ba:	31 2c       	mov	r3, r1
 6bc:	ce 01       	movw	r24, r28
 6be:	0c 96       	adiw	r24, 0x0c	; 12
 6c0:	9c 8b       	std	Y+20, r25	; 0x14
 6c2:	8b 8b       	std	Y+19, r24	; 0x13
				}
			}
			else if (strncmp(buff, "SET PERIOD", 10) == 0)	//set output period in seconds
			{
				period = 0;
				for(int x = top; x > 10; x--)
 6c4:	66 24       	eor	r6, r6
 6c6:	63 94       	inc	r6
 6c8:	71 2c       	mov	r7, r1
 6ca:	fe 01       	movw	r30, r28
 6cc:	3b 96       	adiw	r30, 0x0b	; 11
 6ce:	fe 8b       	std	Y+22, r31	; 0x16
 6d0:	ed 8b       	std	Y+21, r30	; 0x15
 6d2:	5e 01       	movw	r10, r28
 6d4:	fa e0       	ldi	r31, 0x0A	; 10
 6d6:	af 0e       	add	r10, r31
 6d8:	b1 1c       	adc	r11, r1
	char temp;
	while(1)
	{
		int top = 0;
		int conv = 1;
		if(UCSR0A & (1 << RXC0))							//if there is anything to read in RX0
 6da:	f7 01       	movw	r30, r14
 6dc:	80 81       	ld	r24, Z
 6de:	88 23       	and	r24, r24
 6e0:	0c f0       	brlt	.+2      	; 0x6e4 <readingThread+0x5a>
 6e2:	6e c1       	rjmp	.+732    	; 0x9c0 <readingThread+0x336>
		{
			char buff[18] = "";
 6e4:	19 82       	std	Y+1, r1	; 0x01
 6e6:	1a 82       	std	Y+2, r1	; 0x02
 6e8:	1b 82       	std	Y+3, r1	; 0x03
 6ea:	1c 82       	std	Y+4, r1	; 0x04
 6ec:	f6 01       	movw	r30, r12
 6ee:	25 2d       	mov	r18, r5
 6f0:	11 92       	st	Z+, r1
 6f2:	2a 95       	dec	r18
 6f4:	e9 f7       	brne	.-6      	; 0x6f0 <readingThread+0x66>
 6f6:	ce 01       	movw	r24, r28
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	4c 01       	movw	r8, r24
			temp = ' ';
			
			for(int i = 0; i < 18; i++)
 6fc:	81 01       	movw	r16, r2
			{
				temp = serial_read(0);
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	3e de       	rcall	.-900    	; 0x37e <serial_read>
 702:	48 2e       	mov	r4, r24
				serial_write(0, temp);						//show what is being sent
 704:	68 2f       	mov	r22, r24
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	e6 dd       	rcall	.-1076   	; 0x2d6 <serial_write>
				if (temp == '\n')							//read to end of line
 70a:	9a e0       	ldi	r25, 0x0A	; 10
 70c:	49 12       	cpse	r4, r25
 70e:	03 c0       	rjmp	.+6      	; 0x716 <readingThread+0x8c>
				{
					top = i - 2;							//for later use if there is a value being passed in
 710:	02 50       	subi	r16, 0x02	; 2
 712:	11 09       	sbc	r17, r1
					break;
 714:	0f c0       	rjmp	.+30     	; 0x734 <readingThread+0xaa>
				}
				else if ((temp >= 97) && (temp <= 122))		//if its lowercase conv to uppercase
 716:	8f e9       	ldi	r24, 0x9F	; 159
 718:	84 0d       	add	r24, r4
 71a:	8a 31       	cpi	r24, 0x1A	; 26
 71c:	10 f4       	brcc	.+4      	; 0x722 <readingThread+0x98>
				{
					temp -= 32;
 71e:	e0 ee       	ldi	r30, 0xE0	; 224
 720:	4e 0e       	add	r4, r30
				}
				buff[i] = temp;
 722:	f4 01       	movw	r30, r8
 724:	41 92       	st	Z+, r4
 726:	4f 01       	movw	r8, r30
		if(UCSR0A & (1 << RXC0))							//if there is anything to read in RX0
		{
			char buff[18] = "";
			temp = ' ';
			
			for(int i = 0; i < 18; i++)
 728:	0f 5f       	subi	r16, 0xFF	; 255
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
 72c:	02 31       	cpi	r16, 0x12	; 18
 72e:	11 05       	cpc	r17, r1
 730:	31 f7       	brne	.-52     	; 0x6fe <readingThread+0x74>
void readingThread()
{
	char temp;
	while(1)
	{
		int top = 0;
 732:	81 01       	movw	r16, r2
					temp -= 32;
				}
				buff[i] = temp;
			}
			
			if (strncmp(buff, "HELP", 4) == 0)				//help function
 734:	44 e0       	ldi	r20, 0x04	; 4
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	67 ed       	ldi	r22, 0xD7	; 215
 73a:	75 e0       	ldi	r23, 0x05	; 5
 73c:	ce 01       	movw	r24, r28
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	04 d3       	rcall	.+1544   	; 0xd4a <strncmp>
 742:	89 2b       	or	r24, r25
 744:	11 f4       	brne	.+4      	; 0x74a <readingThread+0xc0>
			{
				helpCommands();
 746:	8b df       	rcall	.-234    	; 0x65e <helpCommands>
 748:	3b c1       	rjmp	.+630    	; 0x9c0 <readingThread+0x336>
			}
			else if (strncmp(buff, "SET ON", 6) == 0)		//send readings to host
 74a:	46 e0       	ldi	r20, 0x06	; 6
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	6c ed       	ldi	r22, 0xDC	; 220
 750:	75 e0       	ldi	r23, 0x05	; 5
 752:	ce 01       	movw	r24, r28
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	f9 d2       	rcall	.+1522   	; 0xd4a <strncmp>
 758:	89 2b       	or	r24, r25
 75a:	21 f4       	brne	.+8      	; 0x764 <readingThread+0xda>
			{
				readings = 1;
 75c:	f1 e0       	ldi	r31, 0x01	; 1
 75e:	f0 93 0e 02 	sts	0x020E, r31	; 0x80020e <readings>
 762:	2e c1       	rjmp	.+604    	; 0x9c0 <readingThread+0x336>
			}
			else if (strncmp(buff, "SET OFF", 7) == 0)		//don't send readings to host
 764:	47 e0       	ldi	r20, 0x07	; 7
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	63 ee       	ldi	r22, 0xE3	; 227
 76a:	75 e0       	ldi	r23, 0x05	; 5
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	ec d2       	rcall	.+1496   	; 0xd4a <strncmp>
 772:	89 2b       	or	r24, r25
 774:	19 f4       	brne	.+6      	; 0x77c <readingThread+0xf2>
			{
				readings = 0;
 776:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <readings>
 77a:	22 c1       	rjmp	.+580    	; 0x9c0 <readingThread+0x336>
			}
			else if (strncmp(buff, "SET HEX", 7) == 0)		//Output in hex
 77c:	47 e0       	ldi	r20, 0x07	; 7
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	6b ee       	ldi	r22, 0xEB	; 235
 782:	75 e0       	ldi	r23, 0x05	; 5
 784:	ce 01       	movw	r24, r28
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	e0 d2       	rcall	.+1472   	; 0xd4a <strncmp>
 78a:	89 2b       	or	r24, r25
 78c:	61 f4       	brne	.+24     	; 0x7a6 <readingThread+0x11c>
			{
				if(readings == 2)
 78e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <readings>
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	21 f4       	brne	.+8      	; 0x79e <readingThread+0x114>
				{
					readings = 1;
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <readings>
 79c:	11 c1       	rjmp	.+546    	; 0x9c0 <readingThread+0x336>
				}
				else
				{
					readings = 2;
 79e:	32 e0       	ldi	r19, 0x02	; 2
 7a0:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <readings>
 7a4:	0d c1       	rjmp	.+538    	; 0x9c0 <readingThread+0x336>
				}
			}
			else if (strncmp(buff, "SET TLOW", 8) == 0)		//low limit set
 7a6:	48 e0       	ldi	r20, 0x08	; 8
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	63 ef       	ldi	r22, 0xF3	; 243
 7ac:	75 e0       	ldi	r23, 0x05	; 5
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	cb d2       	rcall	.+1430   	; 0xd4a <strncmp>
 7b4:	89 2b       	or	r24, r25
 7b6:	b1 f5       	brne	.+108    	; 0x824 <readingThread+0x19a>
			{
				tLow = 0;
 7b8:	30 92 0b 02 	sts	0x020B, r3	; 0x80020b <tLow+0x1>
 7bc:	20 92 0a 02 	sts	0x020A, r2	; 0x80020a <tLow>
				for(int x = top; x > 8; x--)				//handles conversion from chars to int
 7c0:	09 30       	cpi	r16, 0x09	; 9
 7c2:	11 05       	cpc	r17, r1
 7c4:	0c f4       	brge	.+2      	; 0x7c8 <readingThread+0x13e>
 7c6:	fc c0       	rjmp	.+504    	; 0x9c0 <readingThread+0x336>
 7c8:	0f 5f       	subi	r16, 0xFF	; 255
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	e1 e0       	ldi	r30, 0x01	; 1
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	ec 0f       	add	r30, r28
 7d2:	fd 1f       	adc	r31, r29
 7d4:	e0 0f       	add	r30, r16
 7d6:	f1 1f       	adc	r31, r17
 7d8:	86 2d       	mov	r24, r6
 7da:	97 2d       	mov	r25, r7
				{
					tLow += (((int)buff[x]) - 48)*conv;
 7dc:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <tLow>
 7e0:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <tLow+0x1>
 7e4:	22 91       	ld	r18, -Z
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	20 53       	subi	r18, 0x30	; 48
 7ea:	31 09       	sbc	r19, r1
 7ec:	28 9f       	mul	r18, r24
 7ee:	b0 01       	movw	r22, r0
 7f0:	29 9f       	mul	r18, r25
 7f2:	70 0d       	add	r23, r0
 7f4:	38 9f       	mul	r19, r24
 7f6:	70 0d       	add	r23, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	46 0f       	add	r20, r22
 7fc:	57 1f       	adc	r21, r23
 7fe:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <tLow+0x1>
 802:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <tLow>
					conv *= 10;
 806:	9c 01       	movw	r18, r24
 808:	22 0f       	add	r18, r18
 80a:	33 1f       	adc	r19, r19
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	82 0f       	add	r24, r18
 81a:	93 1f       	adc	r25, r19
				}
			}
			else if (strncmp(buff, "SET TLOW", 8) == 0)		//low limit set
			{
				tLow = 0;
				for(int x = top; x > 8; x--)				//handles conversion from chars to int
 81c:	ea 15       	cp	r30, r10
 81e:	fb 05       	cpc	r31, r11
 820:	e9 f6       	brne	.-70     	; 0x7dc <readingThread+0x152>
 822:	ce c0       	rjmp	.+412    	; 0x9c0 <readingThread+0x336>
				{
					tLow += (((int)buff[x]) - 48)*conv;
					conv *= 10;
				}
			}
			else if (strncmp(buff, "SET THIGH", 9) == 0)	//high limit set
 824:	49 e0       	ldi	r20, 0x09	; 9
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	6c ef       	ldi	r22, 0xFC	; 252
 82a:	75 e0       	ldi	r23, 0x05	; 5
 82c:	ce 01       	movw	r24, r28
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	8c d2       	rcall	.+1304   	; 0xd4a <strncmp>
 832:	89 2b       	or	r24, r25
 834:	c1 f5       	brne	.+112    	; 0x8a6 <readingThread+0x21c>
			{
				tHigh = 0;
 836:	30 92 0d 02 	sts	0x020D, r3	; 0x80020d <tHigh+0x1>
 83a:	20 92 0c 02 	sts	0x020C, r2	; 0x80020c <tHigh>
				for(int x = top; x > 9; x--)
 83e:	0a 30       	cpi	r16, 0x0A	; 10
 840:	11 05       	cpc	r17, r1
 842:	0c f4       	brge	.+2      	; 0x846 <readingThread+0x1bc>
 844:	bd c0       	rjmp	.+378    	; 0x9c0 <readingThread+0x336>
 846:	0f 5f       	subi	r16, 0xFF	; 255
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	e1 e0       	ldi	r30, 0x01	; 1
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	ec 0f       	add	r30, r28
 850:	fd 1f       	adc	r31, r29
 852:	e0 0f       	add	r30, r16
 854:	f1 1f       	adc	r31, r17
 856:	86 2d       	mov	r24, r6
 858:	97 2d       	mov	r25, r7
				{
					tHigh += (((int)buff[x]) - 48)*conv;
 85a:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <tHigh>
 85e:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <tHigh+0x1>
 862:	22 91       	ld	r18, -Z
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	20 53       	subi	r18, 0x30	; 48
 868:	31 09       	sbc	r19, r1
 86a:	28 9f       	mul	r18, r24
 86c:	b0 01       	movw	r22, r0
 86e:	29 9f       	mul	r18, r25
 870:	70 0d       	add	r23, r0
 872:	38 9f       	mul	r19, r24
 874:	70 0d       	add	r23, r0
 876:	11 24       	eor	r1, r1
 878:	46 0f       	add	r20, r22
 87a:	57 1f       	adc	r21, r23
 87c:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <tHigh+0x1>
 880:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <tHigh>
					conv *= 10;
 884:	9c 01       	movw	r18, r24
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	82 0f       	add	r24, r18
 898:	93 1f       	adc	r25, r19
				}
			}
			else if (strncmp(buff, "SET THIGH", 9) == 0)	//high limit set
			{
				tHigh = 0;
				for(int x = top; x > 9; x--)
 89a:	2d 89       	ldd	r18, Y+21	; 0x15
 89c:	3e 89       	ldd	r19, Y+22	; 0x16
 89e:	e2 17       	cp	r30, r18
 8a0:	f3 07       	cpc	r31, r19
 8a2:	d9 f6       	brne	.-74     	; 0x85a <readingThread+0x1d0>
 8a4:	8d c0       	rjmp	.+282    	; 0x9c0 <readingThread+0x336>
				{
					tHigh += (((int)buff[x]) - 48)*conv;
					conv *= 10;
				}
			}
			else if (strncmp(buff, "SET PERIOD", 10) == 0)	//set output period in seconds
 8a6:	4a e0       	ldi	r20, 0x0A	; 10
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	66 e0       	ldi	r22, 0x06	; 6
 8ac:	76 e0       	ldi	r23, 0x06	; 6
 8ae:	ce 01       	movw	r24, r28
 8b0:	01 96       	adiw	r24, 0x01	; 1
 8b2:	4b d2       	rcall	.+1174   	; 0xd4a <strncmp>
 8b4:	89 2b       	or	r24, r25
 8b6:	c1 f5       	brne	.+112    	; 0x928 <readingThread+0x29e>
			{
				period = 0;
 8b8:	30 92 09 02 	sts	0x0209, r3	; 0x800209 <period+0x1>
 8bc:	20 92 08 02 	sts	0x0208, r2	; 0x800208 <period>
				for(int x = top; x > 10; x--)
 8c0:	0b 30       	cpi	r16, 0x0B	; 11
 8c2:	11 05       	cpc	r17, r1
 8c4:	0c f4       	brge	.+2      	; 0x8c8 <readingThread+0x23e>
 8c6:	7c c0       	rjmp	.+248    	; 0x9c0 <readingThread+0x336>
 8c8:	0f 5f       	subi	r16, 0xFF	; 255
 8ca:	1f 4f       	sbci	r17, 0xFF	; 255
 8cc:	e1 e0       	ldi	r30, 0x01	; 1
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	ec 0f       	add	r30, r28
 8d2:	fd 1f       	adc	r31, r29
 8d4:	e0 0f       	add	r30, r16
 8d6:	f1 1f       	adc	r31, r17
 8d8:	86 2d       	mov	r24, r6
 8da:	97 2d       	mov	r25, r7
				{
					period += (((int)buff[x]) - 48)*conv;
 8dc:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <period>
 8e0:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <period+0x1>
 8e4:	22 91       	ld	r18, -Z
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	20 53       	subi	r18, 0x30	; 48
 8ea:	31 09       	sbc	r19, r1
 8ec:	28 9f       	mul	r18, r24
 8ee:	a0 01       	movw	r20, r0
 8f0:	29 9f       	mul	r18, r25
 8f2:	50 0d       	add	r21, r0
 8f4:	38 9f       	mul	r19, r24
 8f6:	50 0d       	add	r21, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	46 0f       	add	r20, r22
 8fc:	57 1f       	adc	r21, r23
 8fe:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <period+0x1>
 902:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <period>
					conv *= 10;
 906:	9c 01       	movw	r18, r24
 908:	22 0f       	add	r18, r18
 90a:	33 1f       	adc	r19, r19
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	82 0f       	add	r24, r18
 91a:	93 1f       	adc	r25, r19
				}
			}
			else if (strncmp(buff, "SET PERIOD", 10) == 0)	//set output period in seconds
			{
				period = 0;
				for(int x = top; x > 10; x--)
 91c:	2b 89       	ldd	r18, Y+19	; 0x13
 91e:	3c 89       	ldd	r19, Y+20	; 0x14
 920:	e2 17       	cp	r30, r18
 922:	f3 07       	cpc	r31, r19
 924:	d9 f6       	brne	.-74     	; 0x8dc <readingThread+0x252>
 926:	4c c0       	rjmp	.+152    	; 0x9c0 <readingThread+0x336>
				{
					period += (((int)buff[x]) - 48)*conv;
					conv *= 10;
				}
			}
			else if (strncmp(buff, "SET", 3) == 0)			//gives values of current variables
 928:	43 e0       	ldi	r20, 0x03	; 3
 92a:	50 e0       	ldi	r21, 0x00	; 0
 92c:	61 e1       	ldi	r22, 0x11	; 17
 92e:	76 e0       	ldi	r23, 0x06	; 6
 930:	ce 01       	movw	r24, r28
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	0a d2       	rcall	.+1044   	; 0xd4a <strncmp>
 936:	89 2b       	or	r24, r25
 938:	09 f0       	breq	.+2      	; 0x93c <readingThread+0x2b2>
 93a:	3f c0       	rjmp	.+126    	; 0x9ba <readingThread+0x330>
			{
				
				itoa(tLow, buff, 10);
 93c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <tLow>
 940:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <tLow+0x1>
 944:	4a e0       	ldi	r20, 0x0A	; 10
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	be 01       	movw	r22, r28
 94a:	6f 5f       	subi	r22, 0xFF	; 255
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	0b d2       	rcall	.+1046   	; 0xd66 <itoa>
				serial_print("tLow: ");
 950:	85 e1       	ldi	r24, 0x15	; 21
 952:	96 e0       	ldi	r25, 0x06	; 6
 954:	44 dd       	rcall	.-1400   	; 0x3de <serial_print>
				serial_print(buff);
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	41 dd       	rcall	.-1406   	; 0x3de <serial_print>
				
				itoa(tHigh, buff, 10);
 95c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tHigh>
 960:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <tHigh+0x1>
 964:	4a e0       	ldi	r20, 0x0A	; 10
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	be 01       	movw	r22, r28
 96a:	6f 5f       	subi	r22, 0xFF	; 255
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	fb d1       	rcall	.+1014   	; 0xd66 <itoa>
				serial_print("  tHigh: ");
 970:	8c e1       	ldi	r24, 0x1C	; 28
 972:	96 e0       	ldi	r25, 0x06	; 6
 974:	34 dd       	rcall	.-1432   	; 0x3de <serial_print>
				serial_print(buff);
 976:	ce 01       	movw	r24, r28
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	31 dd       	rcall	.-1438   	; 0x3de <serial_print>
				
				if (readings == 1)
 97c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <readings>
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	21 f4       	brne	.+8      	; 0x98c <readingThread+0x302>
				{
					serial_print("  decimal");
 984:	86 e2       	ldi	r24, 0x26	; 38
 986:	96 e0       	ldi	r25, 0x06	; 6
 988:	2a dd       	rcall	.-1452   	; 0x3de <serial_print>
 98a:	03 c0       	rjmp	.+6      	; 0x992 <readingThread+0x308>
				}
				else
				{
					serial_print("  HEX");
 98c:	80 e3       	ldi	r24, 0x30	; 48
 98e:	96 e0       	ldi	r25, 0x06	; 6
 990:	26 dd       	rcall	.-1460   	; 0x3de <serial_print>
				}
				
				utoa(period, buff, 10);
 992:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <period>
 996:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <period+0x1>
 99a:	4a e0       	ldi	r20, 0x0A	; 10
 99c:	50 e0       	ldi	r21, 0x00	; 0
 99e:	be 01       	movw	r22, r28
 9a0:	6f 5f       	subi	r22, 0xFF	; 255
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	1f d2       	rcall	.+1086   	; 0xde4 <utoa>
				serial_print("  period: ");
 9a6:	86 e3       	ldi	r24, 0x36	; 54
 9a8:	96 e0       	ldi	r25, 0x06	; 6
 9aa:	19 dd       	rcall	.-1486   	; 0x3de <serial_print>
				serial_print(buff);
 9ac:	ce 01       	movw	r24, r28
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	16 dd       	rcall	.-1492   	; 0x3de <serial_print>
				
				serial_print("  \r");
 9b2:	81 e4       	ldi	r24, 0x41	; 65
 9b4:	96 e0       	ldi	r25, 0x06	; 6
 9b6:	13 dd       	rcall	.-1498   	; 0x3de <serial_print>
 9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <readingThread+0x336>
			}
			else											//no know command
			{
				serial_print("???\r");
 9ba:	85 e4       	ldi	r24, 0x45	; 69
 9bc:	96 e0       	ldi	r25, 0x06	; 6
 9be:	0f dd       	rcall	.-1506   	; 0x3de <serial_print>
			}
		}
		x_delay(1);
 9c0:	86 2d       	mov	r24, r6
 9c2:	97 2d       	mov	r25, r7
 9c4:	b6 d0       	rcall	.+364    	; 0xb32 <x_delay>
	}
 9c6:	89 ce       	rjmp	.-750    	; 0x6da <readingThread+0x50>

000009c8 <x_new>:
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	c8 2f       	mov	r28, r24
 9ce:	d4 2f       	mov	r29, r20
 9d0:	e8 2f       	mov	r30, r24
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	ee 0f       	add	r30, r30
 9d6:	ff 1f       	adc	r31, r31
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	9f 01       	movw	r18, r30
 9de:	22 5a       	subi	r18, 0xA2	; 162
 9e0:	39 4f       	sbci	r19, 0xF9	; 249
 9e2:	f9 01       	movw	r30, r18
 9e4:	a2 81       	ldd	r26, Z+2	; 0x02
 9e6:	b3 81       	ldd	r27, Z+3	; 0x03
 9e8:	6c 93       	st	X, r22
 9ea:	cd 01       	movw	r24, r26
 9ec:	01 97       	sbiw	r24, 0x01	; 1
 9ee:	fc 01       	movw	r30, r24
 9f0:	70 83       	st	Z, r23
 9f2:	01 97       	sbiw	r24, 0x01	; 1
 9f4:	fc 01       	movw	r30, r24
 9f6:	10 82       	st	Z, r1
 9f8:	55 97       	sbiw	r26, 0x15	; 21
 9fa:	f9 01       	movw	r30, r18
 9fc:	b1 83       	std	Z+1, r27	; 0x01
 9fe:	a0 83       	st	Z, r26
 a00:	8c 2f       	mov	r24, r28
 a02:	ff db       	rcall	.-2050   	; 0x202 <bit2mask8>
 a04:	dd 23       	and	r29, r29
 a06:	41 f0       	breq	.+16     	; 0xa18 <x_new+0x50>
 a08:	98 2f       	mov	r25, r24
 a0a:	90 95       	com	r25
 a0c:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <x_disable_status>
 a10:	98 23       	and	r25, r24
 a12:	90 93 8f 0e 	sts	0x0E8F, r25	; 0x800e8f <x_disable_status>
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <x_new+0x5a>
 a18:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <x_disable_status>
 a1c:	98 2b       	or	r25, r24
 a1e:	90 93 8f 0e 	sts	0x0E8F, r25	; 0x800e8f <x_disable_status>
 a22:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <x_thread_id>
 a26:	c8 13       	cpse	r28, r24
 a28:	01 c0       	rjmp	.+2      	; 0xa2c <x_new+0x64>
 a2a:	ac db       	rcall	.-2216   	; 0x184 <x_schedule>
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	08 95       	ret

00000a32 <init_System_Timer>:
 a32:	82 e0       	ldi	r24, 0x02	; 2
 a34:	84 bd       	out	0x24, r24	; 36
 a36:	9a ef       	ldi	r25, 0xFA	; 250
 a38:	97 bd       	out	0x27, r25	; 39
 a3a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 a3e:	83 e0       	ldi	r24, 0x03	; 3
 a40:	85 bd       	out	0x25, r24	; 37
 a42:	08 95       	ret

00000a44 <x_init>:
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	f8 94       	cli
 a4a:	8e ef       	ldi	r24, 0xFE	; 254
 a4c:	80 93 8f 0e 	sts	0x0E8F, r24	; 0x800e8f <x_disable_status>
 a50:	10 92 7e 06 	sts	0x067E, r1	; 0x80067e <x_suspend_status>
 a54:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <x_delay_status>
 a58:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <x_thread_id>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	80 93 90 0e 	sts	0x0E90, r24	; 0x800e90 <x_thread_mask>
 a62:	ce e5       	ldi	r28, 0x5E	; 94
 a64:	d6 e0       	ldi	r29, 0x06	; 6
 a66:	8e e7       	ldi	r24, 0x7E	; 126
 a68:	97 e0       	ldi	r25, 0x07	; 7
 a6a:	99 83       	std	Y+1, r25	; 0x01
 a6c:	88 83       	st	Y, r24
 a6e:	9b 83       	std	Y+3, r25	; 0x03
 a70:	8a 83       	std	Y+2, r24	; 0x02
 a72:	8e e7       	ldi	r24, 0x7E	; 126
 a74:	98 e0       	ldi	r25, 0x08	; 8
 a76:	9d 83       	std	Y+5, r25	; 0x05
 a78:	8c 83       	std	Y+4, r24	; 0x04
 a7a:	9f 83       	std	Y+7, r25	; 0x07
 a7c:	8e 83       	std	Y+6, r24	; 0x06
 a7e:	8e e7       	ldi	r24, 0x7E	; 126
 a80:	99 e0       	ldi	r25, 0x09	; 9
 a82:	99 87       	std	Y+9, r25	; 0x09
 a84:	88 87       	std	Y+8, r24	; 0x08
 a86:	9b 87       	std	Y+11, r25	; 0x0b
 a88:	8a 87       	std	Y+10, r24	; 0x0a
 a8a:	8e e7       	ldi	r24, 0x7E	; 126
 a8c:	9a e0       	ldi	r25, 0x0A	; 10
 a8e:	9d 87       	std	Y+13, r25	; 0x0d
 a90:	8c 87       	std	Y+12, r24	; 0x0c
 a92:	9f 87       	std	Y+15, r25	; 0x0f
 a94:	8e 87       	std	Y+14, r24	; 0x0e
 a96:	8e e7       	ldi	r24, 0x7E	; 126
 a98:	9b e0       	ldi	r25, 0x0B	; 11
 a9a:	99 8b       	std	Y+17, r25	; 0x11
 a9c:	88 8b       	std	Y+16, r24	; 0x10
 a9e:	9b 8b       	std	Y+19, r25	; 0x13
 aa0:	8a 8b       	std	Y+18, r24	; 0x12
 aa2:	8e e7       	ldi	r24, 0x7E	; 126
 aa4:	9c e0       	ldi	r25, 0x0C	; 12
 aa6:	9d 8b       	std	Y+21, r25	; 0x15
 aa8:	8c 8b       	std	Y+20, r24	; 0x14
 aaa:	9f 8b       	std	Y+23, r25	; 0x17
 aac:	8e 8b       	std	Y+22, r24	; 0x16
 aae:	8e e7       	ldi	r24, 0x7E	; 126
 ab0:	9d e0       	ldi	r25, 0x0D	; 13
 ab2:	99 8f       	std	Y+25, r25	; 0x19
 ab4:	88 8f       	std	Y+24, r24	; 0x18
 ab6:	9b 8f       	std	Y+27, r25	; 0x1b
 ab8:	8a 8f       	std	Y+26, r24	; 0x1a
 aba:	8e e7       	ldi	r24, 0x7E	; 126
 abc:	9e e0       	ldi	r25, 0x0E	; 14
 abe:	9d 8f       	std	Y+29, r25	; 0x1d
 ac0:	8c 8f       	std	Y+28, r24	; 0x1c
 ac2:	9f 8f       	std	Y+31, r25	; 0x1f
 ac4:	8e 8f       	std	Y+30, r24	; 0x1e
 ac6:	8a ea       	ldi	r24, 0xAA	; 170
 ac8:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <x_thread_stacks>
 acc:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <x_thread_stacks+0x100>
 ad0:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <x_thread_stacks+0x200>
 ad4:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <x_thread_stacks+0x300>
 ad8:	80 93 7f 0a 	sts	0x0A7F, r24	; 0x800a7f <x_thread_stacks+0x400>
 adc:	80 93 7f 0b 	sts	0x0B7F, r24	; 0x800b7f <x_thread_stacks+0x500>
 ae0:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <x_thread_stacks+0x600>
 ae4:	80 93 7f 0d 	sts	0x0D7F, r24	; 0x800d7f <x_thread_stacks+0x700>
 ae8:	a4 df       	rcall	.-184    	; 0xa32 <init_System_Timer>
 aea:	ed b7       	in	r30, 0x3d	; 61
 aec:	fe b7       	in	r31, 0x3e	; 62
 aee:	a8 81       	ld	r26, Y
 af0:	b9 81       	ldd	r27, Y+1	; 0x01
 af2:	85 81       	ldd	r24, Z+5	; 0x05
 af4:	8c 93       	st	X, r24
 af6:	a8 81       	ld	r26, Y
 af8:	b9 81       	ldd	r27, Y+1	; 0x01
 afa:	84 81       	ldd	r24, Z+4	; 0x04
 afc:	11 97       	sbiw	r26, 0x01	; 1
 afe:	8c 93       	st	X, r24
 b00:	a8 81       	ld	r26, Y
 b02:	b9 81       	ldd	r27, Y+1	; 0x01
 b04:	83 81       	ldd	r24, Z+3	; 0x03
 b06:	12 97       	sbiw	r26, 0x02	; 2
 b08:	8c 93       	st	X, r24
 b0a:	a8 81       	ld	r26, Y
 b0c:	b9 81       	ldd	r27, Y+1	; 0x01
 b0e:	82 81       	ldd	r24, Z+2	; 0x02
 b10:	13 97       	sbiw	r26, 0x03	; 3
 b12:	8c 93       	st	X, r24
 b14:	88 81       	ld	r24, Y
 b16:	99 81       	ldd	r25, Y+1	; 0x01
 b18:	21 81       	ldd	r18, Z+1	; 0x01
 b1a:	fc 01       	movw	r30, r24
 b1c:	34 97       	sbiw	r30, 0x04	; 4
 b1e:	20 83       	st	Z, r18
 b20:	88 81       	ld	r24, Y
 b22:	99 81       	ldd	r25, Y+1	; 0x01
 b24:	05 97       	sbiw	r24, 0x05	; 5
 b26:	9e bf       	out	0x3e, r25	; 62
 b28:	8d bf       	out	0x3d, r24	; 61
 b2a:	78 94       	sei
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	08 95       	ret

00000b32 <x_delay>:
 b32:	9c 01       	movw	r18, r24
 b34:	9f b7       	in	r25, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	e0 91 5c 06 	lds	r30, 0x065C	; 0x80065c <x_thread_id>
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	ee 0f       	add	r30, r30
 b40:	ff 1f       	adc	r31, r31
 b42:	e1 58       	subi	r30, 0x81	; 129
 b44:	f1 4f       	sbci	r31, 0xF1	; 241
 b46:	31 83       	std	Z+1, r19	; 0x01
 b48:	20 83       	st	Z, r18
 b4a:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <x_delay_status>
 b4e:	80 91 90 0e 	lds	r24, 0x0E90	; 0x800e90 <x_thread_mask>
 b52:	82 2b       	or	r24, r18
 b54:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <x_delay_status>
 b58:	9f bf       	out	0x3f, r25	; 63
 b5a:	e4 ca       	rjmp	.-2616   	; 0x124 <x_yield>
 b5c:	08 95       	ret

00000b5e <x_gtime>:
 b5e:	2f b7       	in	r18, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	60 91 4a 06 	lds	r22, 0x064A	; 0x80064a <__data_end>
 b66:	70 91 4b 06 	lds	r23, 0x064B	; 0x80064b <__data_end+0x1>
 b6a:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <__data_end+0x2>
 b6e:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <__data_end+0x3>
 b72:	2f bf       	out	0x3f, r18	; 63
 b74:	08 95       	ret

00000b76 <__vector_21>:
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	0b b6       	in	r0, 0x3b	; 59
 b82:	0f 92       	push	r0
 b84:	2f 93       	push	r18
 b86:	3f 93       	push	r19
 b88:	4f 93       	push	r20
 b8a:	5f 93       	push	r21
 b8c:	8f 93       	push	r24
 b8e:	9f 93       	push	r25
 b90:	af 93       	push	r26
 b92:	bf 93       	push	r27
 b94:	ef 93       	push	r30
 b96:	ff 93       	push	r31
 b98:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <__data_end>
 b9c:	90 91 4b 06 	lds	r25, 0x064B	; 0x80064b <__data_end+0x1>
 ba0:	a0 91 4c 06 	lds	r26, 0x064C	; 0x80064c <__data_end+0x2>
 ba4:	b0 91 4d 06 	lds	r27, 0x064D	; 0x80064d <__data_end+0x3>
 ba8:	01 96       	adiw	r24, 0x01	; 1
 baa:	a1 1d       	adc	r26, r1
 bac:	b1 1d       	adc	r27, r1
 bae:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__data_end>
 bb2:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <__data_end+0x1>
 bb6:	a0 93 4c 06 	sts	0x064C, r26	; 0x80064c <__data_end+0x2>
 bba:	b0 93 4d 06 	sts	0x064D, r27	; 0x80064d <__data_end+0x3>
 bbe:	30 91 5d 06 	lds	r19, 0x065D	; 0x80065d <x_delay_status>
 bc2:	ef e7       	ldi	r30, 0x7F	; 127
 bc4:	fe e0       	ldi	r31, 0x0E	; 14
 bc6:	4f e8       	ldi	r20, 0x8F	; 143
 bc8:	5e e0       	ldi	r21, 0x0E	; 14
 bca:	21 e0       	ldi	r18, 0x01	; 1
 bcc:	80 81       	ld	r24, Z
 bce:	91 81       	ldd	r25, Z+1	; 0x01
 bd0:	01 97       	sbiw	r24, 0x01	; 1
 bd2:	81 93       	st	Z+, r24
 bd4:	91 93       	st	Z+, r25
 bd6:	89 2b       	or	r24, r25
 bd8:	19 f4       	brne	.+6      	; 0xbe0 <__vector_21+0x6a>
 bda:	82 2f       	mov	r24, r18
 bdc:	80 95       	com	r24
 bde:	38 23       	and	r19, r24
 be0:	22 0f       	add	r18, r18
 be2:	e4 17       	cp	r30, r20
 be4:	f5 07       	cpc	r31, r21
 be6:	91 f7       	brne	.-28     	; 0xbcc <__vector_21+0x56>
 be8:	30 93 5d 06 	sts	0x065D, r19	; 0x80065d <x_delay_status>
 bec:	ff 91       	pop	r31
 bee:	ef 91       	pop	r30
 bf0:	bf 91       	pop	r27
 bf2:	af 91       	pop	r26
 bf4:	9f 91       	pop	r25
 bf6:	8f 91       	pop	r24
 bf8:	5f 91       	pop	r21
 bfa:	4f 91       	pop	r20
 bfc:	3f 91       	pop	r19
 bfe:	2f 91       	pop	r18
 c00:	0f 90       	pop	r0
 c02:	0b be       	out	0x3b, r0	; 59
 c04:	0f 90       	pop	r0
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	0f 90       	pop	r0
 c0a:	1f 90       	pop	r1
 c0c:	18 95       	reti

00000c0e <x_stack_overflow>:
 c0e:	ac 01       	movw	r20, r24
 c10:	27 9a       	sbi	0x04, 7	; 4
 c12:	2f 98       	cbi	0x05, 7	; 5
   must be defined before including this header file. Also, the
   backward compatible algorithm will be chosen if the code is
   compiled in a <em>freestanding environment</em> (GCC option
   \c -ffreestanding), as the math functions required for rounding are
   not available to the compiler then.

 c14:	2f ef       	ldi	r18, 0xFF	; 255
 c16:	31 ee       	ldi	r19, 0xE1	; 225
 c18:	74 e0       	ldi	r23, 0x04	; 4
 c1a:	21 50       	subi	r18, 0x01	; 1
 c1c:	30 40       	sbci	r19, 0x00	; 0
 c1e:	70 40       	sbci	r23, 0x00	; 0
 c20:	e1 f7       	brne	.-8      	; 0xc1a <x_stack_overflow+0xc>
 c22:	00 c0       	rjmp	.+0      	; 0xc24 <x_stack_overflow+0x16>
 c24:	00 00       	nop
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	80 e0       	ldi	r24, 0x00	; 0
 c2a:	55 23       	and	r21, r21
 c2c:	fc f0       	brlt	.+62     	; 0xc6c <x_stack_overflow+0x5e>
 c2e:	26 2f       	mov	r18, r22
 c30:	38 2f       	mov	r19, r24
 c32:	95 b1       	in	r25, 0x05	; 5
 c34:	90 58       	subi	r25, 0x80	; 128
 c36:	95 b9       	out	0x05, r25	; 5
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	e0 e7       	ldi	r30, 0x70	; 112
 c3c:	72 e0       	ldi	r23, 0x02	; 2
 c3e:	91 50       	subi	r25, 0x01	; 1
 c40:	e0 40       	sbci	r30, 0x00	; 0
 c42:	70 40       	sbci	r23, 0x00	; 0
 c44:	e1 f7       	brne	.-8      	; 0xc3e <x_stack_overflow+0x30>
 c46:	00 c0       	rjmp	.+0      	; 0xc48 <x_stack_overflow+0x3a>
 c48:	00 00       	nop
 c4a:	95 b1       	in	r25, 0x05	; 5
 c4c:	90 58       	subi	r25, 0x80	; 128
 c4e:	95 b9       	out	0x05, r25	; 5
 c50:	9f ef       	ldi	r25, 0xFF	; 255
 c52:	e9 e6       	ldi	r30, 0x69	; 105
 c54:	78 e1       	ldi	r23, 0x18	; 24
 c56:	91 50       	subi	r25, 0x01	; 1
 c58:	e0 40       	sbci	r30, 0x00	; 0
 c5a:	70 40       	sbci	r23, 0x00	; 0
 c5c:	e1 f7       	brne	.-8      	; 0xc56 <x_stack_overflow+0x48>
 c5e:	00 c0       	rjmp	.+0      	; 0xc60 <x_stack_overflow+0x52>
 c60:	00 00       	nop
 c62:	2f 5f       	subi	r18, 0xFF	; 255
 c64:	3f 4f       	sbci	r19, 0xFF	; 255
 c66:	42 17       	cp	r20, r18
 c68:	53 07       	cpc	r21, r19
 c6a:	1c f7       	brge	.-58     	; 0xc32 <x_stack_overflow+0x24>
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	e3 e2       	ldi	r30, 0x23	; 35
 c70:	24 ef       	ldi	r18, 0xF4	; 244
 c72:	91 50       	subi	r25, 0x01	; 1
 c74:	e0 40       	sbci	r30, 0x00	; 0
 c76:	20 40       	sbci	r18, 0x00	; 0
 c78:	e1 f7       	brne	.-8      	; 0xc72 <x_stack_overflow+0x64>
 c7a:	00 c0       	rjmp	.+0      	; 0xc7c <x_stack_overflow+0x6e>
 c7c:	00 00       	nop
 c7e:	d5 cf       	rjmp	.-86     	; 0xc2a <x_stack_overflow+0x1c>

00000c80 <__divmodhi4>:
 c80:	97 fb       	bst	r25, 7
 c82:	07 2e       	mov	r0, r23
 c84:	16 f4       	brtc	.+4      	; 0xc8a <__divmodhi4+0xa>
 c86:	00 94       	com	r0
 c88:	06 d0       	rcall	.+12     	; 0xc96 <__divmodhi4_neg1>
 c8a:	77 fd       	sbrc	r23, 7
 c8c:	08 d0       	rcall	.+16     	; 0xc9e <__divmodhi4_neg2>
 c8e:	27 d0       	rcall	.+78     	; 0xcde <__udivmodhi4>
 c90:	07 fc       	sbrc	r0, 7
 c92:	05 d0       	rcall	.+10     	; 0xc9e <__divmodhi4_neg2>
 c94:	3e f4       	brtc	.+14     	; 0xca4 <__divmodhi4_exit>

00000c96 <__divmodhi4_neg1>:
 c96:	90 95       	com	r25
 c98:	81 95       	neg	r24
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	08 95       	ret

00000c9e <__divmodhi4_neg2>:
 c9e:	70 95       	com	r23
 ca0:	61 95       	neg	r22
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ca4 <__divmodhi4_exit>:
 ca4:	08 95       	ret

00000ca6 <__divmodsi4>:
 ca6:	05 2e       	mov	r0, r21
 ca8:	97 fb       	bst	r25, 7
 caa:	16 f4       	brtc	.+4      	; 0xcb0 <__divmodsi4+0xa>
 cac:	00 94       	com	r0
 cae:	0f d0       	rcall	.+30     	; 0xcce <__negsi2>
 cb0:	57 fd       	sbrc	r21, 7
 cb2:	05 d0       	rcall	.+10     	; 0xcbe <__divmodsi4_neg2>
 cb4:	28 d0       	rcall	.+80     	; 0xd06 <__udivmodsi4>
 cb6:	07 fc       	sbrc	r0, 7
 cb8:	02 d0       	rcall	.+4      	; 0xcbe <__divmodsi4_neg2>
 cba:	46 f4       	brtc	.+16     	; 0xccc <__divmodsi4_exit>
 cbc:	08 c0       	rjmp	.+16     	; 0xcce <__negsi2>

00000cbe <__divmodsi4_neg2>:
 cbe:	50 95       	com	r21
 cc0:	40 95       	com	r20
 cc2:	30 95       	com	r19
 cc4:	21 95       	neg	r18
 cc6:	3f 4f       	sbci	r19, 0xFF	; 255
 cc8:	4f 4f       	sbci	r20, 0xFF	; 255
 cca:	5f 4f       	sbci	r21, 0xFF	; 255

00000ccc <__divmodsi4_exit>:
 ccc:	08 95       	ret

00000cce <__negsi2>:
 cce:	90 95       	com	r25
 cd0:	80 95       	com	r24
 cd2:	70 95       	com	r23
 cd4:	61 95       	neg	r22
 cd6:	7f 4f       	sbci	r23, 0xFF	; 255
 cd8:	8f 4f       	sbci	r24, 0xFF	; 255
 cda:	9f 4f       	sbci	r25, 0xFF	; 255
 cdc:	08 95       	ret

00000cde <__udivmodhi4>:
 cde:	aa 1b       	sub	r26, r26
 ce0:	bb 1b       	sub	r27, r27
 ce2:	51 e1       	ldi	r21, 0x11	; 17
 ce4:	07 c0       	rjmp	.+14     	; 0xcf4 <__udivmodhi4_ep>

00000ce6 <__udivmodhi4_loop>:
 ce6:	aa 1f       	adc	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	a6 17       	cp	r26, r22
 cec:	b7 07       	cpc	r27, r23
 cee:	10 f0       	brcs	.+4      	; 0xcf4 <__udivmodhi4_ep>
 cf0:	a6 1b       	sub	r26, r22
 cf2:	b7 0b       	sbc	r27, r23

00000cf4 <__udivmodhi4_ep>:
 cf4:	88 1f       	adc	r24, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	5a 95       	dec	r21
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__udivmodhi4_loop>
 cfc:	80 95       	com	r24
 cfe:	90 95       	com	r25
 d00:	bc 01       	movw	r22, r24
 d02:	cd 01       	movw	r24, r26
 d04:	08 95       	ret

00000d06 <__udivmodsi4>:
 d06:	a1 e2       	ldi	r26, 0x21	; 33
 d08:	1a 2e       	mov	r1, r26
 d0a:	aa 1b       	sub	r26, r26
 d0c:	bb 1b       	sub	r27, r27
 d0e:	fd 01       	movw	r30, r26
 d10:	0d c0       	rjmp	.+26     	; 0xd2c <__udivmodsi4_ep>

00000d12 <__udivmodsi4_loop>:
 d12:	aa 1f       	adc	r26, r26
 d14:	bb 1f       	adc	r27, r27
 d16:	ee 1f       	adc	r30, r30
 d18:	ff 1f       	adc	r31, r31
 d1a:	a2 17       	cp	r26, r18
 d1c:	b3 07       	cpc	r27, r19
 d1e:	e4 07       	cpc	r30, r20
 d20:	f5 07       	cpc	r31, r21
 d22:	20 f0       	brcs	.+8      	; 0xd2c <__udivmodsi4_ep>
 d24:	a2 1b       	sub	r26, r18
 d26:	b3 0b       	sbc	r27, r19
 d28:	e4 0b       	sbc	r30, r20
 d2a:	f5 0b       	sbc	r31, r21

00000d2c <__udivmodsi4_ep>:
 d2c:	66 1f       	adc	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	1a 94       	dec	r1
 d36:	69 f7       	brne	.-38     	; 0xd12 <__udivmodsi4_loop>
 d38:	60 95       	com	r22
 d3a:	70 95       	com	r23
 d3c:	80 95       	com	r24
 d3e:	90 95       	com	r25
 d40:	9b 01       	movw	r18, r22
 d42:	ac 01       	movw	r20, r24
 d44:	bd 01       	movw	r22, r26
 d46:	cf 01       	movw	r24, r30
 d48:	08 95       	ret

00000d4a <strncmp>:
 d4a:	fb 01       	movw	r30, r22
 d4c:	dc 01       	movw	r26, r24
 d4e:	41 50       	subi	r20, 0x01	; 1
 d50:	50 40       	sbci	r21, 0x00	; 0
 d52:	30 f0       	brcs	.+12     	; 0xd60 <strncmp+0x16>
 d54:	8d 91       	ld	r24, X+
 d56:	01 90       	ld	r0, Z+
 d58:	80 19       	sub	r24, r0
 d5a:	19 f4       	brne	.+6      	; 0xd62 <strncmp+0x18>
 d5c:	00 20       	and	r0, r0
 d5e:	b9 f7       	brne	.-18     	; 0xd4e <strncmp+0x4>
 d60:	88 1b       	sub	r24, r24
 d62:	99 0b       	sbc	r25, r25
 d64:	08 95       	ret

00000d66 <itoa>:
 d66:	45 32       	cpi	r20, 0x25	; 37
 d68:	51 05       	cpc	r21, r1
 d6a:	18 f4       	brcc	.+6      	; 0xd72 <itoa+0xc>
 d6c:	42 30       	cpi	r20, 0x02	; 2
 d6e:	08 f0       	brcs	.+2      	; 0xd72 <itoa+0xc>
 d70:	04 c0       	rjmp	.+8      	; 0xd7a <__itoa_ncheck>
 d72:	fb 01       	movw	r30, r22
 d74:	10 82       	st	Z, r1
 d76:	cb 01       	movw	r24, r22
 d78:	08 95       	ret

00000d7a <__itoa_ncheck>:
 d7a:	bb 27       	eor	r27, r27
 d7c:	4a 30       	cpi	r20, 0x0A	; 10
 d7e:	31 f4       	brne	.+12     	; 0xd8c <__itoa_ncheck+0x12>
 d80:	99 23       	and	r25, r25
 d82:	22 f4       	brpl	.+8      	; 0xd8c <__itoa_ncheck+0x12>
 d84:	bd e2       	ldi	r27, 0x2D	; 45
 d86:	90 95       	com	r25
 d88:	81 95       	neg	r24
 d8a:	9f 4f       	sbci	r25, 0xFF	; 255
 d8c:	36 c0       	rjmp	.+108    	; 0xdfa <__utoa_common>

00000d8e <ultoa>:
 d8e:	25 32       	cpi	r18, 0x25	; 37
 d90:	31 05       	cpc	r19, r1
 d92:	18 f4       	brcc	.+6      	; 0xd9a <ultoa+0xc>
 d94:	22 30       	cpi	r18, 0x02	; 2
 d96:	08 f0       	brcs	.+2      	; 0xd9a <ultoa+0xc>
 d98:	04 c0       	rjmp	.+8      	; 0xda2 <__ultoa_ncheck>
 d9a:	fa 01       	movw	r30, r20
 d9c:	10 82       	st	Z, r1
 d9e:	ca 01       	movw	r24, r20
 da0:	08 95       	ret

00000da2 <__ultoa_ncheck>:
 da2:	bb 27       	eor	r27, r27

00000da4 <__ultoa_common>:
 da4:	fa 01       	movw	r30, r20
 da6:	a6 2f       	mov	r26, r22
 da8:	62 17       	cp	r22, r18
 daa:	71 05       	cpc	r23, r1
 dac:	81 05       	cpc	r24, r1
 dae:	91 05       	cpc	r25, r1
 db0:	33 0b       	sbc	r19, r19
 db2:	30 fb       	bst	r19, 0
 db4:	66 f0       	brts	.+24     	; 0xdce <__ultoa_common+0x2a>
 db6:	aa 27       	eor	r26, r26
 db8:	66 0f       	add	r22, r22
 dba:	77 1f       	adc	r23, r23
 dbc:	88 1f       	adc	r24, r24
 dbe:	99 1f       	adc	r25, r25
 dc0:	aa 1f       	adc	r26, r26
 dc2:	a2 17       	cp	r26, r18
 dc4:	10 f0       	brcs	.+4      	; 0xdca <__ultoa_common+0x26>
 dc6:	a2 1b       	sub	r26, r18
 dc8:	63 95       	inc	r22
 dca:	38 50       	subi	r19, 0x08	; 8
 dcc:	a9 f7       	brne	.-22     	; 0xdb8 <__ultoa_common+0x14>
 dce:	a0 5d       	subi	r26, 0xD0	; 208
 dd0:	aa 33       	cpi	r26, 0x3A	; 58
 dd2:	08 f0       	brcs	.+2      	; 0xdd6 <__ultoa_common+0x32>
 dd4:	a9 5d       	subi	r26, 0xD9	; 217
 dd6:	a1 93       	st	Z+, r26
 dd8:	36 f7       	brtc	.-52     	; 0xda6 <__ultoa_common+0x2>
 dda:	b1 11       	cpse	r27, r1
 ddc:	b1 93       	st	Z+, r27
 dde:	10 82       	st	Z, r1
 de0:	ca 01       	movw	r24, r20
 de2:	23 c0       	rjmp	.+70     	; 0xe2a <strrev>

00000de4 <utoa>:
 de4:	45 32       	cpi	r20, 0x25	; 37
 de6:	51 05       	cpc	r21, r1
 de8:	18 f4       	brcc	.+6      	; 0xdf0 <utoa+0xc>
 dea:	42 30       	cpi	r20, 0x02	; 2
 dec:	08 f0       	brcs	.+2      	; 0xdf0 <utoa+0xc>
 dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__utoa_ncheck>
 df0:	fb 01       	movw	r30, r22
 df2:	10 82       	st	Z, r1
 df4:	cb 01       	movw	r24, r22
 df6:	08 95       	ret

00000df8 <__utoa_ncheck>:
 df8:	bb 27       	eor	r27, r27

00000dfa <__utoa_common>:
 dfa:	fb 01       	movw	r30, r22
 dfc:	55 27       	eor	r21, r21
 dfe:	aa 27       	eor	r26, r26
 e00:	88 0f       	add	r24, r24
 e02:	99 1f       	adc	r25, r25
 e04:	aa 1f       	adc	r26, r26
 e06:	a4 17       	cp	r26, r20
 e08:	10 f0       	brcs	.+4      	; 0xe0e <__utoa_common+0x14>
 e0a:	a4 1b       	sub	r26, r20
 e0c:	83 95       	inc	r24
 e0e:	50 51       	subi	r21, 0x10	; 16
 e10:	b9 f7       	brne	.-18     	; 0xe00 <__utoa_common+0x6>
 e12:	a0 5d       	subi	r26, 0xD0	; 208
 e14:	aa 33       	cpi	r26, 0x3A	; 58
 e16:	08 f0       	brcs	.+2      	; 0xe1a <__utoa_common+0x20>
 e18:	a9 5d       	subi	r26, 0xD9	; 217
 e1a:	a1 93       	st	Z+, r26
 e1c:	00 97       	sbiw	r24, 0x00	; 0
 e1e:	79 f7       	brne	.-34     	; 0xdfe <__utoa_common+0x4>
 e20:	b1 11       	cpse	r27, r1
 e22:	b1 93       	st	Z+, r27
 e24:	11 92       	st	Z+, r1
 e26:	cb 01       	movw	r24, r22
 e28:	00 c0       	rjmp	.+0      	; 0xe2a <strrev>

00000e2a <strrev>:
 e2a:	dc 01       	movw	r26, r24
 e2c:	fc 01       	movw	r30, r24
 e2e:	67 2f       	mov	r22, r23
 e30:	71 91       	ld	r23, Z+
 e32:	77 23       	and	r23, r23
 e34:	e1 f7       	brne	.-8      	; 0xe2e <strrev+0x4>
 e36:	32 97       	sbiw	r30, 0x02	; 2
 e38:	04 c0       	rjmp	.+8      	; 0xe42 <strrev+0x18>
 e3a:	7c 91       	ld	r23, X
 e3c:	6d 93       	st	X+, r22
 e3e:	70 83       	st	Z, r23
 e40:	62 91       	ld	r22, -Z
 e42:	ae 17       	cp	r26, r30
 e44:	bf 07       	cpc	r27, r31
 e46:	c8 f3       	brcs	.-14     	; 0xe3a <strrev+0x10>
 e48:	08 95       	ret

00000e4a <_exit>:
 e4a:	f8 94       	cli

00000e4c <__stop_program>:
 e4c:	ff cf       	rjmp	.-2      	; 0xe4c <__stop_program>
