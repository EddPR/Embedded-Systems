
TempHumidityMEga.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003fa  00800200  0000093a  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000093a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000847  008005fa  008005fa  00000dc8  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000246d  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001194  00000000  00000000  00003415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001052  00000000  00000000  000045a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000055fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097b  00000000  00000000  00005954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f32  00000000  00000000  000062cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00007201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c3       	rjmp	.+1682   	; 0x6e8 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	15 e0       	ldi	r17, 0x05	; 5
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3f       	cpi	r26, 0xFA	; 250
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2e e0       	ldi	r18, 0x0E	; 14
 110:	aa ef       	ldi	r26, 0xFA	; 250
 112:	b5 e0       	ldi	r27, 0x05	; 5
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 34       	cpi	r26, 0x41	; 65
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e5 d0       	rcall	.+458    	; 0x2ea <main>
 120:	0a c4       	rjmp	.+2068   	; 0x936 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <x_thread_id>
 14c:	30 91 40 0e 	lds	r19, 0x0E40	; 0x800e40 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	ee e0       	ldi	r30, 0x0E	; 14
 15a:	f6 e0       	ldi	r31, 0x06	; 6
 15c:	22 0f       	add	r18, r18
 15e:	c8 e0       	ldi	r28, 0x08	; 8
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	03 c3       	rjmp	.+1542   	; 0x780 <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 3f 0e 	lds	r18, 0x0E3F	; 0x800e3f <x_disable_status>
 188:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <x_delay_status>
 18c:	40 91 2e 06 	lds	r20, 0x062E	; 0x80062e <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 0c 06 	lds	r19, 0x060C	; 0x80060c <x_thread_id>
 198:	40 91 40 0e 	lds	r20, 0x0E40	; 0x800e40 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 0c 06 	sts	0x060C, r19	; 0x80060c <x_thread_id>
 1b8:	70 93 40 0e 	sts	0x0E40, r23	; 0x800e40 <x_thread_mask>
 1bc:	ee e0       	ldi	r30, 0x0E	; 14
 1be:	f6 e0       	ldi	r31, 0x06	; 6
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <resetState>:
/***********************************************************************
* Functions prepares for next data transmission
***********************************************************************/
void resetState()
{
	sei(); // Re-enable interrupts
 216:	78 94       	sei
	
	for (int i = 0; i < 5; i++) bytes[i] = 0; // Clear bytes
 218:	e2 e0       	ldi	r30, 0x02	; 2
 21a:	f6 e0       	ldi	r31, 0x06	; 6
 21c:	11 82       	std	Z+1, r1	; 0x01
 21e:	10 82       	st	Z, r1
 220:	13 82       	std	Z+3, r1	; 0x03
 222:	12 82       	std	Z+2, r1	; 0x02
 224:	15 82       	std	Z+5, r1	; 0x05
 226:	14 82       	std	Z+4, r1	; 0x04
 228:	17 82       	std	Z+7, r1	; 0x07
 22a:	16 82       	std	Z+6, r1	; 0x06
 22c:	11 86       	std	Z+9, r1	; 0x09
 22e:	10 86       	std	Z+8, r1	; 0x08
 230:	08 95       	ret

00000232 <serial_open>:
* port: port number (0, 1, 2, 3)
* speed: baud rate calculated depending on F_CPU
* config: framing parameters (Data bits / Parity / Stop bits)
***********************************************************************/
void serial_open(unsigned char port, long speed, int config)
{
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	6a 01       	movw	r12, r20
 240:	7b 01       	movw	r14, r22
		enableR = (1 << RXEN0);
		enableT = (1 << TXEN0);
		break;
	}
	
	serial_port[port]->ucsrb = enableR | enableT;
 242:	c8 2f       	mov	r28, r24
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	cc 0f       	add	r28, r28
 248:	dd 1f       	adc	r29, r29
 24a:	c0 50       	subi	r28, 0x00	; 0
 24c:	de 4f       	sbci	r29, 0xFE	; 254
 24e:	e8 81       	ld	r30, Y
 250:	f9 81       	ldd	r31, Y+1	; 0x01
 252:	88 e1       	ldi	r24, 0x18	; 24
 254:	81 83       	std	Z+1, r24	; 0x01
	serial_port[port]->ucsrc = config;
 256:	e8 81       	ld	r30, Y
 258:	f9 81       	ldd	r31, Y+1	; 0x01
 25a:	22 83       	std	Z+2, r18	; 0x02
	speed = (F_CPU / 16 / speed - 1);
 25c:	60 e4       	ldi	r22, 0x40	; 64
 25e:	72 e4       	ldi	r23, 0x42	; 66
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	a7 01       	movw	r20, r14
 266:	96 01       	movw	r18, r12
 268:	d7 d2       	rcall	.+1454   	; 0x818 <__divmodsi4>
	serial_port[port]->ubrr = speed;
 26a:	e8 81       	ld	r30, Y
 26c:	f9 81       	ldd	r31, Y+1	; 0x01
		break;
	}
	
	serial_port[port]->ucsrb = enableR | enableT;
	serial_port[port]->ucsrc = config;
	speed = (F_CPU / 16 / speed - 1);
 26e:	da 01       	movw	r26, r20
 270:	c9 01       	movw	r24, r18
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	a1 09       	sbc	r26, r1
 276:	b1 09       	sbc	r27, r1
	serial_port[port]->ubrr = speed;
 278:	95 83       	std	Z+5, r25	; 0x05
 27a:	84 83       	std	Z+4, r24	; 0x04
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	08 95       	ret

0000028a <serial_write>:
* port: port number (0, 1, 2, 3)
* data: byte character
***********************************************************************/
void serial_write(unsigned char port, char data)
{
	switch (port) {
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	81 f0       	breq	.+32     	; 0x2ae <serial_write+0x24>
 28e:	38 f0       	brcs	.+14     	; 0x29e <serial_write+0x14>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	a9 f0       	breq	.+42     	; 0x2be <serial_write+0x34>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	d9 f0       	breq	.+54     	; 0x2ce <serial_write+0x44>
		case 3:
		while (!(UCSR3A & (1 << UDRE0)));	// Wait for TXN
		UDR3 = data;
		break;
		default:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 298:	e0 ec       	ldi	r30, 0xC0	; 192
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	20 c0       	rjmp	.+64     	; 0x2de <serial_write+0x54>
***********************************************************************/
void serial_write(unsigned char port, char data)
{
	switch (port) {
		case 0:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 29e:	e0 ec       	ldi	r30, 0xC0	; 192
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <serial_write+0x18>
		UDR0 = data;
 2a8:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
 2ac:	08 95       	ret
		case 1:
		while (!(UCSR1A & (1 << UDRE1)));	// Wait for TXN
 2ae:	e8 ec       	ldi	r30, 0xC8	; 200
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <serial_write+0x28>
		UDR1 = data;
 2b8:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
		break;
 2bc:	08 95       	ret
		case 2:
		while (!(UCSR2A & (1 << UDRE2)));	// Wait for TXN
 2be:	e0 ed       	ldi	r30, 0xD0	; 208
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	85 ff       	sbrs	r24, 5
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <serial_write+0x38>
		UDR2 = data;
 2c8:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		break;
 2cc:	08 95       	ret
		case 3:
		while (!(UCSR3A & (1 << UDRE0)));	// Wait for TXN
 2ce:	e0 e3       	ldi	r30, 0x30	; 48
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	80 81       	ld	r24, Z
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <serial_write+0x48>
		UDR3 = data;
 2d8:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		break;
 2dc:	08 95       	ret
		default:
		while (!(UCSR0A & (1 << UDRE0)));	// Wait for TXN
 2de:	80 81       	ld	r24, Z
 2e0:	85 ff       	sbrs	r24, 5
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <serial_write+0x54>
		UDR0 = data;
 2e4:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2e8:	08 95       	ret

000002ea <main>:
	(SERIAL_REGS *)(0x130)	// serial port 3
};

int main(void)
{
	serial_open(0, 2400, SERIAL_8E1);
 2ea:	26 e2       	ldi	r18, 0x26	; 38
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 e6       	ldi	r20, 0x60	; 96
 2f0:	59 e0       	ldi	r21, 0x09	; 9
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	9c df       	rcall	.-200    	; 0x232 <serial_open>
	serial_open(1, 2400, SERIAL_8E1);
 2fa:	26 e2       	ldi	r18, 0x26	; 38
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e6       	ldi	r20, 0x60	; 96
 300:	59 e0       	ldi	r21, 0x09	; 9
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	94 df       	rcall	.-216    	; 0x232 <serial_open>
	x_init();
 30a:	61 d1       	rcall	.+706    	; 0x5ce <x_init>
	//x_new(2, (PTHREAD)ledThread, 1);
	//x_new(1, (PTHREAD)readingThread, 1);
	x_new(0, (PTHREAD)runSensorThread, 1);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	6a e8       	ldi	r22, 0x8A	; 138
 310:	72 e0       	ldi	r23, 0x02	; 2
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	1e d1       	rcall	.+572    	; 0x552 <x_new>
	
	while (1)
	{
		//serial_print("test\n");
		//if (readings == 1)	
		serial_write(0, 'B');
 316:	62 e4       	ldi	r22, 0x42	; 66
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	b7 df       	rcall	.-146    	; 0x28a <serial_write>
	}
 31c:	fc cf       	rjmp	.-8      	; 0x316 <main+0x2c>

0000031e <serial_read>:
***********************************************************************/
char serial_read(unsigned char port)
{
	char data;
	
	switch (port) {
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	81 f0       	breq	.+32     	; 0x342 <serial_read+0x24>
 322:	38 f0       	brcs	.+14     	; 0x332 <serial_read+0x14>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	a9 f0       	breq	.+42     	; 0x352 <serial_read+0x34>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	d9 f0       	breq	.+54     	; 0x362 <serial_read+0x44>
		case 3:
		while (!(UCSR3A & (1 << RXC3)));	// Wait for RXN
		data = UDR3;
		break;
		default:
		while (!(UCSR0A & (1 << RXC0)));	// Wait for RXN
 32c:	e0 ec       	ldi	r30, 0xC0	; 192
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	20 c0       	rjmp	.+64     	; 0x372 <serial_read+0x54>
{
	char data;
	
	switch (port) {
		case 0:
		while (!(UCSR0A & (1 << RXC0)));	// Wait for RXN
 332:	e0 ec       	ldi	r30, 0xC0	; 192
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	88 23       	and	r24, r24
 33a:	ec f7       	brge	.-6      	; 0x336 <serial_read+0x18>
		data = UDR0;
 33c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
 340:	08 95       	ret
		case 1:
		while (!(UCSR1A & (1 << RXC1)));	// Wait for RXN
 342:	e8 ec       	ldi	r30, 0xC8	; 200
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	88 23       	and	r24, r24
 34a:	ec f7       	brge	.-6      	; 0x346 <serial_read+0x28>
		data = UDR1;
 34c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
		break;
 350:	08 95       	ret
		case 2:
		while (!(UCSR2A & (1 << RXC2)));	// Wait for RXN
 352:	e0 ed       	ldi	r30, 0xD0	; 208
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	88 23       	and	r24, r24
 35a:	ec f7       	brge	.-6      	; 0x356 <serial_read+0x38>
		data = UDR2;
 35c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
		break;
 360:	08 95       	ret
		case 3:
		while (!(UCSR3A & (1 << RXC3)));	// Wait for RXN
 362:	e0 e3       	ldi	r30, 0x30	; 48
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	80 81       	ld	r24, Z
 368:	88 23       	and	r24, r24
 36a:	ec f7       	brge	.-6      	; 0x366 <serial_read+0x48>
		data = UDR3;
 36c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		break;
 370:	08 95       	ret
		default:
		while (!(UCSR0A & (1 << RXC0)));	// Wait for RXN
 372:	80 81       	ld	r24, Z
 374:	88 23       	and	r24, r24
 376:	ec f7       	brge	.-6      	; 0x372 <serial_read+0x54>
		data = UDR0;
 378:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
	}

	return data;
}
 37c:	08 95       	ret

0000037e <serial_print>:
/***********************************************************************
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
	while(*data)
 382:	fc 01       	movw	r30, r24
 384:	60 81       	ld	r22, Z
 386:	66 23       	and	r22, r22
 388:	39 f0       	breq	.+14     	; 0x398 <serial_print+0x1a>
 38a:	ec 01       	movw	r28, r24
 38c:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_write(0, *data++);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	7c df       	rcall	.-264    	; 0x28a <serial_write>
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
	while(*data)
 392:	69 91       	ld	r22, Y+
 394:	61 11       	cpse	r22, r1
 396:	fb cf       	rjmp	.-10     	; 0x38e <serial_print+0x10>
	{
		serial_write(0, *data++);
	}   
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <printTemperature>:
* value to properly calculate the temperature from Celsius to Fahrenheit.
* bytes2: upper 8 bits from Temperature data
* bytes3: lower 8 bits from Temperature data
***********************************************************************/
void printTemperature(uint8_t bytes2, uint8_t bytes3)
{
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	28 97       	sbiw	r28, 0x08	; 8
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	
	int temp = ((bytes2) << 8) | bytes3; // store bytes into single var
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	9b 01       	movw	r18, r22
 3c2:	38 2b       	or	r19, r24
 3c4:	c9 01       	movw	r24, r18
	temp = temp / 10; // Calculate the whole number 
 3c6:	0f 2e       	mov	r0, r31
 3c8:	fa e0       	ldi	r31, 0x0A	; 10
 3ca:	cf 2e       	mov	r12, r31
 3cc:	d1 2c       	mov	r13, r1
 3ce:	f0 2d       	mov	r31, r0
 3d0:	b6 01       	movw	r22, r12
 3d2:	0f d2       	rcall	.+1054   	; 0x7f2 <__divmodhi4>
 3d4:	7b 01       	movw	r14, r22
	int remainder = temp % 10; // Calculate the fraction
	temp = ((temp * 9) / 5) + 32; // Converting Celsius to Fahrenheit
 3d6:	cb 01       	movw	r24, r22
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	86 0f       	add	r24, r22
 3e6:	97 1f       	adc	r25, r23
 3e8:	65 e0       	ldi	r22, 0x05	; 5
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	02 d2       	rcall	.+1028   	; 0x7f2 <__divmodhi4>
 3ee:	8b 01       	movw	r16, r22
 3f0:	00 5e       	subi	r16, 0xE0	; 224
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
	if (bytes2 < 0) temp = temp * -1; // If negative, print it as such
	itoa(temp, buffer, 10); // Convert data to string
 3f4:	4a e0       	ldi	r20, 0x0A	; 10
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	be 01       	movw	r22, r28
 3fa:	6f 5f       	subi	r22, 0xFF	; 255
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	c8 01       	movw	r24, r16
 400:	5d d2       	rcall	.+1210   	; 0x8bc <itoa>
	serial_print(" TMP= ");
 402:	88 e1       	ldi	r24, 0x18	; 24
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	bb df       	rcall	.-138    	; 0x37e <serial_print>
	serial_print(buffer);
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	b8 df       	rcall	.-144    	; 0x37e <serial_print>
{
	char buffer[8];
	
	int temp = ((bytes2) << 8) | bytes3; // store bytes into single var
	temp = temp / 10; // Calculate the whole number 
	int remainder = temp % 10; // Calculate the fraction
 40e:	c7 01       	movw	r24, r14
 410:	b6 01       	movw	r22, r12
 412:	ef d1       	rcall	.+990    	; 0x7f2 <__divmodhi4>
	temp = ((temp * 9) / 5) + 32; // Converting Celsius to Fahrenheit
	if (bytes2 < 0) temp = temp * -1; // If negative, print it as such
	itoa(temp, buffer, 10); // Convert data to string
	serial_print(" TMP= ");
	serial_print(buffer);
	itoa(remainder, buffer, 10); // Convert data to string
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	be 01       	movw	r22, r28
 41a:	6f 5f       	subi	r22, 0xFF	; 255
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	4e d2       	rcall	.+1180   	; 0x8bc <itoa>
	serial_print(".");
 420:	8f e1       	ldi	r24, 0x1F	; 31
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	ac df       	rcall	.-168    	; 0x37e <serial_print>
	serial_print(buffer);
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	a9 df       	rcall	.-174    	; 0x37e <serial_print>
	serial_print(" \r");
 42c:	80 e6       	ldi	r24, 0x60	; 96
 42e:	92 e0       	ldi	r25, 0x02	; 2
 430:	a6 df       	rcall	.-180    	; 0x37e <serial_print>
	
	temperature = temp;
 432:	10 93 01 06 	sts	0x0601, r17	; 0x800601 <temperature+0x1>
 436:	00 93 00 06 	sts	0x0600, r16	; 0x800600 <temperature>
}
 43a:	28 96       	adiw	r28, 0x08	; 8
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	08 95       	ret

00000458 <printHumidity>:
* value to properly interpret the humidity value. 
* bytes0: upper 8 bits from Humidity data
* bytes1: lower 8 bits from Humidity data
***********************************************************************/
void printHumidity(uint8_t bytes0, uint8_t bytes1)
{
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	28 97       	sbiw	r28, 0x08	; 8
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	
	int relHum = (bytes0 << 8) | bytes1; // store bytes into single var
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	9b 01       	movw	r18, r22
 478:	38 2b       	or	r19, r24
 47a:	c9 01       	movw	r24, r18
	relHum = relHum / 10; // Calculate the whole number 
 47c:	0a e0       	ldi	r16, 0x0A	; 10
 47e:	10 e0       	ldi	r17, 0x00	; 0
 480:	b8 01       	movw	r22, r16
 482:	b7 d1       	rcall	.+878    	; 0x7f2 <__divmodhi4>
 484:	7b 01       	movw	r14, r22
	int remainder = relHum % 10; // Calculate the fraction
	serial_print("RHUM= "); 
 486:	81 e2       	ldi	r24, 0x21	; 33
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	79 df       	rcall	.-270    	; 0x37e <serial_print>
	itoa(relHum, buffer, 10); // Convert data to string
 48c:	4a e0       	ldi	r20, 0x0A	; 10
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	be 01       	movw	r22, r28
 492:	6f 5f       	subi	r22, 0xFF	; 255
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	c7 01       	movw	r24, r14
 498:	11 d2       	rcall	.+1058   	; 0x8bc <itoa>
	serial_print(buffer);
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	6f df       	rcall	.-290    	; 0x37e <serial_print>
{
	char buffer[8];
	
	int relHum = (bytes0 << 8) | bytes1; // store bytes into single var
	relHum = relHum / 10; // Calculate the whole number 
	int remainder = relHum % 10; // Calculate the fraction
 4a0:	c7 01       	movw	r24, r14
 4a2:	b8 01       	movw	r22, r16
 4a4:	a6 d1       	rcall	.+844    	; 0x7f2 <__divmodhi4>
	serial_print("RHUM= "); 
	itoa(relHum, buffer, 10); // Convert data to string
	serial_print(buffer);
	itoa(remainder, buffer, 10); // Convert data to string
 4a6:	4a e0       	ldi	r20, 0x0A	; 10
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	be 01       	movw	r22, r28
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	05 d2       	rcall	.+1034   	; 0x8bc <itoa>
	serial_print(".");
 4b2:	8f e1       	ldi	r24, 0x1F	; 31
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	63 df       	rcall	.-314    	; 0x37e <serial_print>
	serial_print(buffer);
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	60 df       	rcall	.-320    	; 0x37e <serial_print>
	serial_print(", ");
 4be:	88 e2       	ldi	r24, 0x28	; 40
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	5d df       	rcall	.-326    	; 0x37e <serial_print>
}
 4c4:	28 96       	adiw	r28, 0x08	; 8
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	f8 94       	cli
 4ca:	de bf       	out	0x3e, r29	; 62
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	cd bf       	out	0x3d, r28	; 61
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	08 95       	ret

000004de <checkSum>:
* If so, it prints the data. Otherwise, it'll print a checksum error.
***********************************************************************/
void checkSum()
{
	unsigned char sum;
	sum = bytes[0] + bytes[1] + bytes[2] + bytes[3];
 4de:	e2 e0       	ldi	r30, 0x02	; 2
 4e0:	f6 e0       	ldi	r31, 0x06	; 6
 4e2:	80 81       	ld	r24, Z
 4e4:	62 81       	ldd	r22, Z+2	; 0x02
 4e6:	26 2f       	mov	r18, r22
 4e8:	28 0f       	add	r18, r24
 4ea:	94 81       	ldd	r25, Z+4	; 0x04
 4ec:	29 0f       	add	r18, r25
 4ee:	96 81       	ldd	r25, Z+6	; 0x06
 4f0:	29 0f       	add	r18, r25
	if(bytes[4] == sum)
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 85       	ldd	r20, Z+8	; 0x08
 4f6:	51 85       	ldd	r21, Z+9	; 0x09
 4f8:	42 17       	cp	r20, r18
 4fa:	53 07       	cpc	r21, r19
 4fc:	39 f4       	brne	.+14     	; 0x50c <checkSum+0x2e>
	{
		printHumidity(bytes[0], bytes[1]);
 4fe:	ac df       	rcall	.-168    	; 0x458 <printHumidity>
		printTemperature(bytes[2], bytes[3]);
 500:	e2 e0       	ldi	r30, 0x02	; 2
 502:	f6 e0       	ldi	r31, 0x06	; 6
 504:	66 81       	ldd	r22, Z+6	; 0x06
 506:	84 81       	ldd	r24, Z+4	; 0x04
 508:	4a cf       	rjmp	.-364    	; 0x39e <printTemperature>
 50a:	08 95       	ret
	}
	else
	{
		serial_print("Checksum Error. \r");
 50c:	8b e2       	ldi	r24, 0x2B	; 43
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	36 cf       	rjmp	.-404    	; 0x37e <serial_print>
 512:	08 95       	ret

00000514 <runSensorThread>:
		serial_write(0, 'B');
	}
}

void runSensorThread()
{
 514:	0c e0       	ldi	r16, 0x0C	; 12
 516:	16 e0       	ldi	r17, 0x06	; 6
 518:	0f 2e       	mov	r0, r31
 51a:	f2 e0       	ldi	r31, 0x02	; 2
 51c:	ef 2e       	mov	r14, r31
 51e:	f6 e0       	ldi	r31, 0x06	; 6
 520:	ff 2e       	mov	r15, r31
 522:	f0 2d       	mov	r31, r0
	while(1)
	{
		if(serial_read(1) == 0xAA)
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	fb de       	rcall	.-522    	; 0x31e <serial_read>
 528:	8a 3a       	cpi	r24, 0xAA	; 170
 52a:	e1 f7       	brne	.-8      	; 0x524 <runSensorThread+0x10>
 52c:	e7 01       	movw	r28, r14
		{
			for(int i = 0; i < 5; i++)
			{
				bytes[i] = serial_read(1);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	f6 de       	rcall	.-532    	; 0x31e <serial_read>
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	89 93       	st	Y+, r24
 536:	99 93       	st	Y+, r25
{
	while(1)
	{
		if(serial_read(1) == 0xAA)
		{
			for(int i = 0; i < 5; i++)
 538:	c0 17       	cp	r28, r16
 53a:	d1 07       	cpc	r29, r17
 53c:	c1 f7       	brne	.-16     	; 0x52e <runSensorThread+0x1a>
			{
				bytes[i] = serial_read(1);
			}
			if(serial_read(1) == 0x99)
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	ee de       	rcall	.-548    	; 0x31e <serial_read>
 542:	89 39       	cpi	r24, 0x99	; 153
 544:	79 f7       	brne	.-34     	; 0x524 <runSensorThread+0x10>
			{
				checkSum();
 546:	cb df       	rcall	.-106    	; 0x4de <checkSum>
				resetState();
 548:	66 de       	rcall	.-820    	; 0x216 <resetState>
				x_delay(500);
 54a:	84 ef       	ldi	r24, 0xF4	; 244
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	b6 d0       	rcall	.+364    	; 0x6bc <x_delay>
 550:	e9 cf       	rjmp	.-46     	; 0x524 <runSensorThread+0x10>

00000552 <x_new>:
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	c8 2f       	mov	r28, r24
 558:	d4 2f       	mov	r29, r20
 55a:	e8 2f       	mov	r30, r24
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	9f 01       	movw	r18, r30
 568:	22 5f       	subi	r18, 0xF2	; 242
 56a:	39 4f       	sbci	r19, 0xF9	; 249
 56c:	f9 01       	movw	r30, r18
 56e:	a2 81       	ldd	r26, Z+2	; 0x02
 570:	b3 81       	ldd	r27, Z+3	; 0x03
 572:	6c 93       	st	X, r22
 574:	cd 01       	movw	r24, r26
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	fc 01       	movw	r30, r24
 57a:	70 83       	st	Z, r23
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	fc 01       	movw	r30, r24
 580:	10 82       	st	Z, r1
 582:	55 97       	sbiw	r26, 0x15	; 21
 584:	f9 01       	movw	r30, r18
 586:	b1 83       	std	Z+1, r27	; 0x01
 588:	a0 83       	st	Z, r26
 58a:	8c 2f       	mov	r24, r28
 58c:	3a de       	rcall	.-908    	; 0x202 <bit2mask8>
 58e:	dd 23       	and	r29, r29
 590:	41 f0       	breq	.+16     	; 0x5a2 <x_new+0x50>
 592:	98 2f       	mov	r25, r24
 594:	90 95       	com	r25
 596:	80 91 3f 0e 	lds	r24, 0x0E3F	; 0x800e3f <x_disable_status>
 59a:	98 23       	and	r25, r24
 59c:	90 93 3f 0e 	sts	0x0E3F, r25	; 0x800e3f <x_disable_status>
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <x_new+0x5a>
 5a2:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <x_disable_status>
 5a6:	98 2b       	or	r25, r24
 5a8:	90 93 3f 0e 	sts	0x0E3F, r25	; 0x800e3f <x_disable_status>
 5ac:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <x_thread_id>
 5b0:	c8 13       	cpse	r28, r24
 5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <x_new+0x64>
 5b4:	e7 dd       	rcall	.-1074   	; 0x184 <x_schedule>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <init_System_Timer>:
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	84 bd       	out	0x24, r24	; 36
 5c0:	9a ef       	ldi	r25, 0xFA	; 250
 5c2:	97 bd       	out	0x27, r25	; 39
 5c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	85 bd       	out	0x25, r24	; 37
 5cc:	08 95       	ret

000005ce <x_init>:
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	f8 94       	cli
 5d4:	8e ef       	ldi	r24, 0xFE	; 254
 5d6:	80 93 3f 0e 	sts	0x0E3F, r24	; 0x800e3f <x_disable_status>
 5da:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <x_suspend_status>
 5de:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <x_delay_status>
 5e2:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <x_thread_id>
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 40 0e 	sts	0x0E40, r24	; 0x800e40 <x_thread_mask>
 5ec:	ce e0       	ldi	r28, 0x0E	; 14
 5ee:	d6 e0       	ldi	r29, 0x06	; 6
 5f0:	8e e2       	ldi	r24, 0x2E	; 46
 5f2:	97 e0       	ldi	r25, 0x07	; 7
 5f4:	99 83       	std	Y+1, r25	; 0x01
 5f6:	88 83       	st	Y, r24
 5f8:	9b 83       	std	Y+3, r25	; 0x03
 5fa:	8a 83       	std	Y+2, r24	; 0x02
 5fc:	8e e2       	ldi	r24, 0x2E	; 46
 5fe:	98 e0       	ldi	r25, 0x08	; 8
 600:	9d 83       	std	Y+5, r25	; 0x05
 602:	8c 83       	std	Y+4, r24	; 0x04
 604:	9f 83       	std	Y+7, r25	; 0x07
 606:	8e 83       	std	Y+6, r24	; 0x06
 608:	8e e2       	ldi	r24, 0x2E	; 46
 60a:	99 e0       	ldi	r25, 0x09	; 9
 60c:	99 87       	std	Y+9, r25	; 0x09
 60e:	88 87       	std	Y+8, r24	; 0x08
 610:	9b 87       	std	Y+11, r25	; 0x0b
 612:	8a 87       	std	Y+10, r24	; 0x0a
 614:	8e e2       	ldi	r24, 0x2E	; 46
 616:	9a e0       	ldi	r25, 0x0A	; 10
 618:	9d 87       	std	Y+13, r25	; 0x0d
 61a:	8c 87       	std	Y+12, r24	; 0x0c
 61c:	9f 87       	std	Y+15, r25	; 0x0f
 61e:	8e 87       	std	Y+14, r24	; 0x0e
 620:	8e e2       	ldi	r24, 0x2E	; 46
 622:	9b e0       	ldi	r25, 0x0B	; 11
 624:	99 8b       	std	Y+17, r25	; 0x11
 626:	88 8b       	std	Y+16, r24	; 0x10
 628:	9b 8b       	std	Y+19, r25	; 0x13
 62a:	8a 8b       	std	Y+18, r24	; 0x12
 62c:	8e e2       	ldi	r24, 0x2E	; 46
 62e:	9c e0       	ldi	r25, 0x0C	; 12
 630:	9d 8b       	std	Y+21, r25	; 0x15
 632:	8c 8b       	std	Y+20, r24	; 0x14
 634:	9f 8b       	std	Y+23, r25	; 0x17
 636:	8e 8b       	std	Y+22, r24	; 0x16
 638:	8e e2       	ldi	r24, 0x2E	; 46
 63a:	9d e0       	ldi	r25, 0x0D	; 13
 63c:	99 8f       	std	Y+25, r25	; 0x19
 63e:	88 8f       	std	Y+24, r24	; 0x18
 640:	9b 8f       	std	Y+27, r25	; 0x1b
 642:	8a 8f       	std	Y+26, r24	; 0x1a
 644:	8e e2       	ldi	r24, 0x2E	; 46
 646:	9e e0       	ldi	r25, 0x0E	; 14
 648:	9d 8f       	std	Y+29, r25	; 0x1d
 64a:	8c 8f       	std	Y+28, r24	; 0x1c
 64c:	9f 8f       	std	Y+31, r25	; 0x1f
 64e:	8e 8f       	std	Y+30, r24	; 0x1e
 650:	8a ea       	ldi	r24, 0xAA	; 170
 652:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <x_thread_stacks>
 656:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <x_thread_stacks+0x100>
 65a:	80 93 2f 08 	sts	0x082F, r24	; 0x80082f <x_thread_stacks+0x200>
 65e:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <x_thread_stacks+0x300>
 662:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <x_thread_stacks+0x400>
 666:	80 93 2f 0b 	sts	0x0B2F, r24	; 0x800b2f <x_thread_stacks+0x500>
 66a:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <x_thread_stacks+0x600>
 66e:	80 93 2f 0d 	sts	0x0D2F, r24	; 0x800d2f <x_thread_stacks+0x700>
 672:	a4 df       	rcall	.-184    	; 0x5bc <init_System_Timer>
 674:	ed b7       	in	r30, 0x3d	; 61
 676:	fe b7       	in	r31, 0x3e	; 62
 678:	a8 81       	ld	r26, Y
 67a:	b9 81       	ldd	r27, Y+1	; 0x01
 67c:	85 81       	ldd	r24, Z+5	; 0x05
 67e:	8c 93       	st	X, r24
 680:	a8 81       	ld	r26, Y
 682:	b9 81       	ldd	r27, Y+1	; 0x01
 684:	84 81       	ldd	r24, Z+4	; 0x04
 686:	11 97       	sbiw	r26, 0x01	; 1
 688:	8c 93       	st	X, r24
 68a:	a8 81       	ld	r26, Y
 68c:	b9 81       	ldd	r27, Y+1	; 0x01
 68e:	83 81       	ldd	r24, Z+3	; 0x03
 690:	12 97       	sbiw	r26, 0x02	; 2
 692:	8c 93       	st	X, r24
 694:	a8 81       	ld	r26, Y
 696:	b9 81       	ldd	r27, Y+1	; 0x01
 698:	82 81       	ldd	r24, Z+2	; 0x02
 69a:	13 97       	sbiw	r26, 0x03	; 3
 69c:	8c 93       	st	X, r24
 69e:	88 81       	ld	r24, Y
 6a0:	99 81       	ldd	r25, Y+1	; 0x01
 6a2:	21 81       	ldd	r18, Z+1	; 0x01
 6a4:	fc 01       	movw	r30, r24
 6a6:	34 97       	sbiw	r30, 0x04	; 4
 6a8:	20 83       	st	Z, r18
 6aa:	88 81       	ld	r24, Y
 6ac:	99 81       	ldd	r25, Y+1	; 0x01
 6ae:	05 97       	sbiw	r24, 0x05	; 5
 6b0:	9e bf       	out	0x3e, r25	; 62
 6b2:	8d bf       	out	0x3d, r24	; 61
 6b4:	78 94       	sei
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <x_delay>:
 6bc:	9c 01       	movw	r18, r24
 6be:	9f b7       	in	r25, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <x_thread_id>
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	e1 5d       	subi	r30, 0xD1	; 209
 6ce:	f1 4f       	sbci	r31, 0xF1	; 241
 6d0:	31 83       	std	Z+1, r19	; 0x01
 6d2:	20 83       	st	Z, r18
 6d4:	20 91 0d 06 	lds	r18, 0x060D	; 0x80060d <x_delay_status>
 6d8:	80 91 40 0e 	lds	r24, 0x0E40	; 0x800e40 <x_thread_mask>
 6dc:	82 2b       	or	r24, r18
 6de:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <x_delay_status>
 6e2:	9f bf       	out	0x3f, r25	; 63
 6e4:	1f cd       	rjmp	.-1474   	; 0x124 <x_yield>
 6e6:	08 95       	ret

000006e8 <__vector_21>:
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	0b b6       	in	r0, 0x3b	; 59
 6f4:	0f 92       	push	r0
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	8f 93       	push	r24
 700:	9f 93       	push	r25
 702:	af 93       	push	r26
 704:	bf 93       	push	r27
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
 70a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <__data_end>
 70e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <__data_end+0x1>
 712:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <__data_end+0x2>
 716:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <__data_end+0x3>
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	a1 1d       	adc	r26, r1
 71e:	b1 1d       	adc	r27, r1
 720:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <__data_end>
 724:	90 93 fb 05 	sts	0x05FB, r25	; 0x8005fb <__data_end+0x1>
 728:	a0 93 fc 05 	sts	0x05FC, r26	; 0x8005fc <__data_end+0x2>
 72c:	b0 93 fd 05 	sts	0x05FD, r27	; 0x8005fd <__data_end+0x3>
 730:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <x_delay_status>
 734:	ef e2       	ldi	r30, 0x2F	; 47
 736:	fe e0       	ldi	r31, 0x0E	; 14
 738:	4f e3       	ldi	r20, 0x3F	; 63
 73a:	5e e0       	ldi	r21, 0x0E	; 14
 73c:	21 e0       	ldi	r18, 0x01	; 1
 73e:	80 81       	ld	r24, Z
 740:	91 81       	ldd	r25, Z+1	; 0x01
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	81 93       	st	Z+, r24
 746:	91 93       	st	Z+, r25
 748:	89 2b       	or	r24, r25
 74a:	19 f4       	brne	.+6      	; 0x752 <__vector_21+0x6a>
 74c:	82 2f       	mov	r24, r18
 74e:	80 95       	com	r24
 750:	38 23       	and	r19, r24
 752:	22 0f       	add	r18, r18
 754:	e4 17       	cp	r30, r20
 756:	f5 07       	cpc	r31, r21
 758:	91 f7       	brne	.-28     	; 0x73e <__vector_21+0x56>
 75a:	30 93 0d 06 	sts	0x060D, r19	; 0x80060d <x_delay_status>
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	5f 91       	pop	r21
 76c:	4f 91       	pop	r20
 76e:	3f 91       	pop	r19
 770:	2f 91       	pop	r18
 772:	0f 90       	pop	r0
 774:	0b be       	out	0x3b, r0	; 59
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <x_stack_overflow>:
 780:	ac 01       	movw	r20, r24
 782:	27 9a       	sbi	0x04, 7	; 4
 784:	2f 98       	cbi	0x05, 7	; 5
   must be defined before including this header file. Also, the
   backward compatible algorithm will be chosen if the code is
   compiled in a <em>freestanding environment</em> (GCC option
   \c -ffreestanding), as the math functions required for rounding are
   not available to the compiler then.

 786:	2f ef       	ldi	r18, 0xFF	; 255
 788:	31 ee       	ldi	r19, 0xE1	; 225
 78a:	74 e0       	ldi	r23, 0x04	; 4
 78c:	21 50       	subi	r18, 0x01	; 1
 78e:	30 40       	sbci	r19, 0x00	; 0
 790:	70 40       	sbci	r23, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <x_stack_overflow+0xc>
 794:	00 c0       	rjmp	.+0      	; 0x796 <x_stack_overflow+0x16>
 796:	00 00       	nop
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	55 23       	and	r21, r21
 79e:	fc f0       	brlt	.+62     	; 0x7de <x_stack_overflow+0x5e>
 7a0:	26 2f       	mov	r18, r22
 7a2:	38 2f       	mov	r19, r24
 7a4:	95 b1       	in	r25, 0x05	; 5
 7a6:	90 58       	subi	r25, 0x80	; 128
 7a8:	95 b9       	out	0x05, r25	; 5
 7aa:	9f ef       	ldi	r25, 0xFF	; 255
 7ac:	e0 e7       	ldi	r30, 0x70	; 112
 7ae:	72 e0       	ldi	r23, 0x02	; 2
 7b0:	91 50       	subi	r25, 0x01	; 1
 7b2:	e0 40       	sbci	r30, 0x00	; 0
 7b4:	70 40       	sbci	r23, 0x00	; 0
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <x_stack_overflow+0x30>
 7b8:	00 c0       	rjmp	.+0      	; 0x7ba <x_stack_overflow+0x3a>
 7ba:	00 00       	nop
 7bc:	95 b1       	in	r25, 0x05	; 5
 7be:	90 58       	subi	r25, 0x80	; 128
 7c0:	95 b9       	out	0x05, r25	; 5
 7c2:	9f ef       	ldi	r25, 0xFF	; 255
 7c4:	e9 e6       	ldi	r30, 0x69	; 105
 7c6:	78 e1       	ldi	r23, 0x18	; 24
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	e0 40       	sbci	r30, 0x00	; 0
 7cc:	70 40       	sbci	r23, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <x_stack_overflow+0x48>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <x_stack_overflow+0x52>
 7d2:	00 00       	nop
 7d4:	2f 5f       	subi	r18, 0xFF	; 255
 7d6:	3f 4f       	sbci	r19, 0xFF	; 255
 7d8:	42 17       	cp	r20, r18
 7da:	53 07       	cpc	r21, r19
 7dc:	1c f7       	brge	.-58     	; 0x7a4 <x_stack_overflow+0x24>
 7de:	9f ef       	ldi	r25, 0xFF	; 255
 7e0:	e3 e2       	ldi	r30, 0x23	; 35
 7e2:	24 ef       	ldi	r18, 0xF4	; 244
 7e4:	91 50       	subi	r25, 0x01	; 1
 7e6:	e0 40       	sbci	r30, 0x00	; 0
 7e8:	20 40       	sbci	r18, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <x_stack_overflow+0x64>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <x_stack_overflow+0x6e>
 7ee:	00 00       	nop
 7f0:	d5 cf       	rjmp	.-86     	; 0x79c <x_stack_overflow+0x1c>

000007f2 <__divmodhi4>:
 7f2:	97 fb       	bst	r25, 7
 7f4:	07 2e       	mov	r0, r23
 7f6:	16 f4       	brtc	.+4      	; 0x7fc <__divmodhi4+0xa>
 7f8:	00 94       	com	r0
 7fa:	06 d0       	rcall	.+12     	; 0x808 <__divmodhi4_neg1>
 7fc:	77 fd       	sbrc	r23, 7
 7fe:	08 d0       	rcall	.+16     	; 0x810 <__divmodhi4_neg2>
 800:	27 d0       	rcall	.+78     	; 0x850 <__udivmodhi4>
 802:	07 fc       	sbrc	r0, 7
 804:	05 d0       	rcall	.+10     	; 0x810 <__divmodhi4_neg2>
 806:	3e f4       	brtc	.+14     	; 0x816 <__divmodhi4_exit>

00000808 <__divmodhi4_neg1>:
 808:	90 95       	com	r25
 80a:	81 95       	neg	r24
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <__divmodhi4_neg2>:
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255

00000816 <__divmodhi4_exit>:
 816:	08 95       	ret

00000818 <__divmodsi4>:
 818:	05 2e       	mov	r0, r21
 81a:	97 fb       	bst	r25, 7
 81c:	16 f4       	brtc	.+4      	; 0x822 <__divmodsi4+0xa>
 81e:	00 94       	com	r0
 820:	0f d0       	rcall	.+30     	; 0x840 <__negsi2>
 822:	57 fd       	sbrc	r21, 7
 824:	05 d0       	rcall	.+10     	; 0x830 <__divmodsi4_neg2>
 826:	28 d0       	rcall	.+80     	; 0x878 <__udivmodsi4>
 828:	07 fc       	sbrc	r0, 7
 82a:	02 d0       	rcall	.+4      	; 0x830 <__divmodsi4_neg2>
 82c:	46 f4       	brtc	.+16     	; 0x83e <__divmodsi4_exit>
 82e:	08 c0       	rjmp	.+16     	; 0x840 <__negsi2>

00000830 <__divmodsi4_neg2>:
 830:	50 95       	com	r21
 832:	40 95       	com	r20
 834:	30 95       	com	r19
 836:	21 95       	neg	r18
 838:	3f 4f       	sbci	r19, 0xFF	; 255
 83a:	4f 4f       	sbci	r20, 0xFF	; 255
 83c:	5f 4f       	sbci	r21, 0xFF	; 255

0000083e <__divmodsi4_exit>:
 83e:	08 95       	ret

00000840 <__negsi2>:
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__udivmodhi4>:
 850:	aa 1b       	sub	r26, r26
 852:	bb 1b       	sub	r27, r27
 854:	51 e1       	ldi	r21, 0x11	; 17
 856:	07 c0       	rjmp	.+14     	; 0x866 <__udivmodhi4_ep>

00000858 <__udivmodhi4_loop>:
 858:	aa 1f       	adc	r26, r26
 85a:	bb 1f       	adc	r27, r27
 85c:	a6 17       	cp	r26, r22
 85e:	b7 07       	cpc	r27, r23
 860:	10 f0       	brcs	.+4      	; 0x866 <__udivmodhi4_ep>
 862:	a6 1b       	sub	r26, r22
 864:	b7 0b       	sbc	r27, r23

00000866 <__udivmodhi4_ep>:
 866:	88 1f       	adc	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	5a 95       	dec	r21
 86c:	a9 f7       	brne	.-22     	; 0x858 <__udivmodhi4_loop>
 86e:	80 95       	com	r24
 870:	90 95       	com	r25
 872:	bc 01       	movw	r22, r24
 874:	cd 01       	movw	r24, r26
 876:	08 95       	ret

00000878 <__udivmodsi4>:
 878:	a1 e2       	ldi	r26, 0x21	; 33
 87a:	1a 2e       	mov	r1, r26
 87c:	aa 1b       	sub	r26, r26
 87e:	bb 1b       	sub	r27, r27
 880:	fd 01       	movw	r30, r26
 882:	0d c0       	rjmp	.+26     	; 0x89e <__udivmodsi4_ep>

00000884 <__udivmodsi4_loop>:
 884:	aa 1f       	adc	r26, r26
 886:	bb 1f       	adc	r27, r27
 888:	ee 1f       	adc	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	a2 17       	cp	r26, r18
 88e:	b3 07       	cpc	r27, r19
 890:	e4 07       	cpc	r30, r20
 892:	f5 07       	cpc	r31, r21
 894:	20 f0       	brcs	.+8      	; 0x89e <__udivmodsi4_ep>
 896:	a2 1b       	sub	r26, r18
 898:	b3 0b       	sbc	r27, r19
 89a:	e4 0b       	sbc	r30, r20
 89c:	f5 0b       	sbc	r31, r21

0000089e <__udivmodsi4_ep>:
 89e:	66 1f       	adc	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	1a 94       	dec	r1
 8a8:	69 f7       	brne	.-38     	; 0x884 <__udivmodsi4_loop>
 8aa:	60 95       	com	r22
 8ac:	70 95       	com	r23
 8ae:	80 95       	com	r24
 8b0:	90 95       	com	r25
 8b2:	9b 01       	movw	r18, r22
 8b4:	ac 01       	movw	r20, r24
 8b6:	bd 01       	movw	r22, r26
 8b8:	cf 01       	movw	r24, r30
 8ba:	08 95       	ret

000008bc <itoa>:
 8bc:	45 32       	cpi	r20, 0x25	; 37
 8be:	51 05       	cpc	r21, r1
 8c0:	18 f4       	brcc	.+6      	; 0x8c8 <itoa+0xc>
 8c2:	42 30       	cpi	r20, 0x02	; 2
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <itoa+0xc>
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <__itoa_ncheck>
 8c8:	fb 01       	movw	r30, r22
 8ca:	10 82       	st	Z, r1
 8cc:	cb 01       	movw	r24, r22
 8ce:	08 95       	ret

000008d0 <__itoa_ncheck>:
 8d0:	bb 27       	eor	r27, r27
 8d2:	4a 30       	cpi	r20, 0x0A	; 10
 8d4:	31 f4       	brne	.+12     	; 0x8e2 <__itoa_ncheck+0x12>
 8d6:	99 23       	and	r25, r25
 8d8:	22 f4       	brpl	.+8      	; 0x8e2 <__itoa_ncheck+0x12>
 8da:	bd e2       	ldi	r27, 0x2D	; 45
 8dc:	90 95       	com	r25
 8de:	81 95       	neg	r24
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__utoa_common>

000008e4 <__utoa_ncheck>:
 8e4:	bb 27       	eor	r27, r27

000008e6 <__utoa_common>:
 8e6:	fb 01       	movw	r30, r22
 8e8:	55 27       	eor	r21, r21
 8ea:	aa 27       	eor	r26, r26
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	aa 1f       	adc	r26, r26
 8f2:	a4 17       	cp	r26, r20
 8f4:	10 f0       	brcs	.+4      	; 0x8fa <__utoa_common+0x14>
 8f6:	a4 1b       	sub	r26, r20
 8f8:	83 95       	inc	r24
 8fa:	50 51       	subi	r21, 0x10	; 16
 8fc:	b9 f7       	brne	.-18     	; 0x8ec <__utoa_common+0x6>
 8fe:	a0 5d       	subi	r26, 0xD0	; 208
 900:	aa 33       	cpi	r26, 0x3A	; 58
 902:	08 f0       	brcs	.+2      	; 0x906 <__utoa_common+0x20>
 904:	a9 5d       	subi	r26, 0xD9	; 217
 906:	a1 93       	st	Z+, r26
 908:	00 97       	sbiw	r24, 0x00	; 0
 90a:	79 f7       	brne	.-34     	; 0x8ea <__utoa_common+0x4>
 90c:	b1 11       	cpse	r27, r1
 90e:	b1 93       	st	Z+, r27
 910:	11 92       	st	Z+, r1
 912:	cb 01       	movw	r24, r22
 914:	00 c0       	rjmp	.+0      	; 0x916 <strrev>

00000916 <strrev>:
 916:	dc 01       	movw	r26, r24
 918:	fc 01       	movw	r30, r24
 91a:	67 2f       	mov	r22, r23
 91c:	71 91       	ld	r23, Z+
 91e:	77 23       	and	r23, r23
 920:	e1 f7       	brne	.-8      	; 0x91a <strrev+0x4>
 922:	32 97       	sbiw	r30, 0x02	; 2
 924:	04 c0       	rjmp	.+8      	; 0x92e <strrev+0x18>
 926:	7c 91       	ld	r23, X
 928:	6d 93       	st	X+, r22
 92a:	70 83       	st	Z, r23
 92c:	62 91       	ld	r22, -Z
 92e:	ae 17       	cp	r26, r30
 930:	bf 07       	cpc	r27, r31
 932:	c8 f3       	brcs	.-14     	; 0x926 <strrev+0x10>
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
