
TempHumidity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000490  00800200  00000b74  00000c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000847  00800690  00800690  00001098  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001138  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000210a  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001141  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb7  00000000  00000000  000044c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  0000547c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  000057c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea5  00000000  00000000  00006122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006fc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c4       	rjmp	.+2252   	; 0x922 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	16 e0       	ldi	r17, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 39       	cpi	r26, 0x90	; 144
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2e e0       	ldi	r18, 0x0E	; 14
 110:	a0 e9       	ldi	r26, 0x90	; 144
 112:	b6 e0       	ldi	r27, 0x06	; 6
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 3d       	cpi	r26, 0xD7	; 215
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c8 d0       	rcall	.+400    	; 0x2b0 <main>
 120:	27 c5       	rjmp	.+2638   	; 0xb70 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <x_thread_id>
 14c:	30 91 d6 0e 	lds	r19, 0x0ED6	; 0x800ed6 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	e4 ea       	ldi	r30, 0xA4	; 164
 15a:	f6 e0       	ldi	r31, 0x06	; 6
 15c:	22 0f       	add	r18, r18
 15e:	c0 ee       	ldi	r28, 0xE0	; 224
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	20 c4       	rjmp	.+2112   	; 0x9ba <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 d5 0e 	lds	r18, 0x0ED5	; 0x800ed5 <x_disable_status>
 188:	30 91 a3 06 	lds	r19, 0x06A3	; 0x8006a3 <x_delay_status>
 18c:	40 91 c4 06 	lds	r20, 0x06C4	; 0x8006c4 <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 a2 06 	lds	r19, 0x06A2	; 0x8006a2 <x_thread_id>
 198:	40 91 d6 0e 	lds	r20, 0x0ED6	; 0x800ed6 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 a2 06 	sts	0x06A2, r19	; 0x8006a2 <x_thread_id>
 1b8:	70 93 d6 0e 	sts	0x0ED6, r23	; 0x800ed6 <x_thread_mask>
 1bc:	e4 ea       	ldi	r30, 0xA4	; 164
 1be:	f6 e0       	ldi	r31, 0x06	; 6
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <ledThread>:
		data = UDR0;
		break;
	}

	return data;
}
 216:	38 9a       	sbi	0x07, 0	; 7
 218:	c1 e0       	ldi	r28, 0x01	; 1
 21a:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <temperature>
 21e:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <temperature+0x1>
 222:	8e 34       	cpi	r24, 0x4E	; 78
 224:	91 05       	cpc	r25, r1
 226:	2c f4       	brge	.+10     	; 0x232 <ledThread+0x1c>
 228:	c8 b9       	out	0x08, r28	; 8
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	63 d3       	rcall	.+1734   	; 0x8f6 <x_delay>
 230:	f4 cf       	rjmp	.-24     	; 0x21a <ledThread+0x4>
 232:	18 b8       	out	0x08, r1	; 8
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	5e d3       	rcall	.+1724   	; 0x8f6 <x_delay>
 23a:	ef cf       	rjmp	.-34     	; 0x21a <ledThread+0x4>

0000023c <resetState>:
 23c:	78 94       	sei
 23e:	e8 e9       	ldi	r30, 0x98	; 152
 240:	f6 e0       	ldi	r31, 0x06	; 6
 242:	11 82       	std	Z+1, r1	; 0x01
 244:	10 82       	st	Z, r1
 246:	13 82       	std	Z+3, r1	; 0x03
 248:	12 82       	std	Z+2, r1	; 0x02
 24a:	15 82       	std	Z+5, r1	; 0x05
 24c:	14 82       	std	Z+4, r1	; 0x04
 24e:	17 82       	std	Z+7, r1	; 0x07
 250:	16 82       	std	Z+6, r1	; 0x06
 252:	11 86       	std	Z+9, r1	; 0x09
 254:	10 86       	std	Z+8, r1	; 0x08
 256:	08 95       	ret

00000258 <serial_open>:
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	6a 01       	movw	r12, r20
 266:	7b 01       	movw	r14, r22
 268:	c8 2f       	mov	r28, r24
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	cc 0f       	add	r28, r28
 26e:	dd 1f       	adc	r29, r29
 270:	c0 50       	subi	r28, 0x00	; 0
 272:	de 4f       	sbci	r29, 0xFE	; 254
 274:	e8 81       	ld	r30, Y
 276:	f9 81       	ldd	r31, Y+1	; 0x01
 278:	88 e1       	ldi	r24, 0x18	; 24
 27a:	81 83       	std	Z+1, r24	; 0x01
 27c:	e8 81       	ld	r30, Y
 27e:	f9 81       	ldd	r31, Y+1	; 0x01
 280:	22 83       	std	Z+2, r18	; 0x02
 282:	60 e4       	ldi	r22, 0x40	; 64
 284:	72 e4       	ldi	r23, 0x42	; 66
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	a7 01       	movw	r20, r14
 28c:	96 01       	movw	r18, r12
 28e:	e1 d3       	rcall	.+1986   	; 0xa52 <__divmodsi4>
 290:	e8 81       	ld	r30, Y
 292:	f9 81       	ldd	r31, Y+1	; 0x01
 294:	da 01       	movw	r26, r20
 296:	c9 01       	movw	r24, r18
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	a1 09       	sbc	r26, r1
 29c:	b1 09       	sbc	r27, r1
 29e:	95 83       	std	Z+5, r25	; 0x05
 2a0:	84 83       	std	Z+4, r24	; 0x04
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	08 95       	ret

000002b0 <main>:
 2b0:	26 e0       	ldi	r18, 0x06	; 6
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	5b e4       	ldi	r21, 0x4B	; 75
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	cc df       	rcall	.-104    	; 0x258 <serial_open>
 2c0:	a3 d2       	rcall	.+1350   	; 0x808 <x_init>
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	6b e0       	ldi	r22, 0x0B	; 11
 2c6:	71 e0       	ldi	r23, 0x01	; 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	60 d2       	rcall	.+1216   	; 0x78c <x_new>
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	6e eb       	ldi	r22, 0xBE	; 190
 2d0:	73 e0       	ldi	r23, 0x03	; 3
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	5b d2       	rcall	.+1206   	; 0x78c <x_new>
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <main+0x26>

000002d8 <serial_write>:
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	81 f0       	breq	.+32     	; 0x2fc <serial_write+0x24>
 2dc:	38 f0       	brcs	.+14     	; 0x2ec <serial_write+0x14>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	a9 f0       	breq	.+42     	; 0x30c <serial_write+0x34>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	d9 f0       	breq	.+54     	; 0x31c <serial_write+0x44>
 2e6:	e0 ec       	ldi	r30, 0xC0	; 192
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	20 c0       	rjmp	.+64     	; 0x32c <serial_write+0x54>
 2ec:	e0 ec       	ldi	r30, 0xC0	; 192
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	85 ff       	sbrs	r24, 5
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <serial_write+0x18>
 2f6:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2fa:	08 95       	ret
 2fc:	e8 ec       	ldi	r30, 0xC8	; 200
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	85 ff       	sbrs	r24, 5
 304:	fd cf       	rjmp	.-6      	; 0x300 <serial_write+0x28>
 306:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 30a:	08 95       	ret
 30c:	e0 ed       	ldi	r30, 0xD0	; 208
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	85 ff       	sbrs	r24, 5
 314:	fd cf       	rjmp	.-6      	; 0x310 <serial_write+0x38>
 316:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 31a:	08 95       	ret
 31c:	e0 e3       	ldi	r30, 0x30	; 48
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	80 81       	ld	r24, Z
 322:	85 ff       	sbrs	r24, 5
 324:	fd cf       	rjmp	.-6      	; 0x320 <serial_write+0x48>
 326:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 32a:	08 95       	ret
 32c:	80 81       	ld	r24, Z
 32e:	85 ff       	sbrs	r24, 5
 330:	fd cf       	rjmp	.-6      	; 0x32c <serial_write+0x54>
 332:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 336:	08 95       	ret

00000338 <serial_print>:
/***********************************************************************
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
	while(*data)
 33c:	fc 01       	movw	r30, r24
 33e:	60 81       	ld	r22, Z
 340:	66 23       	and	r22, r22
 342:	39 f0       	breq	.+14     	; 0x352 <serial_print+0x1a>
 344:	ec 01       	movw	r28, r24
 346:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_write(0, *data++);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	c6 df       	rcall	.-116    	; 0x2d8 <serial_write>
* Function that writes a string to the terminal
* data: character buffer
***********************************************************************/
void serial_print(char* data)
{
	while(*data)
 34c:	69 91       	ld	r22, Y+
 34e:	61 11       	cpse	r22, r1
 350:	fb cf       	rjmp	.-10     	; 0x348 <serial_print+0x10>
	{
		serial_write(0, *data++);
	}   
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <printTemperature>:
* value to properly calculate the temperature from Celsius to Fahrenheit.
* bytes2: upper 8 bits from Temperature data
* bytes3: lower 8 bits from Temperature data
***********************************************************************/
void printTemperature(uint8_t bytes2, uint8_t bytes3)
{
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	28 97       	sbiw	r28, 0x08	; 8
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	
	int temp = ((bytes2) << 8) | bytes3; // store bytes into single var
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	9b 01       	movw	r18, r22
 37c:	38 2b       	or	r19, r24
 37e:	c9 01       	movw	r24, r18
	temp = temp / 10; // Calculate the whole number 
 380:	0f 2e       	mov	r0, r31
 382:	fa e0       	ldi	r31, 0x0A	; 10
 384:	cf 2e       	mov	r12, r31
 386:	d1 2c       	mov	r13, r1
 388:	f0 2d       	mov	r31, r0
 38a:	b6 01       	movw	r22, r12
 38c:	4f d3       	rcall	.+1694   	; 0xa2c <__divmodhi4>
 38e:	7b 01       	movw	r14, r22
	int remainder = temp % 10; // Calculate the fraction
	temp = ((temp * 9) / 5) + 32; // Converting Celsius to Fahrenheit
 390:	cb 01       	movw	r24, r22
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	86 0f       	add	r24, r22
 3a0:	97 1f       	adc	r25, r23
 3a2:	65 e0       	ldi	r22, 0x05	; 5
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	42 d3       	rcall	.+1668   	; 0xa2c <__divmodhi4>
 3a8:	8b 01       	movw	r16, r22
 3aa:	00 5e       	subi	r16, 0xE0	; 224
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
	if (bytes2 < 0) temp = temp * -1; // If negative, print it as such
	itoa(temp, buffer, 10); // Convert data to string
 3ae:	4a e0       	ldi	r20, 0x0A	; 10
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	be 01       	movw	r22, r28
 3b4:	6f 5f       	subi	r22, 0xFF	; 255
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	c8 01       	movw	r24, r16
 3ba:	9d d3       	rcall	.+1850   	; 0xaf6 <itoa>
	serial_print(" TMP= ");
 3bc:	80 ef       	ldi	r24, 0xF0	; 240
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	bb df       	rcall	.-138    	; 0x338 <serial_print>
	serial_print(buffer);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	b8 df       	rcall	.-144    	; 0x338 <serial_print>
{
	char buffer[8];
	
	int temp = ((bytes2) << 8) | bytes3; // store bytes into single var
	temp = temp / 10; // Calculate the whole number 
	int remainder = temp % 10; // Calculate the fraction
 3c8:	c7 01       	movw	r24, r14
 3ca:	b6 01       	movw	r22, r12
 3cc:	2f d3       	rcall	.+1630   	; 0xa2c <__divmodhi4>
	temp = ((temp * 9) / 5) + 32; // Converting Celsius to Fahrenheit
	if (bytes2 < 0) temp = temp * -1; // If negative, print it as such
	itoa(temp, buffer, 10); // Convert data to string
	serial_print(" TMP= ");
	serial_print(buffer);
	itoa(remainder, buffer, 10); // Convert data to string
 3ce:	4a e0       	ldi	r20, 0x0A	; 10
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	be 01       	movw	r22, r28
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8e d3       	rcall	.+1820   	; 0xaf6 <itoa>
	serial_print(".");
 3da:	87 ef       	ldi	r24, 0xF7	; 247
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	ac df       	rcall	.-168    	; 0x338 <serial_print>
	serial_print(buffer);
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	a9 df       	rcall	.-174    	; 0x338 <serial_print>
	serial_print(" \r");
 3e6:	88 e3       	ldi	r24, 0x38	; 56
 3e8:	93 e0       	ldi	r25, 0x03	; 3
 3ea:	a6 df       	rcall	.-180    	; 0x338 <serial_print>
	
	temperature = temp;
 3ec:	10 93 97 06 	sts	0x0697, r17	; 0x800697 <temperature+0x1>
 3f0:	00 93 96 06 	sts	0x0696, r16	; 0x800696 <temperature>
}
 3f4:	28 96       	adiw	r28, 0x08	; 8
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	08 95       	ret

00000412 <printHumidity>:
* value to properly interpret the humidity value. 
* bytes0: upper 8 bits from Humidity data
* bytes1: lower 8 bits from Humidity data
***********************************************************************/
void printHumidity(uint8_t bytes0, uint8_t bytes1)
{
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	28 97       	sbiw	r28, 0x08	; 8
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	
	int relHum = (bytes0 << 8) | bytes1; // store bytes into single var
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	9b 01       	movw	r18, r22
 432:	38 2b       	or	r19, r24
 434:	c9 01       	movw	r24, r18
	relHum = relHum / 10; // Calculate the whole number 
 436:	0a e0       	ldi	r16, 0x0A	; 10
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	b8 01       	movw	r22, r16
 43c:	f7 d2       	rcall	.+1518   	; 0xa2c <__divmodhi4>
 43e:	7b 01       	movw	r14, r22
	int remainder = relHum % 10; // Calculate the fraction
	serial_print("RHUM= "); 
 440:	89 ef       	ldi	r24, 0xF9	; 249
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	79 df       	rcall	.-270    	; 0x338 <serial_print>
	itoa(relHum, buffer, 10); // Convert data to string
 446:	4a e0       	ldi	r20, 0x0A	; 10
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	c7 01       	movw	r24, r14
 452:	51 d3       	rcall	.+1698   	; 0xaf6 <itoa>
	serial_print(buffer);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	6f df       	rcall	.-290    	; 0x338 <serial_print>
{
	char buffer[8];
	
	int relHum = (bytes0 << 8) | bytes1; // store bytes into single var
	relHum = relHum / 10; // Calculate the whole number 
	int remainder = relHum % 10; // Calculate the fraction
 45a:	c7 01       	movw	r24, r14
 45c:	b8 01       	movw	r22, r16
 45e:	e6 d2       	rcall	.+1484   	; 0xa2c <__divmodhi4>
	serial_print("RHUM= "); 
	itoa(relHum, buffer, 10); // Convert data to string
	serial_print(buffer);
	itoa(remainder, buffer, 10); // Convert data to string
 460:	4a e0       	ldi	r20, 0x0A	; 10
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	be 01       	movw	r22, r28
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	45 d3       	rcall	.+1674   	; 0xaf6 <itoa>
	serial_print(".");
 46c:	87 ef       	ldi	r24, 0xF7	; 247
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	63 df       	rcall	.-314    	; 0x338 <serial_print>
	serial_print(buffer);
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	60 df       	rcall	.-320    	; 0x338 <serial_print>
	serial_print(", ");
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	93 e0       	ldi	r25, 0x03	; 3
 47c:	5d df       	rcall	.-326    	; 0x338 <serial_print>
}
 47e:	28 96       	adiw	r28, 0x08	; 8
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	08 95       	ret

00000498 <checkSum>:
* If so, it prints the data. Otherwise, it'll print a checksum error.
***********************************************************************/
void checkSum()
{
	unsigned char sum;
	sum = bytes[0] + bytes[1] + bytes[2] + bytes[3];
 498:	e8 e9       	ldi	r30, 0x98	; 152
 49a:	f6 e0       	ldi	r31, 0x06	; 6
 49c:	80 81       	ld	r24, Z
 49e:	62 81       	ldd	r22, Z+2	; 0x02
 4a0:	26 2f       	mov	r18, r22
 4a2:	28 0f       	add	r18, r24
 4a4:	94 81       	ldd	r25, Z+4	; 0x04
 4a6:	29 0f       	add	r18, r25
 4a8:	96 81       	ldd	r25, Z+6	; 0x06
 4aa:	29 0f       	add	r18, r25
	if(bytes[4] == sum)
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 85       	ldd	r20, Z+8	; 0x08
 4b0:	51 85       	ldd	r21, Z+9	; 0x09
 4b2:	42 17       	cp	r20, r18
 4b4:	53 07       	cpc	r21, r19
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <checkSum+0x2e>
	{
		printHumidity(bytes[0], bytes[1]);
 4b8:	ac df       	rcall	.-168    	; 0x412 <printHumidity>
		printTemperature(bytes[2], bytes[3]);
 4ba:	e8 e9       	ldi	r30, 0x98	; 152
 4bc:	f6 e0       	ldi	r31, 0x06	; 6
 4be:	66 81       	ldd	r22, Z+6	; 0x06
 4c0:	84 81       	ldd	r24, Z+4	; 0x04
 4c2:	4a cf       	rjmp	.-364    	; 0x358 <printTemperature>
 4c4:	08 95       	ret
	}
	else
	{
		serial_print("Checksum Error. \r");
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	93 e0       	ldi	r25, 0x03	; 3
 4ca:	36 cf       	rjmp	.-404    	; 0x338 <serial_print>
 4cc:	08 95       	ret

000004ce <pinMode>:
* internal pull-up, or an output.
* pin: the number of the pin whose mode you wish to set
* mode: INPUT, OUTPUT, or INPUT_PULLUP
***********************************************************************/
void pinMode(int pin, char mode)
{
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ec 01       	movw	r28, r24
 4d6:	16 2f       	mov	r17, r22
	// Not a port or not a pin
	if (pin > 53 || pin < 0)
 4d8:	c6 97       	sbiw	r24, 0x36	; 54
 4da:	18 f0       	brcs	.+6      	; 0x4e2 <pinMode+0x14>
	{
		serial_print("Error: Invalid PIN number (0 - 53). \r");
 4dc:	85 e1       	ldi	r24, 0x15	; 21
 4de:	93 e0       	ldi	r25, 0x03	; 3
 4e0:	2b df       	rcall	.-426    	; 0x338 <serial_print>
	}
	if (mode < 0 || mode > 2)
 4e2:	13 30       	cpi	r17, 0x03	; 3
 4e4:	18 f0       	brcs	.+6      	; 0x4ec <pinMode+0x1e>
	{
		serial_print("Error: Invalid MODE (INPUT, OUTPUT, INPUT_PULLUP). \r");
 4e6:	8b e3       	ldi	r24, 0x3B	; 59
 4e8:	93 e0       	ldi	r25, 0x03	; 3
 4ea:	26 df       	rcall	.-436    	; 0x338 <serial_print>
	}

	if (mode == INPUT)
 4ec:	11 11       	cpse	r17, r1
 4ee:	23 c0       	rjmp	.+70     	; 0x536 <pinMode+0x68>
	{
		*(map[pin].ddr) &= ~(1 << map[pin].bitShift);
 4f0:	cc 0f       	add	r28, r28
 4f2:	dd 1f       	adc	r29, r29
 4f4:	cc 0f       	add	r28, r28
 4f6:	dd 1f       	adc	r29, r29
 4f8:	c8 5f       	subi	r28, 0xF8	; 248
 4fa:	dd 4f       	sbci	r29, 0xFD	; 253
 4fc:	e8 81       	ld	r30, Y
 4fe:	f9 81       	ldd	r31, Y+1	; 0x01
 500:	30 81       	ld	r19, Z
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	ac 01       	movw	r20, r24
 508:	0b 80       	ldd	r0, Y+3	; 0x03
 50a:	02 c0       	rjmp	.+4      	; 0x510 <pinMode+0x42>
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <pinMode+0x3e>
 514:	24 2f       	mov	r18, r20
 516:	20 95       	com	r18
 518:	23 23       	and	r18, r19
 51a:	20 83       	st	Z, r18
		*(map[pin].ddr + 1) &= ~(1 << map[pin].bitShift);
 51c:	e8 81       	ld	r30, Y
 51e:	f9 81       	ldd	r31, Y+1	; 0x01
 520:	21 81       	ldd	r18, Z+1	; 0x01
 522:	0b 80       	ldd	r0, Y+3	; 0x03
 524:	02 c0       	rjmp	.+4      	; 0x52a <pinMode+0x5c>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <pinMode+0x58>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	81 83       	std	Z+1, r24	; 0x01
 534:	39 c0       	rjmp	.+114    	; 0x5a8 <pinMode+0xda>
	}
	else if (mode == OUTPUT)
 536:	11 30       	cpi	r17, 0x01	; 1
 538:	a1 f4       	brne	.+40     	; 0x562 <pinMode+0x94>
	{
		*(map[pin].ddr) |= (1 << map[pin].bitShift);
 53a:	cc 0f       	add	r28, r28
 53c:	dd 1f       	adc	r29, r29
 53e:	cc 0f       	add	r28, r28
 540:	dd 1f       	adc	r29, r29
 542:	c8 5f       	subi	r28, 0xF8	; 248
 544:	dd 4f       	sbci	r29, 0xFD	; 253
 546:	e8 81       	ld	r30, Y
 548:	f9 81       	ldd	r31, Y+1	; 0x01
 54a:	20 81       	ld	r18, Z
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0b 80       	ldd	r0, Y+3	; 0x03
 552:	02 c0       	rjmp	.+4      	; 0x558 <pinMode+0x8a>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <pinMode+0x86>
 55c:	82 2b       	or	r24, r18
 55e:	80 83       	st	Z, r24
 560:	23 c0       	rjmp	.+70     	; 0x5a8 <pinMode+0xda>
	}
	else if(mode == INPUT_PULLUP)
 562:	12 30       	cpi	r17, 0x02	; 2
 564:	09 f5       	brne	.+66     	; 0x5a8 <pinMode+0xda>
	{
		*(map[pin].ddr) &= ~(1 << map[pin].bitShift);
 566:	cc 0f       	add	r28, r28
 568:	dd 1f       	adc	r29, r29
 56a:	cc 0f       	add	r28, r28
 56c:	dd 1f       	adc	r29, r29
 56e:	c8 5f       	subi	r28, 0xF8	; 248
 570:	dd 4f       	sbci	r29, 0xFD	; 253
 572:	e8 81       	ld	r30, Y
 574:	f9 81       	ldd	r31, Y+1	; 0x01
 576:	30 81       	ld	r19, Z
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	ac 01       	movw	r20, r24
 57e:	0b 80       	ldd	r0, Y+3	; 0x03
 580:	02 c0       	rjmp	.+4      	; 0x586 <pinMode+0xb8>
 582:	44 0f       	add	r20, r20
 584:	55 1f       	adc	r21, r21
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <pinMode+0xb4>
 58a:	24 2f       	mov	r18, r20
 58c:	20 95       	com	r18
 58e:	23 23       	and	r18, r19
 590:	20 83       	st	Z, r18
		*(map[pin].ddr + 1) |= (1 << map[pin].bitShift);
 592:	e8 81       	ld	r30, Y
 594:	f9 81       	ldd	r31, Y+1	; 0x01
 596:	21 81       	ldd	r18, Z+1	; 0x01
 598:	0b 80       	ldd	r0, Y+3	; 0x03
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <pinMode+0xd2>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <pinMode+0xce>
 5a4:	82 2b       	or	r24, r18
 5a6:	81 83       	std	Z+1, r24	; 0x01
	}
	
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	08 95       	ret

000005b0 <digitalRead>:
/***********************************************************************
* Reads the value from a specified digital pin, either HIGH or LOW.
* pin: the number of the pin whose mode you wish to set
***********************************************************************/
int digitalRead(int pin)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ec 01       	movw	r28, r24
	// Not a pin
	if (pin > 53 || pin < 0)
 5b6:	c6 97       	sbiw	r24, 0x36	; 54
 5b8:	18 f0       	brcs	.+6      	; 0x5c0 <digitalRead+0x10>
	{
		serial_print("Error: Invalid PIN number (0 - 53). \r");
 5ba:	85 e1       	ldi	r24, 0x15	; 21
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	bc de       	rcall	.-648    	; 0x338 <serial_print>
	}
	
	return (*(map[pin].ddr - 1) & (1 << map[pin].bitShift)) ? 1 : 0;
 5c0:	cc 0f       	add	r28, r28
 5c2:	dd 1f       	adc	r29, r29
 5c4:	cc 0f       	add	r28, r28
 5c6:	dd 1f       	adc	r29, r29
 5c8:	c8 5f       	subi	r28, 0xF8	; 248
 5ca:	dd 4f       	sbci	r29, 0xFD	; 253
 5cc:	e8 81       	ld	r30, Y
 5ce:	f9 81       	ldd	r31, Y+1	; 0x01
 5d0:	31 97       	sbiw	r30, 0x01	; 1
 5d2:	80 81       	ld	r24, Z
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0b 80       	ldd	r0, Y+3	; 0x03
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <digitalRead+0x2e>
 5da:	95 95       	asr	r25
 5dc:	87 95       	ror	r24
 5de:	0a 94       	dec	r0
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <digitalRead+0x2a>

}
 5e2:	81 70       	andi	r24, 0x01	; 1
 5e4:	99 27       	eor	r25, r25
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <storeDataBytes>:
* bytes[ 0-1 ] will contain humidity
* bytes[ 2-4 ] will contain temperature
* bytes[  5  ] will contain check sum
***********************************************************************/
void storeDataBytes()
{
 5ec:	cf 92       	push	r12
 5ee:	df 92       	push	r13
 5f0:	ef 92       	push	r14
 5f2:	ff 92       	push	r15
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	08 e9       	ldi	r16, 0x98	; 152
 5fe:	16 e0       	ldi	r17, 0x06	; 6
 600:	0f 2e       	mov	r0, r31
 602:	f2 ea       	ldi	r31, 0xA2	; 162
 604:	ef 2e       	mov	r14, r31
 606:	f6 e0       	ldi	r31, 0x06	; 6
 608:	ff 2e       	mov	r15, r31
 60a:	f0 2d       	mov	r31, r0
	for (int i = 0; i < 5; i++) // 2B RH data, 2B T data, 1B checksum
	{
		getByte = 0; // reset data
 60c:	68 94       	set
 60e:	cc 24       	eor	r12, r12
 610:	c3 f8       	bld	r12, 3
 612:	d1 2c       	mov	r13, r1
 614:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <getByte+0x1>
 618:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <getByte>
 61c:	cc 2d       	mov	r28, r12
 61e:	dd 2d       	mov	r29, r13
		for (int j = 0; j < 8; j++) // 8 bits for each byte
		{
			getByte <<= 1; // mask
 620:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <getByte>
 624:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <getByte+0x1>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <getByte+0x1>
 630:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <getByte>
			while (digitalRead(DATA_PIN)); // Wait for sensor to drive LOW
 634:	87 e0       	ldi	r24, 0x07	; 7
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	bb df       	rcall	.-138    	; 0x5b0 <digitalRead>
 63a:	89 2b       	or	r24, r25
 63c:	d9 f7       	brne	.-10     	; 0x634 <storeDataBytes+0x48>
			while (!digitalRead(DATA_PIN)); // Wait for sensor to drive HIGH
 63e:	87 e0       	ldi	r24, 0x07	; 7
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	b6 df       	rcall	.-148    	; 0x5b0 <digitalRead>
 644:	89 2b       	or	r24, r25
 646:	d9 f3       	breq	.-10     	; 0x63e <storeDataBytes+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 648:	f0 ea       	ldi	r31, 0xA0	; 160
 64a:	fa 95       	dec	r31
 64c:	f1 f7       	brne	.-4      	; 0x64a <storeDataBytes+0x5e>
			
			_delay_us(30); // while in high, 26-30 ms indicates a logical 0
			
			// so more than that, indicates a logical 1
			if (digitalRead(DATA_PIN)) getByte |= 1; 
 64e:	87 e0       	ldi	r24, 0x07	; 7
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	ae df       	rcall	.-164    	; 0x5b0 <digitalRead>
 654:	89 2b       	or	r24, r25
 656:	49 f0       	breq	.+18     	; 0x66a <storeDataBytes+0x7e>
 658:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <getByte>
 65c:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <getByte+0x1>
 660:	81 60       	ori	r24, 0x01	; 1
 662:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <getByte+0x1>
 666:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <getByte>
 66a:	21 97       	sbiw	r28, 0x01	; 1
void storeDataBytes()
{
	for (int i = 0; i < 5; i++) // 2B RH data, 2B T data, 1B checksum
	{
		getByte = 0; // reset data
		for (int j = 0; j < 8; j++) // 8 bits for each byte
 66c:	c9 f6       	brne	.-78     	; 0x620 <storeDataBytes+0x34>
			_delay_us(30); // while in high, 26-30 ms indicates a logical 0
			
			// so more than that, indicates a logical 1
			if (digitalRead(DATA_PIN)) getByte |= 1; 
		}
		bytes[i] = getByte; // store byte
 66e:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <getByte>
 672:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <getByte+0x1>
 676:	f8 01       	movw	r30, r16
 678:	81 93       	st	Z+, r24
 67a:	91 93       	st	Z+, r25
 67c:	8f 01       	movw	r16, r30
* bytes[ 2-4 ] will contain temperature
* bytes[  5  ] will contain check sum
***********************************************************************/
void storeDataBytes()
{
	for (int i = 0; i < 5; i++) // 2B RH data, 2B T data, 1B checksum
 67e:	ee 15       	cp	r30, r14
 680:	ff 05       	cpc	r31, r15
 682:	41 f6       	brne	.-112    	; 0x614 <storeDataBytes+0x28>
			// so more than that, indicates a logical 1
			if (digitalRead(DATA_PIN)) getByte |= 1; 
		}
		bytes[i] = getByte; // store byte
	}
}
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	ff 90       	pop	r15
 68e:	ef 90       	pop	r14
 690:	df 90       	pop	r13
 692:	cf 90       	pop	r12
 694:	08 95       	ret

00000696 <digitalWrite>:
* Writes a HIGH or a LOW value to a digital pin.
* pin: the number of the pin whose mode you wish to set
* value: HIGH or LOW
***********************************************************************/
void digitalWrite(int pin, int value)
{
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	ec 01       	movw	r28, r24
 6a0:	8b 01       	movw	r16, r22
	// Not a pin or not a possible value
	if (pin > 53 || pin < 0)
 6a2:	c6 97       	sbiw	r24, 0x36	; 54
 6a4:	18 f0       	brcs	.+6      	; 0x6ac <digitalWrite+0x16>
	{
		serial_print("Error: Invalid PIN number (0 - 53). \r");
 6a6:	85 e1       	ldi	r24, 0x15	; 21
 6a8:	93 e0       	ldi	r25, 0x03	; 3
 6aa:	46 de       	rcall	.-884    	; 0x338 <serial_print>
	}
	if (value < 0 || value > 1)
 6ac:	02 30       	cpi	r16, 0x02	; 2
 6ae:	11 05       	cpc	r17, r1
 6b0:	18 f0       	brcs	.+6      	; 0x6b8 <digitalWrite+0x22>
	{
		serial_print("Error: Invalid VALUE (HIGH, LOW). \r");
 6b2:	80 e7       	ldi	r24, 0x70	; 112
 6b4:	93 e0       	ldi	r25, 0x03	; 3
 6b6:	40 de       	rcall	.-896    	; 0x338 <serial_print>
	}
	
	if (value == HIGH)
 6b8:	01 30       	cpi	r16, 0x01	; 1
 6ba:	11 05       	cpc	r17, r1
 6bc:	a1 f4       	brne	.+40     	; 0x6e6 <digitalWrite+0x50>
	{
		*(map[pin].ddr + 1) |= (1 << map[pin].bitShift);
 6be:	cc 0f       	add	r28, r28
 6c0:	dd 1f       	adc	r29, r29
 6c2:	cc 0f       	add	r28, r28
 6c4:	dd 1f       	adc	r29, r29
 6c6:	c8 5f       	subi	r28, 0xF8	; 248
 6c8:	dd 4f       	sbci	r29, 0xFD	; 253
 6ca:	e8 81       	ld	r30, Y
 6cc:	f9 81       	ldd	r31, Y+1	; 0x01
 6ce:	21 81       	ldd	r18, Z+1	; 0x01
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0b 80       	ldd	r0, Y+3	; 0x03
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <digitalWrite+0x46>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	0a 94       	dec	r0
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <digitalWrite+0x42>
 6e0:	82 2b       	or	r24, r18
 6e2:	81 83       	std	Z+1, r24	; 0x01
 6e4:	14 c0       	rjmp	.+40     	; 0x70e <digitalWrite+0x78>
	}
	else
	{
		*(map[pin].ddr + 1) &= ~(1 << map[pin].bitShift);
 6e6:	cc 0f       	add	r28, r28
 6e8:	dd 1f       	adc	r29, r29
 6ea:	cc 0f       	add	r28, r28
 6ec:	dd 1f       	adc	r29, r29
 6ee:	c8 5f       	subi	r28, 0xF8	; 248
 6f0:	dd 4f       	sbci	r29, 0xFD	; 253
 6f2:	e8 81       	ld	r30, Y
 6f4:	f9 81       	ldd	r31, Y+1	; 0x01
 6f6:	21 81       	ldd	r18, Z+1	; 0x01
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0b 80       	ldd	r0, Y+3	; 0x03
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <digitalWrite+0x6e>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <digitalWrite+0x6a>
 708:	80 95       	com	r24
 70a:	82 23       	and	r24, r18
 70c:	81 83       	std	Z+1, r24	; 0x01
	}
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	08 95       	ret

00000718 <sensorSetup>:
* Preliminary pin configurations for the DHT22 sensor set up. 
* Function also checks the connection.
***********************************************************************/
void sensorSetup()
{
	cli();	// Disable interrupts
 718:	f8 94       	cli
	
	pinMode(DATA_PIN, OUTPUT); // Configure digital pin for output
 71a:	61 e0       	ldi	r22, 0x01	; 1
 71c:	87 e0       	ldi	r24, 0x07	; 7
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	d6 de       	rcall	.-596    	; 0x4ce <pinMode>
	digitalWrite(DATA_PIN, LOW); // Drive line low
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	87 e0       	ldi	r24, 0x07	; 7
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	b5 df       	rcall	.-150    	; 0x696 <digitalWrite>
 72c:	8f ec       	ldi	r24, 0xCF	; 207
 72e:	97 e0       	ldi	r25, 0x07	; 7
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <sensorSetup+0x18>
 734:	00 c0       	rjmp	.+0      	; 0x736 <sensorSetup+0x1e>
 736:	00 00       	nop
	_delay_us(500); // Wait for a request to read
	
	pinMode(DATA_PIN, INPUT_PULLUP); // Activate pull-up resistor
 738:	62 e0       	ldi	r22, 0x02	; 2
 73a:	87 e0       	ldi	r24, 0x07	; 7
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	c7 de       	rcall	.-626    	; 0x4ce <pinMode>
 740:	8f e3       	ldi	r24, 0x3F	; 63
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	f1 f7       	brne	.-4      	; 0x744 <sensorSetup+0x2c>
 748:	00 c0       	rjmp	.+0      	; 0x74a <sensorSetup+0x32>
 74a:	00 00       	nop
	_delay_us(80); // Wait for a signal from sensor
	
	if (digitalRead(DATA_PIN)) // Check sensor connection during line LOW
 74c:	87 e0       	ldi	r24, 0x07	; 7
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	2f df       	rcall	.-418    	; 0x5b0 <digitalRead>
 752:	89 2b       	or	r24, r25
 754:	21 f0       	breq	.+8      	; 0x75e <sensorSetup+0x46>
	{
		serial_print("No connection response during LOW drive. Please check pin connections. \r");
 756:	84 e9       	ldi	r24, 0x94	; 148
 758:	93 e0       	ldi	r25, 0x03	; 3
 75a:	ee cd       	rjmp	.-1060   	; 0x338 <serial_print>
		return;
 75c:	08 95       	ret
 75e:	8f e3       	ldi	r24, 0x3F	; 63
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <sensorSetup+0x4a>
 766:	00 c0       	rjmp	.+0      	; 0x768 <sensorSetup+0x50>
 768:	00 00       	nop
	}
	_delay_us(80); // Line is driven LOW for 80 usecs, so wait for next check
	// Connection test when line is driven HIGH for last 80 usecs
	if (!digitalRead(DATA_PIN)) // Check sensor connection during line HIGH
 76a:	87 e0       	ldi	r24, 0x07	; 7
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	20 df       	rcall	.-448    	; 0x5b0 <digitalRead>
 770:	89 2b       	or	r24, r25
 772:	19 f4       	brne	.+6      	; 0x77a <sensorSetup+0x62>
	{
		serial_print("No connection response during HIGH drive. Please check pin connections. \r");
 774:	8d ed       	ldi	r24, 0xDD	; 221
 776:	93 e0       	ldi	r25, 0x03	; 3
 778:	df cd       	rjmp	.-1090   	; 0x338 <serial_print>
 77a:	08 95       	ret

0000077c <runSensorThread>:

void runSensorThread()
{
	while(1)
	{
		sensorSetup();
 77c:	cd df       	rcall	.-102    	; 0x718 <sensorSetup>
		storeDataBytes();
 77e:	36 df       	rcall	.-404    	; 0x5ec <storeDataBytes>
		checkSum();
 780:	8b de       	rcall	.-746    	; 0x498 <checkSum>
		resetState();
 782:	5c dd       	rcall	.-1352   	; 0x23c <resetState>
		x_delay(500);
 784:	84 ef       	ldi	r24, 0xF4	; 244
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	b6 d0       	rcall	.+364    	; 0x8f6 <x_delay>
	}
 78a:	f8 cf       	rjmp	.-16     	; 0x77c <runSensorThread>

0000078c <x_new>:
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	c8 2f       	mov	r28, r24
 792:	d4 2f       	mov	r29, r20
 794:	e8 2f       	mov	r30, r24
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	ee 0f       	add	r30, r30
 79e:	ff 1f       	adc	r31, r31
 7a0:	9f 01       	movw	r18, r30
 7a2:	2c 55       	subi	r18, 0x5C	; 92
 7a4:	39 4f       	sbci	r19, 0xF9	; 249
 7a6:	f9 01       	movw	r30, r18
 7a8:	a2 81       	ldd	r26, Z+2	; 0x02
 7aa:	b3 81       	ldd	r27, Z+3	; 0x03
 7ac:	6c 93       	st	X, r22
 7ae:	cd 01       	movw	r24, r26
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	fc 01       	movw	r30, r24
 7b4:	70 83       	st	Z, r23
 7b6:	01 97       	sbiw	r24, 0x01	; 1
 7b8:	fc 01       	movw	r30, r24
 7ba:	10 82       	st	Z, r1
 7bc:	55 97       	sbiw	r26, 0x15	; 21
 7be:	f9 01       	movw	r30, r18
 7c0:	b1 83       	std	Z+1, r27	; 0x01
 7c2:	a0 83       	st	Z, r26
 7c4:	8c 2f       	mov	r24, r28
 7c6:	1d dd       	rcall	.-1478   	; 0x202 <bit2mask8>
 7c8:	dd 23       	and	r29, r29
 7ca:	41 f0       	breq	.+16     	; 0x7dc <x_new+0x50>
 7cc:	98 2f       	mov	r25, r24
 7ce:	90 95       	com	r25
 7d0:	80 91 d5 0e 	lds	r24, 0x0ED5	; 0x800ed5 <x_disable_status>
 7d4:	98 23       	and	r25, r24
 7d6:	90 93 d5 0e 	sts	0x0ED5, r25	; 0x800ed5 <x_disable_status>
 7da:	05 c0       	rjmp	.+10     	; 0x7e6 <x_new+0x5a>
 7dc:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <x_disable_status>
 7e0:	98 2b       	or	r25, r24
 7e2:	90 93 d5 0e 	sts	0x0ED5, r25	; 0x800ed5 <x_disable_status>
 7e6:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <x_thread_id>
 7ea:	c8 13       	cpse	r28, r24
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <x_new+0x64>
 7ee:	ca dc       	rcall	.-1644   	; 0x184 <x_schedule>
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

000007f6 <init_System_Timer>:
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	84 bd       	out	0x24, r24	; 36
 7fa:	9a ef       	ldi	r25, 0xFA	; 250
 7fc:	97 bd       	out	0x27, r25	; 39
 7fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	85 bd       	out	0x25, r24	; 37
 806:	08 95       	ret

00000808 <x_init>:
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	f8 94       	cli
 80e:	8e ef       	ldi	r24, 0xFE	; 254
 810:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <x_disable_status>
 814:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <x_suspend_status>
 818:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <x_delay_status>
 81c:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <x_thread_id>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	80 93 d6 0e 	sts	0x0ED6, r24	; 0x800ed6 <x_thread_mask>
 826:	c4 ea       	ldi	r28, 0xA4	; 164
 828:	d6 e0       	ldi	r29, 0x06	; 6
 82a:	84 ec       	ldi	r24, 0xC4	; 196
 82c:	97 e0       	ldi	r25, 0x07	; 7
 82e:	99 83       	std	Y+1, r25	; 0x01
 830:	88 83       	st	Y, r24
 832:	9b 83       	std	Y+3, r25	; 0x03
 834:	8a 83       	std	Y+2, r24	; 0x02
 836:	84 ec       	ldi	r24, 0xC4	; 196
 838:	98 e0       	ldi	r25, 0x08	; 8
 83a:	9d 83       	std	Y+5, r25	; 0x05
 83c:	8c 83       	std	Y+4, r24	; 0x04
 83e:	9f 83       	std	Y+7, r25	; 0x07
 840:	8e 83       	std	Y+6, r24	; 0x06
 842:	84 ec       	ldi	r24, 0xC4	; 196
 844:	99 e0       	ldi	r25, 0x09	; 9
 846:	99 87       	std	Y+9, r25	; 0x09
 848:	88 87       	std	Y+8, r24	; 0x08
 84a:	9b 87       	std	Y+11, r25	; 0x0b
 84c:	8a 87       	std	Y+10, r24	; 0x0a
 84e:	84 ec       	ldi	r24, 0xC4	; 196
 850:	9a e0       	ldi	r25, 0x0A	; 10
 852:	9d 87       	std	Y+13, r25	; 0x0d
 854:	8c 87       	std	Y+12, r24	; 0x0c
 856:	9f 87       	std	Y+15, r25	; 0x0f
 858:	8e 87       	std	Y+14, r24	; 0x0e
 85a:	84 ec       	ldi	r24, 0xC4	; 196
 85c:	9b e0       	ldi	r25, 0x0B	; 11
 85e:	99 8b       	std	Y+17, r25	; 0x11
 860:	88 8b       	std	Y+16, r24	; 0x10
 862:	9b 8b       	std	Y+19, r25	; 0x13
 864:	8a 8b       	std	Y+18, r24	; 0x12
 866:	84 ec       	ldi	r24, 0xC4	; 196
 868:	9c e0       	ldi	r25, 0x0C	; 12
 86a:	9d 8b       	std	Y+21, r25	; 0x15
 86c:	8c 8b       	std	Y+20, r24	; 0x14
 86e:	9f 8b       	std	Y+23, r25	; 0x17
 870:	8e 8b       	std	Y+22, r24	; 0x16
 872:	84 ec       	ldi	r24, 0xC4	; 196
 874:	9d e0       	ldi	r25, 0x0D	; 13
 876:	99 8f       	std	Y+25, r25	; 0x19
 878:	88 8f       	std	Y+24, r24	; 0x18
 87a:	9b 8f       	std	Y+27, r25	; 0x1b
 87c:	8a 8f       	std	Y+26, r24	; 0x1a
 87e:	84 ec       	ldi	r24, 0xC4	; 196
 880:	9e e0       	ldi	r25, 0x0E	; 14
 882:	9d 8f       	std	Y+29, r25	; 0x1d
 884:	8c 8f       	std	Y+28, r24	; 0x1c
 886:	9f 8f       	std	Y+31, r25	; 0x1f
 888:	8e 8f       	std	Y+30, r24	; 0x1e
 88a:	8a ea       	ldi	r24, 0xAA	; 170
 88c:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <x_thread_stacks>
 890:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <x_thread_stacks+0x100>
 894:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <x_thread_stacks+0x200>
 898:	80 93 c5 09 	sts	0x09C5, r24	; 0x8009c5 <x_thread_stacks+0x300>
 89c:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <x_thread_stacks+0x400>
 8a0:	80 93 c5 0b 	sts	0x0BC5, r24	; 0x800bc5 <x_thread_stacks+0x500>
 8a4:	80 93 c5 0c 	sts	0x0CC5, r24	; 0x800cc5 <x_thread_stacks+0x600>
 8a8:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <x_thread_stacks+0x700>
 8ac:	a4 df       	rcall	.-184    	; 0x7f6 <init_System_Timer>
 8ae:	ed b7       	in	r30, 0x3d	; 61
 8b0:	fe b7       	in	r31, 0x3e	; 62
 8b2:	a8 81       	ld	r26, Y
 8b4:	b9 81       	ldd	r27, Y+1	; 0x01
 8b6:	85 81       	ldd	r24, Z+5	; 0x05
 8b8:	8c 93       	st	X, r24
 8ba:	a8 81       	ld	r26, Y
 8bc:	b9 81       	ldd	r27, Y+1	; 0x01
 8be:	84 81       	ldd	r24, Z+4	; 0x04
 8c0:	11 97       	sbiw	r26, 0x01	; 1
 8c2:	8c 93       	st	X, r24
 8c4:	a8 81       	ld	r26, Y
 8c6:	b9 81       	ldd	r27, Y+1	; 0x01
 8c8:	83 81       	ldd	r24, Z+3	; 0x03
 8ca:	12 97       	sbiw	r26, 0x02	; 2
 8cc:	8c 93       	st	X, r24
 8ce:	a8 81       	ld	r26, Y
 8d0:	b9 81       	ldd	r27, Y+1	; 0x01
 8d2:	82 81       	ldd	r24, Z+2	; 0x02
 8d4:	13 97       	sbiw	r26, 0x03	; 3
 8d6:	8c 93       	st	X, r24
 8d8:	88 81       	ld	r24, Y
 8da:	99 81       	ldd	r25, Y+1	; 0x01
 8dc:	21 81       	ldd	r18, Z+1	; 0x01
 8de:	fc 01       	movw	r30, r24
 8e0:	34 97       	sbiw	r30, 0x04	; 4
 8e2:	20 83       	st	Z, r18
 8e4:	88 81       	ld	r24, Y
 8e6:	99 81       	ldd	r25, Y+1	; 0x01
 8e8:	05 97       	sbiw	r24, 0x05	; 5
 8ea:	9e bf       	out	0x3e, r25	; 62
 8ec:	8d bf       	out	0x3d, r24	; 61
 8ee:	78 94       	sei
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <x_delay>:
 8f6:	9c 01       	movw	r18, r24
 8f8:	9f b7       	in	r25, 0x3f	; 63
 8fa:	f8 94       	cli
 8fc:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <x_thread_id>
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	ee 0f       	add	r30, r30
 904:	ff 1f       	adc	r31, r31
 906:	eb 53       	subi	r30, 0x3B	; 59
 908:	f1 4f       	sbci	r31, 0xF1	; 241
 90a:	31 83       	std	Z+1, r19	; 0x01
 90c:	20 83       	st	Z, r18
 90e:	20 91 a3 06 	lds	r18, 0x06A3	; 0x8006a3 <x_delay_status>
 912:	80 91 d6 0e 	lds	r24, 0x0ED6	; 0x800ed6 <x_thread_mask>
 916:	82 2b       	or	r24, r18
 918:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <x_delay_status>
 91c:	9f bf       	out	0x3f, r25	; 63
 91e:	02 cc       	rjmp	.-2044   	; 0x124 <x_yield>
 920:	08 95       	ret

00000922 <__vector_21>:
 922:	1f 92       	push	r1
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	0f 92       	push	r0
 92a:	11 24       	eor	r1, r1
 92c:	0b b6       	in	r0, 0x3b	; 59
 92e:	0f 92       	push	r0
 930:	2f 93       	push	r18
 932:	3f 93       	push	r19
 934:	4f 93       	push	r20
 936:	5f 93       	push	r21
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
 944:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <__data_end>
 948:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <__data_end+0x1>
 94c:	a0 91 92 06 	lds	r26, 0x0692	; 0x800692 <__data_end+0x2>
 950:	b0 91 93 06 	lds	r27, 0x0693	; 0x800693 <__data_end+0x3>
 954:	01 96       	adiw	r24, 0x01	; 1
 956:	a1 1d       	adc	r26, r1
 958:	b1 1d       	adc	r27, r1
 95a:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <__data_end>
 95e:	90 93 91 06 	sts	0x0691, r25	; 0x800691 <__data_end+0x1>
 962:	a0 93 92 06 	sts	0x0692, r26	; 0x800692 <__data_end+0x2>
 966:	b0 93 93 06 	sts	0x0693, r27	; 0x800693 <__data_end+0x3>
 96a:	30 91 a3 06 	lds	r19, 0x06A3	; 0x8006a3 <x_delay_status>
 96e:	e5 ec       	ldi	r30, 0xC5	; 197
 970:	fe e0       	ldi	r31, 0x0E	; 14
 972:	45 ed       	ldi	r20, 0xD5	; 213
 974:	5e e0       	ldi	r21, 0x0E	; 14
 976:	21 e0       	ldi	r18, 0x01	; 1
 978:	80 81       	ld	r24, Z
 97a:	91 81       	ldd	r25, Z+1	; 0x01
 97c:	01 97       	sbiw	r24, 0x01	; 1
 97e:	81 93       	st	Z+, r24
 980:	91 93       	st	Z+, r25
 982:	89 2b       	or	r24, r25
 984:	19 f4       	brne	.+6      	; 0x98c <__vector_21+0x6a>
 986:	82 2f       	mov	r24, r18
 988:	80 95       	com	r24
 98a:	38 23       	and	r19, r24
 98c:	22 0f       	add	r18, r18
 98e:	e4 17       	cp	r30, r20
 990:	f5 07       	cpc	r31, r21
 992:	91 f7       	brne	.-28     	; 0x978 <__vector_21+0x56>
 994:	30 93 a3 06 	sts	0x06A3, r19	; 0x8006a3 <x_delay_status>
 998:	ff 91       	pop	r31
 99a:	ef 91       	pop	r30
 99c:	bf 91       	pop	r27
 99e:	af 91       	pop	r26
 9a0:	9f 91       	pop	r25
 9a2:	8f 91       	pop	r24
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0b be       	out	0x3b, r0	; 59
 9b0:	0f 90       	pop	r0
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	0f 90       	pop	r0
 9b6:	1f 90       	pop	r1
 9b8:	18 95       	reti

000009ba <x_stack_overflow>:
 9ba:	ac 01       	movw	r20, r24
 9bc:	27 9a       	sbi	0x04, 7	; 4
 9be:	2f 98       	cbi	0x05, 7	; 5
   must be defined before including this header file. Also, the
   backward compatible algorithm will be chosen if the code is
   compiled in a <em>freestanding environment</em> (GCC option
   \c -ffreestanding), as the math functions required for rounding are
   not available to the compiler then.

 9c0:	2f ef       	ldi	r18, 0xFF	; 255
 9c2:	31 ee       	ldi	r19, 0xE1	; 225
 9c4:	74 e0       	ldi	r23, 0x04	; 4
 9c6:	21 50       	subi	r18, 0x01	; 1
 9c8:	30 40       	sbci	r19, 0x00	; 0
 9ca:	70 40       	sbci	r23, 0x00	; 0
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <x_stack_overflow+0xc>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <x_stack_overflow+0x16>
 9d0:	00 00       	nop
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	55 23       	and	r21, r21
 9d8:	fc f0       	brlt	.+62     	; 0xa18 <x_stack_overflow+0x5e>
 9da:	26 2f       	mov	r18, r22
 9dc:	38 2f       	mov	r19, r24
 9de:	95 b1       	in	r25, 0x05	; 5
 9e0:	90 58       	subi	r25, 0x80	; 128
 9e2:	95 b9       	out	0x05, r25	; 5
 9e4:	9f ef       	ldi	r25, 0xFF	; 255
 9e6:	e0 e7       	ldi	r30, 0x70	; 112
 9e8:	72 e0       	ldi	r23, 0x02	; 2
 9ea:	91 50       	subi	r25, 0x01	; 1
 9ec:	e0 40       	sbci	r30, 0x00	; 0
 9ee:	70 40       	sbci	r23, 0x00	; 0
 9f0:	e1 f7       	brne	.-8      	; 0x9ea <x_stack_overflow+0x30>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <x_stack_overflow+0x3a>
 9f4:	00 00       	nop
 9f6:	95 b1       	in	r25, 0x05	; 5
 9f8:	90 58       	subi	r25, 0x80	; 128
 9fa:	95 b9       	out	0x05, r25	; 5
 9fc:	9f ef       	ldi	r25, 0xFF	; 255
 9fe:	e9 e6       	ldi	r30, 0x69	; 105
 a00:	78 e1       	ldi	r23, 0x18	; 24
 a02:	91 50       	subi	r25, 0x01	; 1
 a04:	e0 40       	sbci	r30, 0x00	; 0
 a06:	70 40       	sbci	r23, 0x00	; 0
 a08:	e1 f7       	brne	.-8      	; 0xa02 <x_stack_overflow+0x48>
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <x_stack_overflow+0x52>
 a0c:	00 00       	nop
 a0e:	2f 5f       	subi	r18, 0xFF	; 255
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	42 17       	cp	r20, r18
 a14:	53 07       	cpc	r21, r19
 a16:	1c f7       	brge	.-58     	; 0x9de <x_stack_overflow+0x24>
 a18:	9f ef       	ldi	r25, 0xFF	; 255
 a1a:	e3 e2       	ldi	r30, 0x23	; 35
 a1c:	24 ef       	ldi	r18, 0xF4	; 244
 a1e:	91 50       	subi	r25, 0x01	; 1
 a20:	e0 40       	sbci	r30, 0x00	; 0
 a22:	20 40       	sbci	r18, 0x00	; 0
 a24:	e1 f7       	brne	.-8      	; 0xa1e <x_stack_overflow+0x64>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <x_stack_overflow+0x6e>
 a28:	00 00       	nop
 a2a:	d5 cf       	rjmp	.-86     	; 0x9d6 <x_stack_overflow+0x1c>

00000a2c <__divmodhi4>:
 a2c:	97 fb       	bst	r25, 7
 a2e:	07 2e       	mov	r0, r23
 a30:	16 f4       	brtc	.+4      	; 0xa36 <__divmodhi4+0xa>
 a32:	00 94       	com	r0
 a34:	06 d0       	rcall	.+12     	; 0xa42 <__divmodhi4_neg1>
 a36:	77 fd       	sbrc	r23, 7
 a38:	08 d0       	rcall	.+16     	; 0xa4a <__divmodhi4_neg2>
 a3a:	27 d0       	rcall	.+78     	; 0xa8a <__udivmodhi4>
 a3c:	07 fc       	sbrc	r0, 7
 a3e:	05 d0       	rcall	.+10     	; 0xa4a <__divmodhi4_neg2>
 a40:	3e f4       	brtc	.+14     	; 0xa50 <__divmodhi4_exit>

00000a42 <__divmodhi4_neg1>:
 a42:	90 95       	com	r25
 a44:	81 95       	neg	r24
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	08 95       	ret

00000a4a <__divmodhi4_neg2>:
 a4a:	70 95       	com	r23
 a4c:	61 95       	neg	r22
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a50 <__divmodhi4_exit>:
 a50:	08 95       	ret

00000a52 <__divmodsi4>:
 a52:	05 2e       	mov	r0, r21
 a54:	97 fb       	bst	r25, 7
 a56:	16 f4       	brtc	.+4      	; 0xa5c <__divmodsi4+0xa>
 a58:	00 94       	com	r0
 a5a:	0f d0       	rcall	.+30     	; 0xa7a <__negsi2>
 a5c:	57 fd       	sbrc	r21, 7
 a5e:	05 d0       	rcall	.+10     	; 0xa6a <__divmodsi4_neg2>
 a60:	28 d0       	rcall	.+80     	; 0xab2 <__udivmodsi4>
 a62:	07 fc       	sbrc	r0, 7
 a64:	02 d0       	rcall	.+4      	; 0xa6a <__divmodsi4_neg2>
 a66:	46 f4       	brtc	.+16     	; 0xa78 <__divmodsi4_exit>
 a68:	08 c0       	rjmp	.+16     	; 0xa7a <__negsi2>

00000a6a <__divmodsi4_neg2>:
 a6a:	50 95       	com	r21
 a6c:	40 95       	com	r20
 a6e:	30 95       	com	r19
 a70:	21 95       	neg	r18
 a72:	3f 4f       	sbci	r19, 0xFF	; 255
 a74:	4f 4f       	sbci	r20, 0xFF	; 255
 a76:	5f 4f       	sbci	r21, 0xFF	; 255

00000a78 <__divmodsi4_exit>:
 a78:	08 95       	ret

00000a7a <__negsi2>:
 a7a:	90 95       	com	r25
 a7c:	80 95       	com	r24
 a7e:	70 95       	com	r23
 a80:	61 95       	neg	r22
 a82:	7f 4f       	sbci	r23, 0xFF	; 255
 a84:	8f 4f       	sbci	r24, 0xFF	; 255
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__udivmodhi4>:
 a8a:	aa 1b       	sub	r26, r26
 a8c:	bb 1b       	sub	r27, r27
 a8e:	51 e1       	ldi	r21, 0x11	; 17
 a90:	07 c0       	rjmp	.+14     	; 0xaa0 <__udivmodhi4_ep>

00000a92 <__udivmodhi4_loop>:
 a92:	aa 1f       	adc	r26, r26
 a94:	bb 1f       	adc	r27, r27
 a96:	a6 17       	cp	r26, r22
 a98:	b7 07       	cpc	r27, r23
 a9a:	10 f0       	brcs	.+4      	; 0xaa0 <__udivmodhi4_ep>
 a9c:	a6 1b       	sub	r26, r22
 a9e:	b7 0b       	sbc	r27, r23

00000aa0 <__udivmodhi4_ep>:
 aa0:	88 1f       	adc	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	5a 95       	dec	r21
 aa6:	a9 f7       	brne	.-22     	; 0xa92 <__udivmodhi4_loop>
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	bc 01       	movw	r22, r24
 aae:	cd 01       	movw	r24, r26
 ab0:	08 95       	ret

00000ab2 <__udivmodsi4>:
 ab2:	a1 e2       	ldi	r26, 0x21	; 33
 ab4:	1a 2e       	mov	r1, r26
 ab6:	aa 1b       	sub	r26, r26
 ab8:	bb 1b       	sub	r27, r27
 aba:	fd 01       	movw	r30, r26
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__udivmodsi4_ep>

00000abe <__udivmodsi4_loop>:
 abe:	aa 1f       	adc	r26, r26
 ac0:	bb 1f       	adc	r27, r27
 ac2:	ee 1f       	adc	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	a2 17       	cp	r26, r18
 ac8:	b3 07       	cpc	r27, r19
 aca:	e4 07       	cpc	r30, r20
 acc:	f5 07       	cpc	r31, r21
 ace:	20 f0       	brcs	.+8      	; 0xad8 <__udivmodsi4_ep>
 ad0:	a2 1b       	sub	r26, r18
 ad2:	b3 0b       	sbc	r27, r19
 ad4:	e4 0b       	sbc	r30, r20
 ad6:	f5 0b       	sbc	r31, r21

00000ad8 <__udivmodsi4_ep>:
 ad8:	66 1f       	adc	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	1a 94       	dec	r1
 ae2:	69 f7       	brne	.-38     	; 0xabe <__udivmodsi4_loop>
 ae4:	60 95       	com	r22
 ae6:	70 95       	com	r23
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	9b 01       	movw	r18, r22
 aee:	ac 01       	movw	r20, r24
 af0:	bd 01       	movw	r22, r26
 af2:	cf 01       	movw	r24, r30
 af4:	08 95       	ret

00000af6 <itoa>:
 af6:	45 32       	cpi	r20, 0x25	; 37
 af8:	51 05       	cpc	r21, r1
 afa:	18 f4       	brcc	.+6      	; 0xb02 <itoa+0xc>
 afc:	42 30       	cpi	r20, 0x02	; 2
 afe:	08 f0       	brcs	.+2      	; 0xb02 <itoa+0xc>
 b00:	04 c0       	rjmp	.+8      	; 0xb0a <__itoa_ncheck>
 b02:	fb 01       	movw	r30, r22
 b04:	10 82       	st	Z, r1
 b06:	cb 01       	movw	r24, r22
 b08:	08 95       	ret

00000b0a <__itoa_ncheck>:
 b0a:	bb 27       	eor	r27, r27
 b0c:	4a 30       	cpi	r20, 0x0A	; 10
 b0e:	31 f4       	brne	.+12     	; 0xb1c <__itoa_ncheck+0x12>
 b10:	99 23       	and	r25, r25
 b12:	22 f4       	brpl	.+8      	; 0xb1c <__itoa_ncheck+0x12>
 b14:	bd e2       	ldi	r27, 0x2D	; 45
 b16:	90 95       	com	r25
 b18:	81 95       	neg	r24
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	01 c0       	rjmp	.+2      	; 0xb20 <__utoa_common>

00000b1e <__utoa_ncheck>:
 b1e:	bb 27       	eor	r27, r27

00000b20 <__utoa_common>:
 b20:	fb 01       	movw	r30, r22
 b22:	55 27       	eor	r21, r21
 b24:	aa 27       	eor	r26, r26
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	aa 1f       	adc	r26, r26
 b2c:	a4 17       	cp	r26, r20
 b2e:	10 f0       	brcs	.+4      	; 0xb34 <__utoa_common+0x14>
 b30:	a4 1b       	sub	r26, r20
 b32:	83 95       	inc	r24
 b34:	50 51       	subi	r21, 0x10	; 16
 b36:	b9 f7       	brne	.-18     	; 0xb26 <__utoa_common+0x6>
 b38:	a0 5d       	subi	r26, 0xD0	; 208
 b3a:	aa 33       	cpi	r26, 0x3A	; 58
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <__utoa_common+0x20>
 b3e:	a9 5d       	subi	r26, 0xD9	; 217
 b40:	a1 93       	st	Z+, r26
 b42:	00 97       	sbiw	r24, 0x00	; 0
 b44:	79 f7       	brne	.-34     	; 0xb24 <__utoa_common+0x4>
 b46:	b1 11       	cpse	r27, r1
 b48:	b1 93       	st	Z+, r27
 b4a:	11 92       	st	Z+, r1
 b4c:	cb 01       	movw	r24, r22
 b4e:	00 c0       	rjmp	.+0      	; 0xb50 <strrev>

00000b50 <strrev>:
 b50:	dc 01       	movw	r26, r24
 b52:	fc 01       	movw	r30, r24
 b54:	67 2f       	mov	r22, r23
 b56:	71 91       	ld	r23, Z+
 b58:	77 23       	and	r23, r23
 b5a:	e1 f7       	brne	.-8      	; 0xb54 <strrev+0x4>
 b5c:	32 97       	sbiw	r30, 0x02	; 2
 b5e:	04 c0       	rjmp	.+8      	; 0xb68 <strrev+0x18>
 b60:	7c 91       	ld	r23, X
 b62:	6d 93       	st	X+, r22
 b64:	70 83       	st	Z, r23
 b66:	62 91       	ld	r22, -Z
 b68:	ae 17       	cp	r26, r30
 b6a:	bf 07       	cpc	r27, r31
 b6c:	c8 f3       	brcs	.-14     	; 0xb60 <strrev+0x10>
 b6e:	08 95       	ret

00000b70 <_exit>:
 b70:	f8 94       	cli

00000b72 <__stop_program>:
 b72:	ff cf       	rjmp	.-2      	; 0xb72 <__stop_program>
