
PSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800202  00800202  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f52  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d24  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000398  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000637  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a4  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002c3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e5       	ldi	r30, 0x5C	; 92
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	9b c0       	rjmp	.+310    	; 0x258 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "EmSys.h"

int main(void)
{
    /* Replace with your application code */
	init_ports(600, SERIAL_8N1);
 124:	46 e0       	ldi	r20, 0x06	; 6
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	68 e5       	ldi	r22, 0x58	; 88
 12a:	72 e0       	ldi	r23, 0x02	; 2
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	4f d0       	rcall	.+158    	; 0x1d0 <init_ports>
	char test = '1';
	
    while (1) 
    {
			char label[] = "Single";
			PSerial_write(0, test);
 132:	61 e3       	ldi	r22, 0x31	; 49
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	3b d0       	rcall	.+118    	; 0x1ae <PSerial_write>
			test = test + 1;
 138:	c2 e3       	ldi	r28, 0x32	; 50
	char test = '1';
	
    while (1) 
    {
			char label[] = "Single";
			PSerial_write(0, test);
 13a:	6c 2f       	mov	r22, r28
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	37 d0       	rcall	.+110    	; 0x1ae <PSerial_write>
			test = test + 1;
 140:	cf 5f       	subi	r28, 0xFF	; 255
			if(test==':')
 142:	ca 33       	cpi	r28, 0x3A	; 58
 144:	d1 f7       	brne	.-12     	; 0x13a <main+0x16>
			{
				test = '1';
 146:	c1 e3       	ldi	r28, 0x31	; 49
 148:	f8 cf       	rjmp	.-16     	; 0x13a <main+0x16>

0000014a <PSerial_open>:
			enableT = (1 << TXEN2);
			break;
		case 3:
			enableR = (1 << RXEN3);
			enableT = (1 << TXEN3);
			break;
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	6a 01       	movw	r12, r20
 158:	7b 01       	movw	r14, r22
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	a0 81       	ld	r26, Z
 168:	b1 81       	ldd	r27, Z+1	; 0x01
 16a:	88 e1       	ldi	r24, 0x18	; 24
 16c:	11 96       	adiw	r26, 0x01	; 1
 16e:	8c 93       	st	X, r24
 170:	c0 81       	ld	r28, Z
 172:	d1 81       	ldd	r29, Z+1	; 0x01
 174:	2a 83       	std	Y+2, r18	; 0x02
 176:	60 e4       	ldi	r22, 0x40	; 64
 178:	72 e4       	ldi	r23, 0x42	; 66
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	a7 01       	movw	r20, r14
 180:	96 01       	movw	r18, r12
 182:	2c d0       	rcall	.+88     	; 0x1dc <__divmodsi4>
 184:	ba 01       	movw	r22, r20
 186:	a9 01       	movw	r20, r18
 188:	41 50       	subi	r20, 0x01	; 1
 18a:	51 09       	sbc	r21, r1
 18c:	61 09       	sbc	r22, r1
 18e:	71 09       	sbc	r23, r1
 190:	bb 27       	eor	r27, r27
 192:	77 fd       	sbrc	r23, 7
 194:	ba 95       	dec	r27
 196:	a7 2f       	mov	r26, r23
 198:	96 2f       	mov	r25, r22
 19a:	85 2f       	mov	r24, r21
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	4c 83       	std	Y+4, r20	; 0x04
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	df 90       	pop	r13
 1aa:	cf 90       	pop	r12
 1ac:	08 95       	ret

000001ae <PSerial_write>:
		default:
			enableR = (1 << RXEN0);
			enableT = (1 << TXEN0);
			break;
	}
 1ae:	20 e2       	ldi	r18, 0x20	; 32
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <__data_end+0x1>
 1b6:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__data_end>
	
	//ucsrna = 0x20; //initilize with data reg empty
	serial_port[port]->ucsrb = enableR | enableT;
	serial_port[port]->ucsrc = config;
	speed = (F_CPU / 16 / speed - 1);
	serial_port[port]->ubrrH = (unsigned char) (speed >> 8);
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	01 90       	ld	r0, Z+
 1c8:	f0 81       	ld	r31, Z
 1ca:	e0 2d       	mov	r30, r0
 1cc:	66 83       	std	Z+6, r22	; 0x06
 1ce:	08 95       	ret

000001d0 <init_ports>:
	serial_port[port]->ubrrL = (unsigned char) speed;
}


 1d0:	9a 01       	movw	r18, r20
char PSerial_read(unsigned char port)
{
 1d2:	ab 01       	movw	r20, r22
 1d4:	bc 01       	movw	r22, r24
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	b8 cf       	rjmp	.-144    	; 0x14a <PSerial_open>
 1da:	08 95       	ret

000001dc <__divmodsi4>:
 1dc:	05 2e       	mov	r0, r21
 1de:	97 fb       	bst	r25, 7
 1e0:	16 f4       	brtc	.+4      	; 0x1e6 <__divmodsi4+0xa>
 1e2:	00 94       	com	r0
 1e4:	0f d0       	rcall	.+30     	; 0x204 <__negsi2>
 1e6:	57 fd       	sbrc	r21, 7
 1e8:	05 d0       	rcall	.+10     	; 0x1f4 <__divmodsi4_neg2>
 1ea:	14 d0       	rcall	.+40     	; 0x214 <__udivmodsi4>
 1ec:	07 fc       	sbrc	r0, 7
 1ee:	02 d0       	rcall	.+4      	; 0x1f4 <__divmodsi4_neg2>
 1f0:	46 f4       	brtc	.+16     	; 0x202 <__divmodsi4_exit>
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <__negsi2>

000001f4 <__divmodsi4_neg2>:
 1f4:	50 95       	com	r21
 1f6:	40 95       	com	r20
 1f8:	30 95       	com	r19
 1fa:	21 95       	neg	r18
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	4f 4f       	sbci	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255

00000202 <__divmodsi4_exit>:
 202:	08 95       	ret

00000204 <__negsi2>:
 204:	90 95       	com	r25
 206:	80 95       	com	r24
 208:	70 95       	com	r23
 20a:	61 95       	neg	r22
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	8f 4f       	sbci	r24, 0xFF	; 255
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	08 95       	ret

00000214 <__udivmodsi4>:
 214:	a1 e2       	ldi	r26, 0x21	; 33
 216:	1a 2e       	mov	r1, r26
 218:	aa 1b       	sub	r26, r26
 21a:	bb 1b       	sub	r27, r27
 21c:	fd 01       	movw	r30, r26
 21e:	0d c0       	rjmp	.+26     	; 0x23a <__udivmodsi4_ep>

00000220 <__udivmodsi4_loop>:
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	ee 1f       	adc	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	a2 17       	cp	r26, r18
 22a:	b3 07       	cpc	r27, r19
 22c:	e4 07       	cpc	r30, r20
 22e:	f5 07       	cpc	r31, r21
 230:	20 f0       	brcs	.+8      	; 0x23a <__udivmodsi4_ep>
 232:	a2 1b       	sub	r26, r18
 234:	b3 0b       	sbc	r27, r19
 236:	e4 0b       	sbc	r30, r20
 238:	f5 0b       	sbc	r31, r21

0000023a <__udivmodsi4_ep>:
 23a:	66 1f       	adc	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	1a 94       	dec	r1
 244:	69 f7       	brne	.-38     	; 0x220 <__udivmodsi4_loop>
 246:	60 95       	com	r22
 248:	70 95       	com	r23
 24a:	80 95       	com	r24
 24c:	90 95       	com	r25
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	bd 01       	movw	r22, r26
 254:	cf 01       	movw	r24, r30
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
