
PSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800212  00800212  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f89  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d35  00000000  00000000  000013a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000212  00000000  00000000  00002b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002d55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ea       	ldi	r30, 0xAC	; 172
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	c3 c0       	rjmp	.+390    	; 0x2a8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include <util/delay.h>
#include "PSerial.h"
#include "EmSys.h"

int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	2f 97       	sbiw	r28, 0x0f	; 15
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	init_ports(600, SERIAL_8N1);
 138:	46 e0       	ldi	r20, 0x06	; 6
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	68 e5       	ldi	r22, 0x58	; 88
 13e:	72 e0       	ldi	r23, 0x02	; 2
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	6d d0       	rcall	.+218    	; 0x220 <init_ports>
	//char test = '1';
	
    while (1) 
    {
		//	char label2[] ="helloWorld";
			char label[] = "Hello World!!!";
 146:	0f 2e       	mov	r0, r31
 148:	ff e0       	ldi	r31, 0x0F	; 15
 14a:	cf 2e       	mov	r12, r31
 14c:	f0 2d       	mov	r31, r0
 14e:	5e 01       	movw	r10, r28
 150:	8f e0       	ldi	r24, 0x0F	; 15
 152:	a8 0e       	add	r10, r24
 154:	b1 1c       	adc	r11, r1
			char checksum = 0;
 156:	d1 2c       	mov	r13, r1
	//char test = '1';
	
    while (1) 
    {
		//	char label2[] ="helloWorld";
			char label[] = "Hello World!!!";
 158:	e2 e0       	ldi	r30, 0x02	; 2
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	de 01       	movw	r26, r28
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	8c 2d       	mov	r24, r12
 162:	01 90       	ld	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	8a 95       	dec	r24
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x3e>
 16a:	8e 01       	movw	r16, r28
 16c:	0f 5f       	subi	r16, 0xFF	; 255
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
			char checksum = 0;
 170:	ed 2c       	mov	r14, r13

			for(int i = 0; i<14; i++)
			{
				PSerial_write(0, label[i]);
 172:	f8 01       	movw	r30, r16
 174:	f1 90       	ld	r15, Z+
 176:	8f 01       	movw	r16, r30
 178:	6f 2d       	mov	r22, r15
 17a:	8d 2d       	mov	r24, r13
 17c:	3d d0       	rcall	.+122    	; 0x1f8 <PSerial_write>
				checksum += label[i];
 17e:	ef 0c       	add	r14, r15
    {
		//	char label2[] ="helloWorld";
			char label[] = "Hello World!!!";
			char checksum = 0;

			for(int i = 0; i<14; i++)
 180:	0a 15       	cp	r16, r10
 182:	1b 05       	cpc	r17, r11
 184:	b1 f7       	brne	.-20     	; 0x172 <main+0x4e>
			{
				PSerial_write(0, label[i]);
				checksum += label[i];
			}
			PSerial_write(0, '\n');
 186:	6a e0       	ldi	r22, 0x0A	; 10
 188:	8d 2d       	mov	r24, r13
 18a:	36 d0       	rcall	.+108    	; 0x1f8 <PSerial_write>
			PSerial_write(0, checksum);
 18c:	6e 2d       	mov	r22, r14
 18e:	8d 2d       	mov	r24, r13
 190:	33 d0       	rcall	.+102    	; 0x1f8 <PSerial_write>
				PSerial_write(0, label2[i]);
				checksum += label2[i];
			}
			PSerial_write(0, '\n');
			_delay_ms(500);*/
    }
 192:	e2 cf       	rjmp	.-60     	; 0x158 <main+0x34>

00000194 <PSerial_open>:
	
	while (!(serial_port[port]->ucsra & rxcn)) {
		// wait for RXC
	}
	return UDR0;
}
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	6a 01       	movw	r12, r20
 1a2:	7b 01       	movw	r14, r22
 1a4:	e8 2f       	mov	r30, r24
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	a0 81       	ld	r26, Z
 1b2:	b1 81       	ldd	r27, Z+1	; 0x01
 1b4:	88 e1       	ldi	r24, 0x18	; 24
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	8c 93       	st	X, r24
 1ba:	c0 81       	ld	r28, Z
 1bc:	d1 81       	ldd	r29, Z+1	; 0x01
 1be:	2a 83       	std	Y+2, r18	; 0x02
 1c0:	60 e4       	ldi	r22, 0x40	; 64
 1c2:	72 e4       	ldi	r23, 0x42	; 66
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	a7 01       	movw	r20, r14
 1ca:	96 01       	movw	r18, r12
 1cc:	2f d0       	rcall	.+94     	; 0x22c <__divmodsi4>
 1ce:	ba 01       	movw	r22, r20
 1d0:	a9 01       	movw	r20, r18
 1d2:	41 50       	subi	r20, 0x01	; 1
 1d4:	51 09       	sbc	r21, r1
 1d6:	61 09       	sbc	r22, r1
 1d8:	71 09       	sbc	r23, r1
 1da:	bb 27       	eor	r27, r27
 1dc:	77 fd       	sbrc	r23, 7
 1de:	ba 95       	dec	r27
 1e0:	a7 2f       	mov	r26, r23
 1e2:	96 2f       	mov	r25, r22
 1e4:	85 2f       	mov	r24, r21
 1e6:	8d 83       	std	Y+5, r24	; 0x05
 1e8:	4c 83       	std	Y+4, r20	; 0x04
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	08 95       	ret

000001f8 <PSerial_write>:

void PSerial_write(unsigned char port, char data)
{
	static int udren;
	udren = (1 << UDRE0);
 1f8:	20 e2       	ldi	r18, 0x20	; 32
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <__data_end+0x1>
 200:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <__data_end>
	
	while (!(serial_port[port]->ucsra & udren))
 204:	e8 2f       	mov	r30, r24
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	01 90       	ld	r0, Z+
 212:	f0 81       	ld	r31, Z
 214:	e0 2d       	mov	r30, r0
 216:	80 81       	ld	r24, Z
 218:	85 ff       	sbrs	r24, 5
 21a:	fd cf       	rjmp	.-6      	; 0x216 <PSerial_write+0x1e>
	{
		//wait for RXC
	}
	serial_port[port]->udr = data;
 21c:	66 83       	std	Z+6, r22	; 0x06
 21e:	08 95       	ret

00000220 <init_ports>:
}

void init_ports(long baud, int framing) 
{ 
 220:	9a 01       	movw	r18, r20

		PSerial_open(0, baud, framing);
 222:	ab 01       	movw	r20, r22
 224:	bc 01       	movw	r22, r24
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	b5 cf       	rjmp	.-150    	; 0x194 <PSerial_open>
 22a:	08 95       	ret

0000022c <__divmodsi4>:
 22c:	05 2e       	mov	r0, r21
 22e:	97 fb       	bst	r25, 7
 230:	16 f4       	brtc	.+4      	; 0x236 <__divmodsi4+0xa>
 232:	00 94       	com	r0
 234:	0f d0       	rcall	.+30     	; 0x254 <__negsi2>
 236:	57 fd       	sbrc	r21, 7
 238:	05 d0       	rcall	.+10     	; 0x244 <__divmodsi4_neg2>
 23a:	14 d0       	rcall	.+40     	; 0x264 <__udivmodsi4>
 23c:	07 fc       	sbrc	r0, 7
 23e:	02 d0       	rcall	.+4      	; 0x244 <__divmodsi4_neg2>
 240:	46 f4       	brtc	.+16     	; 0x252 <__divmodsi4_exit>
 242:	08 c0       	rjmp	.+16     	; 0x254 <__negsi2>

00000244 <__divmodsi4_neg2>:
 244:	50 95       	com	r21
 246:	40 95       	com	r20
 248:	30 95       	com	r19
 24a:	21 95       	neg	r18
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	4f 4f       	sbci	r20, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255

00000252 <__divmodsi4_exit>:
 252:	08 95       	ret

00000254 <__negsi2>:
 254:	90 95       	com	r25
 256:	80 95       	com	r24
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	8f 4f       	sbci	r24, 0xFF	; 255
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__udivmodsi4>:
 264:	a1 e2       	ldi	r26, 0x21	; 33
 266:	1a 2e       	mov	r1, r26
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	fd 01       	movw	r30, r26
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__udivmodsi4_ep>

00000270 <__udivmodsi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	ee 1f       	adc	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	a2 17       	cp	r26, r18
 27a:	b3 07       	cpc	r27, r19
 27c:	e4 07       	cpc	r30, r20
 27e:	f5 07       	cpc	r31, r21
 280:	20 f0       	brcs	.+8      	; 0x28a <__udivmodsi4_ep>
 282:	a2 1b       	sub	r26, r18
 284:	b3 0b       	sbc	r27, r19
 286:	e4 0b       	sbc	r30, r20
 288:	f5 0b       	sbc	r31, r21

0000028a <__udivmodsi4_ep>:
 28a:	66 1f       	adc	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	1a 94       	dec	r1
 294:	69 f7       	brne	.-38     	; 0x270 <__udivmodsi4_loop>
 296:	60 95       	com	r22
 298:	70 95       	com	r23
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	bd 01       	movw	r22, r26
 2a4:	cf 01       	movw	r24, r30
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
