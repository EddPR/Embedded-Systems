
ButtonFlashInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001054  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3c  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bf  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00002510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a9  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fd  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	df d0       	rcall	.+446    	; 0x2b4 <main>
  f6:	e3 c0       	rjmp	.+454    	; 0x2be <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <lightsFlash>:

void lightsFlash()
{
	while (1)
	{
		PORTF |= 0x0F;	// Turn on all LEDs
  fa:	0f 2e       	mov	r0, r31
  fc:	f4 e1       	ldi	r31, 0x14	; 20
  fe:	ef 2e       	mov	r14, r31
 100:	f0 2d       	mov	r31, r0
 102:	f1 2c       	mov	r15, r1
				_delay_ms(10);
			}
		}
		
		
		PORTF &= ~0x0F;	// Turn off all LEDs
 104:	04 e6       	ldi	r16, 0x64	; 100
 106:	10 e0       	ldi	r17, 0x00	; 0

void lightsFlash()
{
	while (1)
	{
		PORTF |= 0x0F;	// Turn on all LEDs
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	8f 60       	ori	r24, 0x0F	; 15
 10c:	81 bb       	out	0x11, r24	; 17
 10e:	ce 2d       	mov	r28, r14
 110:	df 2d       	mov	r29, r15
		
		for (int j = 0; j < 20; j++)
		{
			if (FALLING_EDGE_ZERO)
 112:	7f 99       	sbic	0x0f, 7	; 15
 114:	0a c0       	rjmp	.+20     	; 0x12a <lightsFlash+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lightsFlash+0x20>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lightsFlash+0x26>
 120:	00 00       	nop
			{
				_delay_ms(10);	// Sample button release
				if (RISING_EDGE_ZERO)
 122:	7f 9b       	sbis	0x0f, 7	; 15
 124:	1e c0       	rjmp	.+60     	; 0x162 <lightsFlash+0x68>
				{
					lightsCycle();
 126:	7f d0       	rcall	.+254    	; 0x226 <lightsCycle>
 128:	1c c0       	rjmp	.+56     	; 0x162 <lightsFlash+0x68>
				}
			}
			else if (FALLING_EDGE_ONE)
 12a:	8f b1       	in	r24, 0x0f	; 15
 12c:	82 95       	swap	r24
 12e:	86 95       	lsr	r24
 130:	86 95       	lsr	r24
 132:	83 70       	andi	r24, 0x03	; 3
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	79 f4       	brne	.+30     	; 0x156 <lightsFlash+0x5c>
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lightsFlash+0x42>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lightsFlash+0x48>
 142:	00 00       	nop
			{
				_delay_ms(10);	// Sample button release
				if (RISING_EDGE_ONE)
 144:	8f b1       	in	r24, 0x0f	; 15
 146:	82 95       	swap	r24
 148:	86 95       	lsr	r24
 14a:	86 95       	lsr	r24
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	41 f4       	brne	.+16     	; 0x162 <lightsFlash+0x68>
				{
					lightsOff();
 152:	39 d0       	rcall	.+114    	; 0x1c6 <lightsOff>
 154:	06 c0       	rjmp	.+12     	; 0x162 <lightsFlash+0x68>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lightsFlash+0x60>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lightsFlash+0x66>
 160:	00 00       	nop
 162:	21 97       	sbiw	r28, 0x01	; 1
{
	while (1)
	{
		PORTF |= 0x0F;	// Turn on all LEDs
		
		for (int j = 0; j < 20; j++)
 164:	b1 f6       	brne	.-84     	; 0x112 <lightsFlash+0x18>
				_delay_ms(10);
			}
		}
		
		
		PORTF &= ~0x0F;	// Turn off all LEDs
 166:	81 b3       	in	r24, 0x11	; 17
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	c0 2f       	mov	r28, r16
 16e:	d1 2f       	mov	r29, r17
		
		for (int j = 0; j < 100; j++)
		{
			if (FALLING_EDGE_ZERO)
 170:	7f 99       	sbic	0x0f, 7	; 15
 172:	0a c0       	rjmp	.+20     	; 0x188 <lightsFlash+0x8e>
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9c e9       	ldi	r25, 0x9C	; 156
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lightsFlash+0x7e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lightsFlash+0x84>
 17e:	00 00       	nop
			{
				_delay_ms(10);	// Sample button release
				if (RISING_EDGE_ZERO)
 180:	7f 9b       	sbis	0x0f, 7	; 15
 182:	1e c0       	rjmp	.+60     	; 0x1c0 <lightsFlash+0xc6>
				{
					lightsCycle();
 184:	50 d0       	rcall	.+160    	; 0x226 <lightsCycle>
 186:	1c c0       	rjmp	.+56     	; 0x1c0 <lightsFlash+0xc6>
				}
			}
			else if (FALLING_EDGE_ONE)
 188:	8f b1       	in	r24, 0x0f	; 15
 18a:	82 95       	swap	r24
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	83 70       	andi	r24, 0x03	; 3
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	79 f4       	brne	.+30     	; 0x1b4 <lightsFlash+0xba>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lightsFlash+0xa0>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lightsFlash+0xa6>
 1a0:	00 00       	nop
			{
				_delay_ms(10);	// Sample button release
				if (RISING_EDGE_ONE)
 1a2:	8f b1       	in	r24, 0x0f	; 15
 1a4:	82 95       	swap	r24
 1a6:	86 95       	lsr	r24
 1a8:	86 95       	lsr	r24
 1aa:	83 70       	andi	r24, 0x03	; 3
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <lightsFlash+0xc6>
				{
					lightsOff();
 1b0:	0a d0       	rcall	.+20     	; 0x1c6 <lightsOff>
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <lightsFlash+0xc6>
 1b4:	8f e3       	ldi	r24, 0x3F	; 63
 1b6:	9c e9       	ldi	r25, 0x9C	; 156
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lightsFlash+0xbe>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lightsFlash+0xc4>
 1be:	00 00       	nop
 1c0:	21 97       	sbiw	r28, 0x01	; 1
		}
		
		
		PORTF &= ~0x0F;	// Turn off all LEDs
		
		for (int j = 0; j < 100; j++)
 1c2:	b1 f6       	brne	.-84     	; 0x170 <lightsFlash+0x76>
 1c4:	a1 cf       	rjmp	.-190    	; 0x108 <lightsFlash+0xe>

000001c6 <lightsOff>:

void lightsOff()
{
	while (1)
	{
		PORTF &= ~0x0F;	// Turn off all LEDs
 1c6:	81 b3       	in	r24, 0x11	; 17
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	81 bb       	out	0x11, r24	; 17
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	9e e4       	ldi	r25, 0x4E	; 78
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lightsOff+0xa>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lightsOff+0x10>
 1d6:	00 00       	nop
		
		_delay_ms(5);	// Sample button press
		if (FALLING_EDGE_ZERO)
 1d8:	7f 99       	sbic	0x0f, 7	; 15
 1da:	0d c0       	rjmp	.+26     	; 0x1f6 <lightsOff+0x30>
 1dc:	9f ef       	ldi	r25, 0xFF	; 255
 1de:	29 e6       	ldi	r18, 0x69	; 105
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	91 50       	subi	r25, 0x01	; 1
 1e4:	20 40       	sbci	r18, 0x00	; 0
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <lightsOff+0x1c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lightsOff+0x26>
 1ec:	00 00       	nop
		{
			_delay_ms(500);	// Sample button release
			if (RISING_EDGE_ZERO)
 1ee:	7f 9b       	sbis	0x0f, 7	; 15
 1f0:	ea cf       	rjmp	.-44     	; 0x1c6 <lightsOff>
			{
				lightsCycle();
 1f2:	19 d0       	rcall	.+50     	; 0x226 <lightsCycle>
 1f4:	e8 cf       	rjmp	.-48     	; 0x1c6 <lightsOff>
			}
		}
		else if (FALLING_EDGE_ONE)
 1f6:	8f b1       	in	r24, 0x0f	; 15
 1f8:	82 95       	swap	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	83 70       	andi	r24, 0x03	; 3
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	09 f7       	brne	.-62     	; 0x1c6 <lightsOff>
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	29 e6       	ldi	r18, 0x69	; 105
 208:	88 e1       	ldi	r24, 0x18	; 24
 20a:	91 50       	subi	r25, 0x01	; 1
 20c:	20 40       	sbci	r18, 0x00	; 0
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <lightsOff+0x44>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lightsOff+0x4e>
 214:	00 00       	nop
		{
			_delay_ms(500);	// Sample button release
			if (RISING_EDGE_ONE)
 216:	8f b1       	in	r24, 0x0f	; 15
 218:	82 95       	swap	r24
 21a:	86 95       	lsr	r24
 21c:	86 95       	lsr	r24
 21e:	83 70       	andi	r24, 0x03	; 3
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	89 f6       	brne	.-94     	; 0x1c6 <lightsOff>
			{
				lightsFlash();
 224:	6a df       	rcall	.-300    	; 0xfa <lightsFlash>

00000226 <lightsCycle>:
{
	while (1)
	{
		int leds = 1;
		
		for (int i = 0; i < 4; i++)
 226:	10 e0       	ldi	r17, 0x00	; 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
		{
			PORTF |= leds << i;		// LED on
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	a4 e6       	ldi	r26, 0x64	; 100
 230:	30 e0       	ldi	r19, 0x00	; 0
{
	while (1)
	{
		int leds = 1;
		
		for (int i = 0; i < 4; i++)
 232:	41 2f       	mov	r20, r17
 234:	5b 2f       	mov	r21, r27
		{
			PORTF |= leds << i;		// LED on
 236:	81 b3       	in	r24, 0x11	; 17
 238:	bf 01       	movw	r22, r30
 23a:	04 2e       	mov	r0, r20
 23c:	02 c0       	rjmp	.+4      	; 0x242 <lightsCycle+0x1c>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <lightsCycle+0x18>
 246:	86 2b       	or	r24, r22
 248:	81 bb       	out	0x11, r24	; 17
 24a:	8a 2f       	mov	r24, r26
 24c:	93 2f       	mov	r25, r19
			
			for (int j = 0; j < 100; j++)
			{
				
				if (FALLING_EDGE_ZERO)
 24e:	7f 99       	sbic	0x0f, 7	; 15
 250:	09 c0       	rjmp	.+18     	; 0x264 <lightsCycle+0x3e>
 252:	cf e3       	ldi	r28, 0x3F	; 63
 254:	dc e9       	ldi	r29, 0x9C	; 156
 256:	21 97       	sbiw	r28, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lightsCycle+0x30>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lightsCycle+0x36>
 25c:	00 00       	nop
				{
					_delay_ms(10);	// Sample button release
					if (RISING_EDGE_ZERO)
 25e:	7f 9b       	sbis	0x0f, 7	; 15
 260:	1c c0       	rjmp	.+56     	; 0x29a <lightsCycle+0x74>
					{
						lightsOff();
 262:	b1 df       	rcall	.-158    	; 0x1c6 <lightsOff>
					}
				}
				else if (FALLING_EDGE_ONE)
 264:	2f b1       	in	r18, 0x0f	; 15
 266:	22 95       	swap	r18
 268:	26 95       	lsr	r18
 26a:	26 95       	lsr	r18
 26c:	23 70       	andi	r18, 0x03	; 3
 26e:	22 30       	cpi	r18, 0x02	; 2
 270:	71 f4       	brne	.+28     	; 0x28e <lightsCycle+0x68>
 272:	cf e3       	ldi	r28, 0x3F	; 63
 274:	dc e9       	ldi	r29, 0x9C	; 156
 276:	21 97       	sbiw	r28, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lightsCycle+0x50>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lightsCycle+0x56>
 27c:	00 00       	nop
				{
					_delay_ms(10);	// Sample button release
					if (RISING_EDGE_ONE)
 27e:	2f b1       	in	r18, 0x0f	; 15
 280:	22 95       	swap	r18
 282:	26 95       	lsr	r18
 284:	26 95       	lsr	r18
 286:	23 70       	andi	r18, 0x03	; 3
 288:	23 30       	cpi	r18, 0x03	; 3
 28a:	39 f4       	brne	.+14     	; 0x29a <lightsCycle+0x74>
					{
						lightsFlash();
 28c:	36 df       	rcall	.-404    	; 0xfa <lightsFlash>
 28e:	cf e3       	ldi	r28, 0x3F	; 63
 290:	dc e9       	ldi	r29, 0x9C	; 156
 292:	21 97       	sbiw	r28, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lightsCycle+0x6c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lightsCycle+0x72>
 298:	00 00       	nop
 29a:	01 97       	sbiw	r24, 0x01	; 1
		
		for (int i = 0; i < 4; i++)
		{
			PORTF |= leds << i;		// LED on
			
			for (int j = 0; j < 100; j++)
 29c:	c1 f6       	brne	.-80     	; 0x24e <lightsCycle+0x28>
				{
					_delay_ms(10);
				}
			}
			
			PORTF &= ~(leds << i);		// LED off
 29e:	81 b3       	in	r24, 0x11	; 17
 2a0:	60 95       	com	r22
 2a2:	68 23       	and	r22, r24
 2a4:	61 bb       	out	0x11, r22	; 17
{
	while (1)
	{
		int leds = 1;
		
		for (int i = 0; i < 4; i++)
 2a6:	4f 5f       	subi	r20, 0xFF	; 255
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	44 30       	cpi	r20, 0x04	; 4
 2ac:	51 05       	cpc	r21, r1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <lightsCycle+0x8c>
 2b0:	c2 cf       	rjmp	.-124    	; 0x236 <lightsCycle+0x10>
 2b2:	bf cf       	rjmp	.-130    	; 0x232 <lightsCycle+0xc>

000002b4 <main>:

int main(void)
{
	//	INPUT = 0, OUTPUT = 1
	
	DDRF = 0x0F;	// Set Pins A0-A3 for OUTPOUT and A6-A7 for INPUT
 2b4:	8f e0       	ldi	r24, 0x0F	; 15
 2b6:	80 bb       	out	0x10, r24	; 16
	PORTF = 0xC0;	// Set Pins A6-A7 for PULL_UP
 2b8:	80 ec       	ldi	r24, 0xC0	; 192
 2ba:	81 bb       	out	0x11, r24	; 17
	
	lightsOff();
 2bc:	84 df       	rcall	.-248    	; 0x1c6 <lightsOff>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
